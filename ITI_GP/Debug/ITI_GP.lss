
ITI_GP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000607c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  0000607c  00006110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  0080017e  0080017e  0000622e  2**0
                  ALLOC
  3 .stab         00006b70  00000000  00000000  00006230  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000036c1  00000000  00000000  0000cda0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00010621  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00010835  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00012e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00014315  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00015620  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00015800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00015b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016521  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 06 19 	jmp	0x320c	; 0x320c <__vector_4>
      14:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__vector_5>
      18:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__vector_6>
      1c:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__vector_7>
      20:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__vector_8>
      24:	0c 94 07 18 	jmp	0x300e	; 0x300e <__vector_9>
      28:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__vector_10>
      2c:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f0 e6       	ldi	r31, 0x60	; 96
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 07 	call	0xeea	; 0xeea <main>
      8a:	0c 94 3c 30 	jmp	0x6078	; 0x6078 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 05 30 	jmp	0x600a	; 0x600a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 21 30 	jmp	0x6042	; 0x6042 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 11 30 	jmp	0x6022	; 0x6022 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2d 30 	jmp	0x605a	; 0x605a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 11 30 	jmp	0x6022	; 0x6022 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2d 30 	jmp	0x605a	; 0x605a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 05 30 	jmp	0x600a	; 0x600a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 21 30 	jmp	0x6042	; 0x6042 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0d 30 	jmp	0x601a	; 0x601a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 29 30 	jmp	0x6052	; 0x6052 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 11 30 	jmp	0x6022	; 0x6022 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2d 30 	jmp	0x605a	; 0x605a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 11 30 	jmp	0x6022	; 0x6022 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2d 30 	jmp	0x605a	; 0x605a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 11 30 	jmp	0x6022	; 0x6022 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2d 30 	jmp	0x605a	; 0x605a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0e 30 	jmp	0x601c	; 0x601c <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 2a 30 	jmp	0x6054	; 0x6054 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 15 30 	jmp	0x602a	; 0x602a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 31 30 	jmp	0x6062	; 0x6062 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 0d 30 	jmp	0x601a	; 0x601a <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 29 30 	jmp	0x6052	; 0x6052 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e2 59       	subi	r30, 0x92	; 146
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <main>:
uint8 Main_u8LDRSamplingFlag = MAIN_u8SAMPLING_READY;
uint8 Main_u8TempSamplingFlag = MAIN_u8SAMPLING_READY;
uint8 Main_u8UltrasonicSamplingFlag = MAIN_u8SAMPLING_READY;

void main(void)
{
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	e8 97       	sbiw	r28, 0x38	; 56
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
	/*Peripherals Initializations*/
	PORT_voidInit();
     f0a:	0e 94 86 19 	call	0x330c	; 0x330c <PORT_voidInit>
	GIE_voidEnable();
     f0e:	0e 94 ab 19 	call	0x3356	; 0x3356 <GIE_voidEnable>
	ADC_voidInit();
     f12:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <ADC_voidInit>
	MCP2515_voidInit();
     f16:	0e 94 31 23 	call	0x4662	; 0x4662 <MCP2515_voidInit>
//	CLCD_voidInit();
//#endif
//
	/*Initialize timer 0*/
	TIMER0_2_CFG_t Local_stTimer0;
	Local_stTimer0.ClkSelect = TIMER0_u8SYS_CLK_BY_8;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	89 83       	std	Y+1, r24	; 0x01
	Local_stTimer0.OCMode = OC_DISCONNECTED;
     f1e:	1b 82       	std	Y+3, r1	; 0x03
	Local_stTimer0.WGM = CTC;
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_u8Init(&Local_stTimer0);
     f24:	ce 01       	movw	r24, r28
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TIMER0_u8Init>
	TIMER0_voidSetCompValue(250);
     f2c:	8a ef       	ldi	r24, 0xFA	; 250
     f2e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <TIMER0_voidSetCompValue>
	TIMERS_u8SetCallBack(TIMER0_COMP, Main_voidTimer0ISR);
     f32:	29 eb       	ldi	r18, 0xB9	; 185
     f34:	38 e0       	ldi	r19, 0x08	; 8
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	b9 01       	movw	r22, r18
     f3a:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <TIMERS_u8SetCallBack>
	TIMERS_u8IntEnable(TIMER0_COMP);
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <TIMERS_u8IntEnable>
	/*Define ultrasonic variables*/
	ULTSONIC_t Local_stRearUltrasonic =
	{
			.TrigPort = DIO_u8PORTD,
			.TrigPin = DIO_u8PIN7
	};
     f44:	83 e0       	ldi	r24, 0x03	; 3
     f46:	8a 87       	std	Y+10, r24	; 0x0a
     f48:	87 e0       	ldi	r24, 0x07	; 7
     f4a:	8b 87       	std	Y+11, r24	; 0x0b

	/*Define distance variables*/
	uint16 Local_u16RearDistance = 0;
     f4c:	1d 86       	std	Y+13, r1	; 0x0d
     f4e:	1c 86       	std	Y+12, r1	; 0x0c

	/*Define temperature variable*/
	uint8 Local_u8Temperature = 0;
     f50:	1e 86       	std	Y+14, r1	; 0x0e
	MCP2515_CanMessage_t Local_stLDRReadingsMessage =
	{
			.id = 0x11,
			.properties = 0,
			.length = 6
	};
     f52:	8e e0       	ldi	r24, 0x0E	; 14
     f54:	fe 01       	movw	r30, r28
     f56:	3f 96       	adiw	r30, 0x0f	; 15
     f58:	df 01       	movw	r26, r30
     f5a:	28 2f       	mov	r18, r24
     f5c:	1d 92       	st	X+, r1
     f5e:	2a 95       	dec	r18
     f60:	e9 f7       	brne	.-6      	; 0xf5c <main+0x72>
     f62:	81 e1       	ldi	r24, 0x11	; 17
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	8f 87       	std	Y+15, r24	; 0x0f
     f6c:	98 8b       	std	Y+16, r25	; 0x10
     f6e:	a9 8b       	std	Y+17, r26	; 0x11
     f70:	ba 8b       	std	Y+18, r27	; 0x12
     f72:	86 e0       	ldi	r24, 0x06	; 6
     f74:	8b 8f       	std	Y+27, r24	; 0x1b
	MCP2515_CanMessage_t Local_stRearUltrasonicMessage =
	{
			.id = 0x22,
			.properties = 0,
			.length = 1
	};
     f76:	8e e0       	ldi	r24, 0x0E	; 14
     f78:	fe 01       	movw	r30, r28
     f7a:	7d 96       	adiw	r30, 0x1d	; 29
     f7c:	df 01       	movw	r26, r30
     f7e:	28 2f       	mov	r18, r24
     f80:	1d 92       	st	X+, r1
     f82:	2a 95       	dec	r18
     f84:	e9 f7       	brne	.-6      	; 0xf80 <main+0x96>
     f86:	82 e2       	ldi	r24, 0x22	; 34
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	a0 e0       	ldi	r26, 0x00	; 0
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	8d 8f       	std	Y+29, r24	; 0x1d
     f90:	9e 8f       	std	Y+30, r25	; 0x1e
     f92:	af 8f       	std	Y+31, r26	; 0x1f
     f94:	b8 a3       	std	Y+32, r27	; 0x20
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	89 a7       	std	Y+41, r24	; 0x29
	MCP2515_CanMessage_t Local_stTemperatureMessage =
	{
			.id = 0x33,
			.properties = 0,
			.length = 1
	};
     f9a:	8e e0       	ldi	r24, 0x0E	; 14
     f9c:	fe 01       	movw	r30, r28
     f9e:	bb 96       	adiw	r30, 0x2b	; 43
     fa0:	df 01       	movw	r26, r30
     fa2:	28 2f       	mov	r18, r24
     fa4:	1d 92       	st	X+, r1
     fa6:	2a 95       	dec	r18
     fa8:	e9 f7       	brne	.-6      	; 0xfa4 <main+0xba>
     faa:	83 e3       	ldi	r24, 0x33	; 51
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	8b a7       	std	Y+43, r24	; 0x2b
     fb4:	9c a7       	std	Y+44, r25	; 0x2c
     fb6:	ad a7       	std	Y+45, r26	; 0x2d
     fb8:	be a7       	std	Y+46, r27	; 0x2e
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	8f ab       	std	Y+55, r24	; 0x37


	while(1)
	{
		if(Main_u8LDRSamplingFlag == MAIN_u8SAMPLING_READY)
     fbe:	80 91 7e 01 	lds	r24, 0x017E
     fc2:	88 23       	and	r24, r24
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <main+0xde>
     fc6:	67 c0       	rjmp	.+206    	; 0x1096 <main+0x1ac>
		{
			/*Get the light intensity from the 3 LDRs*/
			LDR_u8GetAnalogVolt(LDR_u8ADC_CH0, &Local_u16RightLDRReading);
     fc8:	9e 01       	movw	r18, r28
     fca:	2c 5f       	subi	r18, 0xFC	; 252
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	b9 01       	movw	r22, r18
     fd2:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <LDR_u8GetAnalogVolt>
			LDR_u8GetAnalogVolt(LDR_u8ADC_CH1, &Local_u16MediumLDRReading);
     fd6:	9e 01       	movw	r18, r28
     fd8:	2a 5f       	subi	r18, 0xFA	; 250
     fda:	3f 4f       	sbci	r19, 0xFF	; 255
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	b9 01       	movw	r22, r18
     fe0:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <LDR_u8GetAnalogVolt>
			LDR_u8GetAnalogVolt(LDR_u8ADC_CH2, &Local_u16LeftLDRReading);
     fe4:	9e 01       	movw	r18, r28
     fe6:	28 5f       	subi	r18, 0xF8	; 248
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	b9 01       	movw	r22, r18
     fee:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <LDR_u8GetAnalogVolt>

			/*Construct the LDR samples into the CAN message*/
			Local_stLDRReadingsMessage.data[0] = (uint8) Local_u16RightLDRReading;
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	8b 8b       	std	Y+19, r24	; 0x13
			Local_stLDRReadingsMessage.data[1] = (uint8) (Local_u16RightLDRReading >> 8u);
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	89 2f       	mov	r24, r25
     ffe:	99 27       	eor	r25, r25
    1000:	8c 8b       	std	Y+20, r24	; 0x14
			Local_stLDRReadingsMessage.data[2] = (uint8) Local_u16MediumLDRReading;
    1002:	8e 81       	ldd	r24, Y+6	; 0x06
    1004:	9f 81       	ldd	r25, Y+7	; 0x07
    1006:	8d 8b       	std	Y+21, r24	; 0x15
			Local_stLDRReadingsMessage.data[3] = (uint8) (Local_u16MediumLDRReading >> 8u);
    1008:	8e 81       	ldd	r24, Y+6	; 0x06
    100a:	9f 81       	ldd	r25, Y+7	; 0x07
    100c:	89 2f       	mov	r24, r25
    100e:	99 27       	eor	r25, r25
    1010:	8e 8b       	std	Y+22, r24	; 0x16
			Local_stLDRReadingsMessage.data[4] = (uint8) Local_u16LeftLDRReading;
    1012:	88 85       	ldd	r24, Y+8	; 0x08
    1014:	99 85       	ldd	r25, Y+9	; 0x09
    1016:	8f 8b       	std	Y+23, r24	; 0x17
			Local_stLDRReadingsMessage.data[5] = (uint8) (Local_u16LeftLDRReading >> 8u);
    1018:	88 85       	ldd	r24, Y+8	; 0x08
    101a:	99 85       	ldd	r25, Y+9	; 0x09
    101c:	89 2f       	mov	r24, r25
    101e:	99 27       	eor	r25, r25
    1020:	88 8f       	std	Y+24, r24	; 0x18

			/*Send the LDR samples to the CAN bus*/
			MCP2515_voidSendCANmsg(Local_stLDRReadingsMessage);
    1022:	cf 84       	ldd	r12, Y+15	; 0x0f
    1024:	d8 88       	ldd	r13, Y+16	; 0x10
    1026:	e9 88       	ldd	r14, Y+17	; 0x11
    1028:	fa 88       	ldd	r15, Y+18	; 0x12
    102a:	0b 89       	ldd	r16, Y+19	; 0x13
    102c:	1c 89       	ldd	r17, Y+20	; 0x14
    102e:	2d 89       	ldd	r18, Y+21	; 0x15
    1030:	3e 89       	ldd	r19, Y+22	; 0x16
    1032:	4f 89       	ldd	r20, Y+23	; 0x17
    1034:	58 8d       	ldd	r21, Y+24	; 0x18
    1036:	69 8d       	ldd	r22, Y+25	; 0x19
    1038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    103a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    103c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    103e:	0e 94 50 23 	call	0x46a0	; 0x46a0 <MCP2515_voidSendCANmsg>

			CLCD_u8GoToXY(0, 0);
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	0e 94 3f 2b 	call	0x567e	; 0x567e <CLCD_u8GoToXY>
			CLCD_voidSendDecimalNumber(Local_u16RightLDRReading);
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	cc 01       	movw	r24, r24
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	0e 94 67 29 	call	0x52ce	; 0x52ce <CLCD_voidSendDecimalNumber>

			CLCD_u8GoToXY(5, 0);
    105c:	85 e0       	ldi	r24, 0x05	; 5
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	0e 94 3f 2b 	call	0x567e	; 0x567e <CLCD_u8GoToXY>
			CLCD_voidSendDecimalNumber(Local_u16MediumLDRReading);
    1064:	8e 81       	ldd	r24, Y+6	; 0x06
    1066:	9f 81       	ldd	r25, Y+7	; 0x07
    1068:	cc 01       	movw	r24, r24
    106a:	a0 e0       	ldi	r26, 0x00	; 0
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	0e 94 67 29 	call	0x52ce	; 0x52ce <CLCD_voidSendDecimalNumber>

			CLCD_u8GoToXY(10, 0);
    1076:	8a e0       	ldi	r24, 0x0A	; 10
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	0e 94 3f 2b 	call	0x567e	; 0x567e <CLCD_u8GoToXY>
			CLCD_voidSendDecimalNumber(Local_u16LeftLDRReading);
    107e:	88 85       	ldd	r24, Y+8	; 0x08
    1080:	99 85       	ldd	r25, Y+9	; 0x09
    1082:	cc 01       	movw	r24, r24
    1084:	a0 e0       	ldi	r26, 0x00	; 0
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	bc 01       	movw	r22, r24
    108a:	cd 01       	movw	r24, r26
    108c:	0e 94 67 29 	call	0x52ce	; 0x52ce <CLCD_voidSendDecimalNumber>

			/*Pend the sampling flag again*/
			Main_u8LDRSamplingFlag = MAIN_u8SAMPLING_STILL_PENDING;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 7e 01 	sts	0x017E, r24
		}

		if(Main_u8UltrasonicSamplingFlag == MAIN_u8SAMPLING_READY)
    1096:	80 91 80 01 	lds	r24, 0x0180
    109a:	88 23       	and	r24, r24
    109c:	c9 f5       	brne	.+114    	; 0x1110 <main+0x226>
		{
			/*Measure the distance from the rear ultrasonic*/
			TIMERS_u8IntDisable(TIMER0_COMP);
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	0e 94 92 15 	call	0x2b24	; 0x2b24 <TIMERS_u8IntDisable>
			ULTSONIC_u8MeasureDistance(&Local_stRearUltrasonic, &Local_u16RearDistance);
    10a4:	ce 01       	movw	r24, r28
    10a6:	0a 96       	adiw	r24, 0x0a	; 10
    10a8:	9e 01       	movw	r18, r28
    10aa:	24 5f       	subi	r18, 0xF4	; 244
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	b9 01       	movw	r22, r18
    10b0:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <ULTSONIC_u8MeasureDistance>
			TIMERS_u8IntEnable(TIMER0_COMP);
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <TIMERS_u8IntEnable>

			if(Local_u16RearDistance > 300)
    10ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    10bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    10be:	a1 e0       	ldi	r26, 0x01	; 1
    10c0:	8d 32       	cpi	r24, 0x2D	; 45
    10c2:	9a 07       	cpc	r25, r26
    10c4:	10 f0       	brcs	.+4      	; 0x10ca <main+0x1e0>
			{
				Local_u16RearDistance = 0u;
    10c6:	1d 86       	std	Y+13, r1	; 0x0d
    10c8:	1c 86       	std	Y+12, r1	; 0x0c
			}

			/*Construct the rear distance into the CAN message*/
			Local_stRearUltrasonicMessage.data[0] = (uint8) Local_u16RearDistance;
    10ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    10cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    10ce:	89 a3       	std	Y+33, r24	; 0x21

			/*Send the rear distance to the CAN bus*/
			MCP2515_voidSendCANmsg(Local_stRearUltrasonicMessage);
    10d0:	cd 8c       	ldd	r12, Y+29	; 0x1d
    10d2:	de 8c       	ldd	r13, Y+30	; 0x1e
    10d4:	ef 8c       	ldd	r14, Y+31	; 0x1f
    10d6:	f8 a0       	ldd	r15, Y+32	; 0x20
    10d8:	09 a1       	ldd	r16, Y+33	; 0x21
    10da:	1a a1       	ldd	r17, Y+34	; 0x22
    10dc:	2b a1       	ldd	r18, Y+35	; 0x23
    10de:	3c a1       	ldd	r19, Y+36	; 0x24
    10e0:	4d a1       	ldd	r20, Y+37	; 0x25
    10e2:	5e a1       	ldd	r21, Y+38	; 0x26
    10e4:	6f a1       	ldd	r22, Y+39	; 0x27
    10e6:	78 a5       	ldd	r23, Y+40	; 0x28
    10e8:	89 a5       	ldd	r24, Y+41	; 0x29
    10ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ec:	0e 94 50 23 	call	0x46a0	; 0x46a0 <MCP2515_voidSendCANmsg>

			/*Pend the sampling flag again*/
			CLCD_u8GoToXY(8, 1);
    10f0:	88 e0       	ldi	r24, 0x08	; 8
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	0e 94 3f 2b 	call	0x567e	; 0x567e <CLCD_u8GoToXY>
			CLCD_voidSendDecimalNumber(Local_u16RearDistance);
    10f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    10fc:	cc 01       	movw	r24, r24
    10fe:	a0 e0       	ldi	r26, 0x00	; 0
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	0e 94 67 29 	call	0x52ce	; 0x52ce <CLCD_voidSendDecimalNumber>

			Main_u8UltrasonicSamplingFlag = MAIN_u8SAMPLING_STILL_PENDING;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	80 93 80 01 	sts	0x0180, r24
		}

		if(Main_u8TempSamplingFlag == MAIN_u8SAMPLING_READY)
    1110:	80 91 7f 01 	lds	r24, 0x017F
    1114:	88 23       	and	r24, r24
    1116:	09 f0       	breq	.+2      	; 0x111a <main+0x230>
    1118:	52 cf       	rjmp	.-348    	; 0xfbe <main+0xd4>
		{
			/*Get the temperature from LM35 sensor*/
			LM35_u8GetTemp(LM35_u8ADC_CH3, &Local_u8Temperature);
    111a:	9e 01       	movw	r18, r28
    111c:	22 5f       	subi	r18, 0xF2	; 242
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	b9 01       	movw	r22, r18
    1124:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <LM35_u8GetTemp>

			/*Construct the temperature into the CAN message*/
			Local_stTemperatureMessage.data[0] = Local_u8Temperature;
    1128:	8e 85       	ldd	r24, Y+14	; 0x0e
    112a:	8f a7       	std	Y+47, r24	; 0x2f

			/*Send the rear distance to the CAN bus*/
			MCP2515_voidSendCANmsg(Local_stTemperatureMessage);
    112c:	cb a4       	ldd	r12, Y+43	; 0x2b
    112e:	dc a4       	ldd	r13, Y+44	; 0x2c
    1130:	ed a4       	ldd	r14, Y+45	; 0x2d
    1132:	fe a4       	ldd	r15, Y+46	; 0x2e
    1134:	0f a5       	ldd	r16, Y+47	; 0x2f
    1136:	18 a9       	ldd	r17, Y+48	; 0x30
    1138:	29 a9       	ldd	r18, Y+49	; 0x31
    113a:	3a a9       	ldd	r19, Y+50	; 0x32
    113c:	4b a9       	ldd	r20, Y+51	; 0x33
    113e:	5c a9       	ldd	r21, Y+52	; 0x34
    1140:	6d a9       	ldd	r22, Y+53	; 0x35
    1142:	7e a9       	ldd	r23, Y+54	; 0x36
    1144:	8f a9       	ldd	r24, Y+55	; 0x37
    1146:	98 ad       	ldd	r25, Y+56	; 0x38
    1148:	0e 94 50 23 	call	0x46a0	; 0x46a0 <MCP2515_voidSendCANmsg>

			CLCD_voidClearDisplay();
    114c:	0e 94 2a 29 	call	0x5254	; 0x5254 <CLCD_voidClearDisplay>
			CLCD_u8GoToXY(0, 1);
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	0e 94 3f 2b 	call	0x567e	; 0x567e <CLCD_u8GoToXY>
			CLCD_voidSendDecimalNumber(Local_u8Temperature);
    1158:	8e 85       	ldd	r24, Y+14	; 0x0e
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a0 e0       	ldi	r26, 0x00	; 0
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 67 29 	call	0x52ce	; 0x52ce <CLCD_voidSendDecimalNumber>

			/*Pend the sampling flag again*/
			Main_u8TempSamplingFlag = MAIN_u8SAMPLING_STILL_PENDING;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 7f 01 	sts	0x017F, r24
    1170:	26 cf       	rjmp	.-436    	; 0xfbe <main+0xd4>

00001172 <Main_voidTimer0ISR>:
		}
	}
}

void Main_voidTimer0ISR(void)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	static uint16 Local_u16Counter;

	Local_u16Counter++;
    117a:	80 91 81 01 	lds	r24, 0x0181
    117e:	90 91 82 01 	lds	r25, 0x0182
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	90 93 82 01 	sts	0x0182, r25
    1188:	80 93 81 01 	sts	0x0181, r24

	/*Control the LDRs sampling flag*/
	if((Local_u16Counter % 80) == 0u)
    118c:	80 91 81 01 	lds	r24, 0x0181
    1190:	90 91 82 01 	lds	r25, 0x0182
    1194:	20 e5       	ldi	r18, 0x50	; 80
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	b9 01       	movw	r22, r18
    119a:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <__udivmodhi4>
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <Main_voidTimer0ISR+0x34>
	{
		Main_u8LDRSamplingFlag = MAIN_u8SAMPLING_READY;
    11a2:	10 92 7e 01 	sts	0x017E, r1
	}

	/*Control the rear ultrasonic distance sampling flag*/
	if((Local_u16Counter % 1000) == 0u)
    11a6:	80 91 81 01 	lds	r24, 0x0181
    11aa:	90 91 82 01 	lds	r25, 0x0182
    11ae:	28 ee       	ldi	r18, 0xE8	; 232
    11b0:	33 e0       	ldi	r19, 0x03	; 3
    11b2:	b9 01       	movw	r22, r18
    11b4:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <__udivmodhi4>
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	11 f4       	brne	.+4      	; 0x11c0 <Main_voidTimer0ISR+0x4e>
	{
		Main_u8UltrasonicSamplingFlag = MAIN_u8SAMPLING_READY;
    11bc:	10 92 80 01 	sts	0x0180, r1
	}

	/*Control the temperature sampling flag*/
	if(Local_u16Counter == 2000u)
    11c0:	80 91 81 01 	lds	r24, 0x0181
    11c4:	90 91 82 01 	lds	r25, 0x0182
    11c8:	27 e0       	ldi	r18, 0x07	; 7
    11ca:	80 3d       	cpi	r24, 0xD0	; 208
    11cc:	92 07       	cpc	r25, r18
    11ce:	31 f4       	brne	.+12     	; 0x11dc <Main_voidTimer0ISR+0x6a>
	{
		Main_u8TempSamplingFlag = MAIN_u8SAMPLING_READY;
    11d0:	10 92 7f 01 	sts	0x017F, r1
		Local_u16Counter = 0;
    11d4:	10 92 82 01 	sts	0x0182, r1
    11d8:	10 92 81 01 	sts	0x0181, r1
	}
}
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <ICU_voidMeasurePWM>:
 * @brief 						Function that return the characteristics of a PWM signal.
 * @param Copy_pu8DutyCycle		Pointer to return the duty cycle of the signal.
 * @param Copy_pu32PeriodTime	Pointer to return the period time of the signal.
 */
void ICU_voidMeasurePWM(uint8 *Copy_pu8DutyCycle, uint32 *Copy_pu32PeriodTime)
{
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	2d 97       	sbiw	r28, 0x0d	; 13
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	9b 87       	std	Y+11, r25	; 0x0b
    1200:	8a 87       	std	Y+10, r24	; 0x0a
    1202:	7d 87       	std	Y+13, r23	; 0x0d
    1204:	6c 87       	std	Y+12, r22	; 0x0c
	uint32 Local_u32PeriodTime = 0u;
    1206:	1a 82       	std	Y+2, r1	; 0x02
    1208:	1b 82       	std	Y+3, r1	; 0x03
    120a:	1c 82       	std	Y+4, r1	; 0x04
    120c:	1d 82       	std	Y+5, r1	; 0x05
	uint8 Local_u8DutyCycle = 0u;
    120e:	19 82       	std	Y+1, r1	; 0x01

	TIMER1_CFG_t Local_stTimer1Cfg;
	Local_stTimer1Cfg.ClkSelect = TIMER1_u8SYS_CLK_BY_8;
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	8e 83       	std	Y+6, r24	; 0x06
	Local_stTimer1Cfg.WGM = NORMAL_16_BITS;
    1214:	1f 82       	std	Y+7, r1	; 0x07
	Local_stTimer1Cfg.OCAMode = OC_DISCONNECTED;
    1216:	18 86       	std	Y+8, r1	; 0x08
	Local_stTimer1Cfg.OCBMode = OC_DISCONNECTED;
    1218:	19 86       	std	Y+9, r1	; 0x09
	TIMER1_u8Init(&Local_stTimer1Cfg);
    121a:	ce 01       	movw	r24, r28
    121c:	06 96       	adiw	r24, 0x06	; 6
    121e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <TIMER1_u8Init>

	TIMERS_u8IntEnable(TIMER1_CAPT);
    1222:	85 e0       	ldi	r24, 0x05	; 5
    1224:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <TIMERS_u8IntEnable>
	TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_RISING_EDGE);
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <TIMER1_u8SetInputCaptTriggerSrc>
	TIMERS_u8SetCallBack(TIMER1_CAPT, ICU_voidCaptureISR);
    122e:	2d ec       	ldi	r18, 0xCD	; 205
    1230:	3a e0       	ldi	r19, 0x0A	; 10
    1232:	85 e0       	ldi	r24, 0x05	; 5
    1234:	b9 01       	movw	r22, r18
    1236:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <TIMERS_u8SetCallBack>

	TIMERS_u8IntEnable(TIMER1_OVF);
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <TIMERS_u8IntEnable>
	TIMERS_u8SetCallBack(TIMER1_OVF, ICU_voidOvfISR);
    1240:	2c e0       	ldi	r18, 0x0C	; 12
    1242:	3b e0       	ldi	r19, 0x0B	; 11
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	b9 01       	movw	r22, r18
    1248:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <TIMERS_u8SetCallBack>
	while((ICU_u16Capture1 == 0u) || (ICU_u16Capture2 == 0u) || (ICU_u16Capture3 == 0u));
    124c:	80 91 83 01 	lds	r24, 0x0183
    1250:	90 91 84 01 	lds	r25, 0x0184
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	d1 f3       	breq	.-12     	; 0x124c <ICU_voidMeasurePWM+0x6a>
    1258:	80 91 85 01 	lds	r24, 0x0185
    125c:	90 91 86 01 	lds	r25, 0x0186
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	a1 f3       	breq	.-24     	; 0x124c <ICU_voidMeasurePWM+0x6a>
    1264:	80 91 87 01 	lds	r24, 0x0187
    1268:	90 91 88 01 	lds	r25, 0x0188
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	71 f3       	breq	.-36     	; 0x124c <ICU_voidMeasurePWM+0x6a>

	if(ICU_u8PeriodOvfCounter == 0u)
    1270:	80 91 8a 01 	lds	r24, 0x018A
    1274:	88 23       	and	r24, r24
    1276:	09 f0       	breq	.+2      	; 0x127a <ICU_voidMeasurePWM+0x98>
    1278:	48 c0       	rjmp	.+144    	; 0x130a <ICU_voidMeasurePWM+0x128>
	{
		Local_u32PeriodTime = ICU_u16Capture2 - ICU_u16Capture1;
    127a:	20 91 85 01 	lds	r18, 0x0185
    127e:	30 91 86 01 	lds	r19, 0x0186
    1282:	80 91 83 01 	lds	r24, 0x0183
    1286:	90 91 84 01 	lds	r25, 0x0184
    128a:	a9 01       	movw	r20, r18
    128c:	48 1b       	sub	r20, r24
    128e:	59 0b       	sbc	r21, r25
    1290:	ca 01       	movw	r24, r20
    1292:	cc 01       	movw	r24, r24
    1294:	a0 e0       	ldi	r26, 0x00	; 0
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	8a 83       	std	Y+2, r24	; 0x02
    129a:	9b 83       	std	Y+3, r25	; 0x03
    129c:	ac 83       	std	Y+4, r26	; 0x04
    129e:	bd 83       	std	Y+5, r27	; 0x05
		Local_u8DutyCycle = (((f32) (ICU_u16Capture3 - ICU_u16Capture2)) / (f32) Local_u32PeriodTime) * 100;
    12a0:	20 91 87 01 	lds	r18, 0x0187
    12a4:	30 91 88 01 	lds	r19, 0x0188
    12a8:	80 91 85 01 	lds	r24, 0x0185
    12ac:	90 91 86 01 	lds	r25, 0x0186
    12b0:	a9 01       	movw	r20, r18
    12b2:	48 1b       	sub	r20, r24
    12b4:	59 0b       	sbc	r21, r25
    12b6:	ca 01       	movw	r24, r20
    12b8:	cc 01       	movw	r24, r24
    12ba:	a0 e0       	ldi	r26, 0x00	; 0
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    12c6:	7b 01       	movw	r14, r22
    12c8:	8c 01       	movw	r16, r24
    12ca:	6a 81       	ldd	r22, Y+2	; 0x02
    12cc:	7b 81       	ldd	r23, Y+3	; 0x03
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	9d 81       	ldd	r25, Y+5	; 0x05
    12d2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    12d6:	9b 01       	movw	r18, r22
    12d8:	ac 01       	movw	r20, r24
    12da:	c8 01       	movw	r24, r16
    12dc:	b7 01       	movw	r22, r14
    12de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	48 ec       	ldi	r20, 0xC8	; 200
    12f0:	52 e4       	ldi	r21, 0x42	; 66
    12f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	27 c1       	rjmp	.+590    	; 0x1558 <ICU_voidMeasurePWM+0x376>
	}
	else
	{
		if(ICU_u16Capture2 >= ICU_u16Capture1)
    130a:	20 91 85 01 	lds	r18, 0x0185
    130e:	30 91 86 01 	lds	r19, 0x0186
    1312:	80 91 83 01 	lds	r24, 0x0183
    1316:	90 91 84 01 	lds	r25, 0x0184
    131a:	28 17       	cp	r18, r24
    131c:	39 07       	cpc	r19, r25
    131e:	08 f1       	brcs	.+66     	; 0x1362 <ICU_voidMeasurePWM+0x180>
		{
			Local_u32PeriodTime = ICU_u16Capture2 - ICU_u16Capture1 + (ICU_u8PeriodOvfCounter * 65536u);
    1320:	20 91 85 01 	lds	r18, 0x0185
    1324:	30 91 86 01 	lds	r19, 0x0186
    1328:	80 91 83 01 	lds	r24, 0x0183
    132c:	90 91 84 01 	lds	r25, 0x0184
    1330:	a9 01       	movw	r20, r18
    1332:	48 1b       	sub	r20, r24
    1334:	59 0b       	sbc	r21, r25
    1336:	ca 01       	movw	r24, r20
    1338:	9c 01       	movw	r18, r24
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	80 91 8a 01 	lds	r24, 0x018A
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 e0       	ldi	r26, 0x00	; 0
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	dc 01       	movw	r26, r24
    134c:	99 27       	eor	r25, r25
    134e:	88 27       	eor	r24, r24
    1350:	82 0f       	add	r24, r18
    1352:	93 1f       	adc	r25, r19
    1354:	a4 1f       	adc	r26, r20
    1356:	b5 1f       	adc	r27, r21
    1358:	8a 83       	std	Y+2, r24	; 0x02
    135a:	9b 83       	std	Y+3, r25	; 0x03
    135c:	ac 83       	std	Y+4, r26	; 0x04
    135e:	bd 83       	std	Y+5, r27	; 0x05
    1360:	2b c0       	rjmp	.+86     	; 0x13b8 <ICU_voidMeasurePWM+0x1d6>
		}
		else if(ICU_u16Capture2 < ICU_u16Capture1)
    1362:	20 91 85 01 	lds	r18, 0x0185
    1366:	30 91 86 01 	lds	r19, 0x0186
    136a:	80 91 83 01 	lds	r24, 0x0183
    136e:	90 91 84 01 	lds	r25, 0x0184
    1372:	28 17       	cp	r18, r24
    1374:	39 07       	cpc	r19, r25
    1376:	00 f5       	brcc	.+64     	; 0x13b8 <ICU_voidMeasurePWM+0x1d6>
		{
			Local_u32PeriodTime = ICU_u16Capture1 - ICU_u16Capture2 + (ICU_u8PeriodOvfCounter * 65536u);
    1378:	20 91 83 01 	lds	r18, 0x0183
    137c:	30 91 84 01 	lds	r19, 0x0184
    1380:	80 91 85 01 	lds	r24, 0x0185
    1384:	90 91 86 01 	lds	r25, 0x0186
    1388:	a9 01       	movw	r20, r18
    138a:	48 1b       	sub	r20, r24
    138c:	59 0b       	sbc	r21, r25
    138e:	ca 01       	movw	r24, r20
    1390:	9c 01       	movw	r18, r24
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	80 91 8a 01 	lds	r24, 0x018A
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a0 e0       	ldi	r26, 0x00	; 0
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	dc 01       	movw	r26, r24
    13a4:	99 27       	eor	r25, r25
    13a6:	88 27       	eor	r24, r24
    13a8:	82 0f       	add	r24, r18
    13aa:	93 1f       	adc	r25, r19
    13ac:	a4 1f       	adc	r26, r20
    13ae:	b5 1f       	adc	r27, r21
    13b0:	8a 83       	std	Y+2, r24	; 0x02
    13b2:	9b 83       	std	Y+3, r25	; 0x03
    13b4:	ac 83       	std	Y+4, r26	; 0x04
    13b6:	bd 83       	std	Y+5, r27	; 0x05
		}

		if(ICU_u8DutyCycleOvfCounter == 0u)
    13b8:	80 91 8b 01 	lds	r24, 0x018B
    13bc:	88 23       	and	r24, r24
    13be:	a9 f5       	brne	.+106    	; 0x142a <ICU_voidMeasurePWM+0x248>
		{
			Local_u8DutyCycle = (((f32) (ICU_u16Capture3 - ICU_u16Capture2)) / (f32) Local_u32PeriodTime) * 100;
    13c0:	20 91 87 01 	lds	r18, 0x0187
    13c4:	30 91 88 01 	lds	r19, 0x0188
    13c8:	80 91 85 01 	lds	r24, 0x0185
    13cc:	90 91 86 01 	lds	r25, 0x0186
    13d0:	a9 01       	movw	r20, r18
    13d2:	48 1b       	sub	r20, r24
    13d4:	59 0b       	sbc	r21, r25
    13d6:	ca 01       	movw	r24, r20
    13d8:	cc 01       	movw	r24, r24
    13da:	a0 e0       	ldi	r26, 0x00	; 0
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    13e6:	7b 01       	movw	r14, r22
    13e8:	8c 01       	movw	r16, r24
    13ea:	6a 81       	ldd	r22, Y+2	; 0x02
    13ec:	7b 81       	ldd	r23, Y+3	; 0x03
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    13f6:	9b 01       	movw	r18, r22
    13f8:	ac 01       	movw	r20, r24
    13fa:	c8 01       	movw	r24, r16
    13fc:	b7 01       	movw	r22, r14
    13fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	bc 01       	movw	r22, r24
    1408:	cd 01       	movw	r24, r26
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	48 ec       	ldi	r20, 0xC8	; 200
    1410:	52 e4       	ldi	r21, 0x42	; 66
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	97 c0       	rjmp	.+302    	; 0x1558 <ICU_voidMeasurePWM+0x376>
		}
		else
		{
			if(ICU_u16Capture3 >= ICU_u16Capture2)
    142a:	20 91 87 01 	lds	r18, 0x0187
    142e:	30 91 88 01 	lds	r19, 0x0188
    1432:	80 91 85 01 	lds	r24, 0x0185
    1436:	90 91 86 01 	lds	r25, 0x0186
    143a:	28 17       	cp	r18, r24
    143c:	39 07       	cpc	r19, r25
    143e:	08 f4       	brcc	.+2      	; 0x1442 <ICU_voidMeasurePWM+0x260>
    1440:	40 c0       	rjmp	.+128    	; 0x14c2 <ICU_voidMeasurePWM+0x2e0>
			{
				Local_u8DutyCycle = ICU_u16Capture3 - ICU_u16Capture2 + (ICU_u8DutyCycleOvfCounter * 65536u);
    1442:	80 91 87 01 	lds	r24, 0x0187
    1446:	90 91 88 01 	lds	r25, 0x0188
    144a:	28 2f       	mov	r18, r24
    144c:	80 91 85 01 	lds	r24, 0x0185
    1450:	90 91 86 01 	lds	r25, 0x0186
    1454:	28 1b       	sub	r18, r24
    1456:	80 91 8b 01 	lds	r24, 0x018B
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a0 e0       	ldi	r26, 0x00	; 0
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	dc 01       	movw	r26, r24
    1464:	99 27       	eor	r25, r25
    1466:	88 27       	eor	r24, r24
    1468:	82 0f       	add	r24, r18
    146a:	89 83       	std	Y+1, r24	; 0x01
				Local_u8DutyCycle = ((f32) Local_u8DutyCycle / (f32) Local_u32PeriodTime) * 100;
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a0 e0       	ldi	r26, 0x00	; 0
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    147e:	7b 01       	movw	r14, r22
    1480:	8c 01       	movw	r16, r24
    1482:	6a 81       	ldd	r22, Y+2	; 0x02
    1484:	7b 81       	ldd	r23, Y+3	; 0x03
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    148e:	9b 01       	movw	r18, r22
    1490:	ac 01       	movw	r20, r24
    1492:	c8 01       	movw	r24, r16
    1494:	b7 01       	movw	r22, r14
    1496:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	48 ec       	ldi	r20, 0xC8	; 200
    14a8:	52 e4       	ldi	r21, 0x42	; 66
    14aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	4b c0       	rjmp	.+150    	; 0x1558 <ICU_voidMeasurePWM+0x376>
			}
			else if(ICU_u16Capture3 < ICU_u16Capture2)
    14c2:	20 91 87 01 	lds	r18, 0x0187
    14c6:	30 91 88 01 	lds	r19, 0x0188
    14ca:	80 91 85 01 	lds	r24, 0x0185
    14ce:	90 91 86 01 	lds	r25, 0x0186
    14d2:	28 17       	cp	r18, r24
    14d4:	39 07       	cpc	r19, r25
    14d6:	08 f0       	brcs	.+2      	; 0x14da <ICU_voidMeasurePWM+0x2f8>
    14d8:	3f c0       	rjmp	.+126    	; 0x1558 <ICU_voidMeasurePWM+0x376>
			{
				Local_u8DutyCycle = ICU_u16Capture2 - ICU_u16Capture3 + (ICU_u8DutyCycleOvfCounter * 65536u);
    14da:	80 91 85 01 	lds	r24, 0x0185
    14de:	90 91 86 01 	lds	r25, 0x0186
    14e2:	28 2f       	mov	r18, r24
    14e4:	80 91 87 01 	lds	r24, 0x0187
    14e8:	90 91 88 01 	lds	r25, 0x0188
    14ec:	28 1b       	sub	r18, r24
    14ee:	80 91 8b 01 	lds	r24, 0x018B
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a0 e0       	ldi	r26, 0x00	; 0
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	dc 01       	movw	r26, r24
    14fc:	99 27       	eor	r25, r25
    14fe:	88 27       	eor	r24, r24
    1500:	82 0f       	add	r24, r18
    1502:	89 83       	std	Y+1, r24	; 0x01
				Local_u8DutyCycle = ((f32) Local_u8DutyCycle / (f32) Local_u32PeriodTime) * 100;
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a0 e0       	ldi	r26, 0x00	; 0
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1516:	7b 01       	movw	r14, r22
    1518:	8c 01       	movw	r16, r24
    151a:	6a 81       	ldd	r22, Y+2	; 0x02
    151c:	7b 81       	ldd	r23, Y+3	; 0x03
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1526:	9b 01       	movw	r18, r22
    1528:	ac 01       	movw	r20, r24
    152a:	c8 01       	movw	r24, r16
    152c:	b7 01       	movw	r22, r14
    152e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	bc 01       	movw	r22, r24
    1538:	cd 01       	movw	r24, r26
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	48 ec       	ldi	r20, 0xC8	; 200
    1540:	52 e4       	ldi	r21, 0x42	; 66
    1542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	}

	*Copy_pu32PeriodTime = Local_u32PeriodTime;
    1558:	ec 85       	ldd	r30, Y+12	; 0x0c
    155a:	fd 85       	ldd	r31, Y+13	; 0x0d
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	9b 81       	ldd	r25, Y+3	; 0x03
    1560:	ac 81       	ldd	r26, Y+4	; 0x04
    1562:	bd 81       	ldd	r27, Y+5	; 0x05
    1564:	80 83       	st	Z, r24
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	a2 83       	std	Z+2, r26	; 0x02
    156a:	b3 83       	std	Z+3, r27	; 0x03
	*Copy_pu8DutyCycle = Local_u8DutyCycle;
    156c:	ea 85       	ldd	r30, Y+10	; 0x0a
    156e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	80 83       	st	Z, r24
	TIMERS_u8IntDisable(TIMER1_OVF);
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	0e 94 92 15 	call	0x2b24	; 0x2b24 <TIMERS_u8IntDisable>
	TIMERS_u8Disable(TIMER1);
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	0e 94 19 16 	call	0x2c32	; 0x2c32 <TIMERS_u8Disable>
}
    1580:	2d 96       	adiw	r28, 0x0d	; 13
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	08 95       	ret

0000159a <ICU_voidCaptureISR>:

/**
 * @brief Input capture ISR Function to be send to the timer ISR.
 */
static void ICU_voidCaptureISR(void)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8Counter = 0u;

	Local_u8Counter++;
    15a2:	80 91 8c 01 	lds	r24, 0x018C
    15a6:	8f 5f       	subi	r24, 0xFF	; 255
    15a8:	80 93 8c 01 	sts	0x018C, r24

	if(Local_u8Counter == 1u)
    15ac:	80 91 8c 01 	lds	r24, 0x018C
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	39 f4       	brne	.+14     	; 0x15c2 <ICU_voidCaptureISR+0x28>
	{
		ICU_u16Capture1 = TIMER1_u16GetInputCaptValue();
    15b4:	0e 94 20 17 	call	0x2e40	; 0x2e40 <TIMER1_u16GetInputCaptValue>
    15b8:	90 93 84 01 	sts	0x0184, r25
    15bc:	80 93 83 01 	sts	0x0183, r24
    15c0:	28 c0       	rjmp	.+80     	; 0x1612 <ICU_voidCaptureISR+0x78>
	}
	else if(Local_u8Counter == 2u)
    15c2:	80 91 8c 01 	lds	r24, 0x018C
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	71 f4       	brne	.+28     	; 0x15e6 <ICU_voidCaptureISR+0x4c>
	{
		ICU_u16Capture2 = TIMER1_u16GetInputCaptValue();
    15ca:	0e 94 20 17 	call	0x2e40	; 0x2e40 <TIMER1_u16GetInputCaptValue>
    15ce:	90 93 86 01 	sts	0x0186, r25
    15d2:	80 93 85 01 	sts	0x0185, r24
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_FALLING_EDGE);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <TIMER1_u8SetInputCaptTriggerSrc>
		ICU_u8PeriodOvfCounter = ICU_u8OvfCounter;
    15dc:	80 91 89 01 	lds	r24, 0x0189
    15e0:	80 93 8a 01 	sts	0x018A, r24
    15e4:	16 c0       	rjmp	.+44     	; 0x1612 <ICU_voidCaptureISR+0x78>
	}
	else if(Local_u8Counter == 3u)
    15e6:	80 91 8c 01 	lds	r24, 0x018C
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	91 f4       	brne	.+36     	; 0x1612 <ICU_voidCaptureISR+0x78>
	{
		ICU_u16Capture3 = TIMER1_u16GetInputCaptValue();
    15ee:	0e 94 20 17 	call	0x2e40	; 0x2e40 <TIMER1_u16GetInputCaptValue>
    15f2:	90 93 88 01 	sts	0x0188, r25
    15f6:	80 93 87 01 	sts	0x0187, r24
		TIMERS_u8IntDisable(TIMER1_CAPT);
    15fa:	85 e0       	ldi	r24, 0x05	; 5
    15fc:	0e 94 92 15 	call	0x2b24	; 0x2b24 <TIMERS_u8IntDisable>
		ICU_u8DutyCycleOvfCounter = ICU_u8OvfCounter - ICU_u8PeriodOvfCounter;
    1600:	90 91 89 01 	lds	r25, 0x0189
    1604:	80 91 8a 01 	lds	r24, 0x018A
    1608:	29 2f       	mov	r18, r25
    160a:	28 1b       	sub	r18, r24
    160c:	82 2f       	mov	r24, r18
    160e:	80 93 8b 01 	sts	0x018B, r24
	}
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <ICU_voidOvfISR>:

/**
 * @brief Overflow ISR Function to be send to the timer ISR.
 */
static void ICU_voidOvfISR(void)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	ICU_u8OvfCounter++;
    1620:	80 91 89 01 	lds	r24, 0x0189
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	80 93 89 01 	sts	0x0189, r24
}
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <FIR_voidFilterInit>:
#include <util/delay.h>

#define PI 3.14159265359

void FIR_voidFilterInit(FIR_Filter_t *Copy_pstFilter)
{
    1630:	8f 92       	push	r8
    1632:	9f 92       	push	r9
    1634:	af 92       	push	r10
    1636:	bf 92       	push	r11
    1638:	cf 92       	push	r12
    163a:	df 92       	push	r13
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <FIR_voidFilterInit+0x1a>
    164a:	0f 92       	push	r0
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	9b 83       	std	Y+3, r25	; 0x03
    1652:	8a 83       	std	Y+2, r24	; 0x02
	/*Define a counter*/
	uint8 Local_u8Counter;

	Queue_voidCircularArrayQueueInit(&(Copy_pstFilter -> Front), &(Copy_pstFilter -> Rear));
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	ac 01       	movw	r20, r24
    165a:	40 58       	subi	r20, 0x80	; 128
    165c:	5f 4f       	sbci	r21, 0xFF	; 255
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	9b 81       	ldd	r25, Y+3	; 0x03
    1662:	9c 01       	movw	r18, r24
    1664:	2c 57       	subi	r18, 0x7C	; 124
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	ca 01       	movw	r24, r20
    166a:	b9 01       	movw	r22, r18
    166c:	0e 94 65 2b 	call	0x56ca	; 0x56ca <Queue_voidCircularArrayQueueInit>

	/*Clear filter buffer*/
	for(Local_u8Counter = 0; Local_u8Counter < FIR_FILTER_LENGTH; Local_u8Counter++)
    1670:	19 82       	std	Y+1, r1	; 0x01
    1672:	27 c0       	rjmp	.+78     	; 0x16c2 <FIR_voidFilterInit+0x92>
	{
		Queue_voidCircularArrayQueueEnqueue(&(Copy_pstFilter -> Front), &(Copy_pstFilter -> Rear), FIR_FILTER_LENGTH, Copy_pstFilter -> QueueBuffer, Local_u8Counter);
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	9b 81       	ldd	r25, Y+3	; 0x03
    1678:	8c 01       	movw	r16, r24
    167a:	00 58       	subi	r16, 0x80	; 128
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	9b 81       	ldd	r25, Y+3	; 0x03
    1682:	0f 2e       	mov	r0, r31
    1684:	f4 e8       	ldi	r31, 0x84	; 132
    1686:	af 2e       	mov	r10, r31
    1688:	bb 24       	eor	r11, r11
    168a:	f0 2d       	mov	r31, r0
    168c:	a8 0e       	add	r10, r24
    168e:	b9 1e       	adc	r11, r25
    1690:	8a 80       	ldd	r8, Y+2	; 0x02
    1692:	9b 80       	ldd	r9, Y+3	; 0x03
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e0       	ldi	r26, 0x00	; 0
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    16a6:	6b 01       	movw	r12, r22
    16a8:	7c 01       	movw	r14, r24
    16aa:	c8 01       	movw	r24, r16
    16ac:	b5 01       	movw	r22, r10
    16ae:	20 e1       	ldi	r18, 0x10	; 16
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	84 01       	movw	r16, r8
    16b8:	0e 94 28 2c 	call	0x5850	; 0x5850 <Queue_voidCircularArrayQueueEnqueue>
	uint8 Local_u8Counter;

	Queue_voidCircularArrayQueueInit(&(Copy_pstFilter -> Front), &(Copy_pstFilter -> Rear));

	/*Clear filter buffer*/
	for(Local_u8Counter = 0; Local_u8Counter < FIR_FILTER_LENGTH; Local_u8Counter++)
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	80 31       	cpi	r24, 0x10	; 16
    16c6:	b0 f2       	brcs	.-84     	; 0x1674 <FIR_voidFilterInit+0x44>
	{
		Queue_voidCircularArrayQueueEnqueue(&(Copy_pstFilter -> Front), &(Copy_pstFilter -> Rear), FIR_FILTER_LENGTH, Copy_pstFilter -> QueueBuffer, Local_u8Counter);
	}
}
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	df 90       	pop	r13
    16dc:	cf 90       	pop	r12
    16de:	bf 90       	pop	r11
    16e0:	af 90       	pop	r10
    16e2:	9f 90       	pop	r9
    16e4:	8f 90       	pop	r8
    16e6:	08 95       	ret

000016e8 <FIR_f32FilterUpdate>:

f32 FIR_f32FilterUpdate(FIR_Filter_t *Copy_pstFilter, f32 Copy_f32Input)
{
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	2c 97       	sbiw	r28, 0x0c	; 12
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	98 87       	std	Y+8, r25	; 0x08
    170a:	8f 83       	std	Y+7, r24	; 0x07
    170c:	49 87       	std	Y+9, r20	; 0x09
    170e:	5a 87       	std	Y+10, r21	; 0x0a
    1710:	6b 87       	std	Y+11, r22	; 0x0b
    1712:	7c 87       	std	Y+12, r23	; 0x0c
	uint8 Local_u8Counter;
	/*Define an indicator to handle the buffer*/
	uint8 Local_u8Indicator;

	/*Enqueue the latest sample in the buffer queue*/
	Queue_voidCircularArrayQueueDequeueEnqueue(&(Copy_pstFilter -> Front), &(Copy_pstFilter -> Rear), FIR_FILTER_LENGTH, Copy_pstFilter -> QueueBuffer, Copy_f32Input);
    1714:	8f 81       	ldd	r24, Y+7	; 0x07
    1716:	98 85       	ldd	r25, Y+8	; 0x08
    1718:	ac 01       	movw	r20, r24
    171a:	40 58       	subi	r20, 0x80	; 128
    171c:	5f 4f       	sbci	r21, 0xFF	; 255
    171e:	8f 81       	ldd	r24, Y+7	; 0x07
    1720:	98 85       	ldd	r25, Y+8	; 0x08
    1722:	9c 01       	movw	r18, r24
    1724:	2c 57       	subi	r18, 0x7C	; 124
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	ef 81       	ldd	r30, Y+7	; 0x07
    172a:	f8 85       	ldd	r31, Y+8	; 0x08
    172c:	c9 84       	ldd	r12, Y+9	; 0x09
    172e:	da 84       	ldd	r13, Y+10	; 0x0a
    1730:	eb 84       	ldd	r14, Y+11	; 0x0b
    1732:	fc 84       	ldd	r15, Y+12	; 0x0c
    1734:	ca 01       	movw	r24, r20
    1736:	b9 01       	movw	r22, r18
    1738:	20 e1       	ldi	r18, 0x10	; 16
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	8f 01       	movw	r16, r30
    1742:	0e 94 cd 2c 	call	0x599a	; 0x599a <Queue_voidCircularArrayQueueDequeueEnqueue>

	/*Initialize the indicator to handle the buffer*/
	Local_u8Indicator = Copy_pstFilter -> Rear;
    1746:	8f 81       	ldd	r24, Y+7	; 0x07
    1748:	98 85       	ldd	r25, Y+8	; 0x08
    174a:	fc 01       	movw	r30, r24
    174c:	ec 57       	subi	r30, 0x7C	; 124
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	80 81       	ld	r24, Z
    1752:	91 81       	ldd	r25, Z+1	; 0x01
    1754:	a2 81       	ldd	r26, Z+2	; 0x02
    1756:	b3 81       	ldd	r27, Z+3	; 0x03
    1758:	89 83       	std	Y+1, r24	; 0x01

	/*Compute the output sample (via convolution)*/
	for(Local_u8Counter = 0; Local_u8Counter < FIR_FILTER_LENGTH; Local_u8Counter++)
    175a:	1a 82       	std	Y+2, r1	; 0x02
    175c:	41 c0       	rjmp	.+130    	; 0x17e0 <FIR_f32FilterUpdate+0xf8>
	{
		/*Multiply impulse response with shifted input samples and add to output*/
		Local_f32OutputSample += Copy_pstFilter -> ImpulseRespone[Local_u8Counter] * Copy_pstFilter -> QueueBuffer[Local_u8Indicator];
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	2f 81       	ldd	r18, Y+7	; 0x07
    1766:	38 85       	ldd	r19, Y+8	; 0x08
    1768:	40 96       	adiw	r24, 0x10	; 16
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	f9 01       	movw	r30, r18
    1774:	e8 0f       	add	r30, r24
    1776:	f9 1f       	adc	r31, r25
    1778:	e0 80       	ld	r14, Z
    177a:	f1 80       	ldd	r15, Z+1	; 0x01
    177c:	02 81       	ldd	r16, Z+2	; 0x02
    177e:	13 81       	ldd	r17, Z+3	; 0x03
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	2f 81       	ldd	r18, Y+7	; 0x07
    1788:	38 85       	ldd	r19, Y+8	; 0x08
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	f9 01       	movw	r30, r18
    1794:	e8 0f       	add	r30, r24
    1796:	f9 1f       	adc	r31, r25
    1798:	20 81       	ld	r18, Z
    179a:	31 81       	ldd	r19, Z+1	; 0x01
    179c:	42 81       	ldd	r20, Z+2	; 0x02
    179e:	53 81       	ldd	r21, Z+3	; 0x03
    17a0:	c8 01       	movw	r24, r16
    17a2:	b7 01       	movw	r22, r14
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9c 01       	movw	r18, r24
    17ae:	ad 01       	movw	r20, r26
    17b0:	6b 81       	ldd	r22, Y+3	; 0x03
    17b2:	7c 81       	ldd	r23, Y+4	; 0x04
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	8b 83       	std	Y+3, r24	; 0x03
    17c2:	9c 83       	std	Y+4, r25	; 0x04
    17c4:	ad 83       	std	Y+5, r26	; 0x05
    17c6:	be 83       	std	Y+6, r27	; 0x06

		/*Move to the previous reading*/
		if(Local_u8Indicator > 0)
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	88 23       	and	r24, r24
    17cc:	21 f0       	breq	.+8      	; 0x17d6 <FIR_f32FilterUpdate+0xee>
		{
			Local_u8Indicator--;
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	81 50       	subi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <FIR_f32FilterUpdate+0xf2>
		}
		else
		{
			Local_u8Indicator = FIR_FILTER_LENGTH - 1;
    17d6:	8f e0       	ldi	r24, 0x0F	; 15
    17d8:	89 83       	std	Y+1, r24	; 0x01

	/*Initialize the indicator to handle the buffer*/
	Local_u8Indicator = Copy_pstFilter -> Rear;

	/*Compute the output sample (via convolution)*/
	for(Local_u8Counter = 0; Local_u8Counter < FIR_FILTER_LENGTH; Local_u8Counter++)
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	8f 5f       	subi	r24, 0xFF	; 255
    17de:	8a 83       	std	Y+2, r24	; 0x02
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	80 31       	cpi	r24, 0x10	; 16
    17e4:	08 f4       	brcc	.+2      	; 0x17e8 <FIR_f32FilterUpdate+0x100>
    17e6:	bb cf       	rjmp	.-138    	; 0x175e <FIR_f32FilterUpdate+0x76>
		}

	}

	/*Put the output into the filter struct*/
	Copy_pstFilter -> Output = Local_f32OutputSample;
    17e8:	8f 81       	ldd	r24, Y+7	; 0x07
    17ea:	98 85       	ldd	r25, Y+8	; 0x08
    17ec:	fc 01       	movw	r30, r24
    17ee:	e8 57       	subi	r30, 0x78	; 120
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	ad 81       	ldd	r26, Y+5	; 0x05
    17f8:	be 81       	ldd	r27, Y+6	; 0x06
    17fa:	80 83       	st	Z, r24
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	a2 83       	std	Z+2, r26	; 0x02
    1800:	b3 83       	std	Z+3, r27	; 0x03

	/*Return the filter output*/
	return Local_f32OutputSample;
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	ad 81       	ldd	r26, Y+5	; 0x05
    1808:	be 81       	ldd	r27, Y+6	; 0x06
}
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	2c 96       	adiw	r28, 0x0c	; 12
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	df 90       	pop	r13
    1828:	cf 90       	pop	r12
    182a:	08 95       	ret

0000182c <FIR_u32EMA>:

uint32 FIR_u32EMA(uint32 Copy_u32NewValue, uint32 Copy_u32OldValue, uint8 Copy_u8Alpha)
{
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	2d 97       	sbiw	r28, 0x0d	; 13
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	6d 83       	std	Y+5, r22	; 0x05
    184a:	7e 83       	std	Y+6, r23	; 0x06
    184c:	8f 83       	std	Y+7, r24	; 0x07
    184e:	98 87       	std	Y+8, r25	; 0x08
    1850:	29 87       	std	Y+9, r18	; 0x09
    1852:	3a 87       	std	Y+10, r19	; 0x0a
    1854:	4b 87       	std	Y+11, r20	; 0x0b
    1856:	5c 87       	std	Y+12, r21	; 0x0c
    1858:	0d 87       	std	Y+13, r16	; 0x0d
	uint32 Local_u32Result = ((uint32) Copy_u8Alpha * Copy_u32NewValue) / 10UL + ((10UL - (uint32) Copy_u8Alpha) * Copy_u32OldValue) / 10UL;
    185a:	8d 85       	ldd	r24, Y+13	; 0x0d
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a0 e0       	ldi	r26, 0x00	; 0
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	2d 81       	ldd	r18, Y+5	; 0x05
    1866:	3e 81       	ldd	r19, Y+6	; 0x06
    1868:	4f 81       	ldd	r20, Y+7	; 0x07
    186a:	58 85       	ldd	r21, Y+8	; 0x08
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__mulsi3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	2a e0       	ldi	r18, 0x0A	; 10
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <__udivmodsi4>
    1888:	da 01       	movw	r26, r20
    188a:	c9 01       	movw	r24, r18
    188c:	7c 01       	movw	r14, r24
    188e:	8d 01       	movw	r16, r26
    1890:	8d 85       	ldd	r24, Y+13	; 0x0d
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	8a e0       	ldi	r24, 0x0A	; 10
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a0 e0       	ldi	r26, 0x00	; 0
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	82 1b       	sub	r24, r18
    18a4:	93 0b       	sbc	r25, r19
    18a6:	a4 0b       	sbc	r26, r20
    18a8:	b5 0b       	sbc	r27, r21
    18aa:	29 85       	ldd	r18, Y+9	; 0x09
    18ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ae:	4b 85       	ldd	r20, Y+11	; 0x0b
    18b0:	5c 85       	ldd	r21, Y+12	; 0x0c
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__mulsi3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	2a e0       	ldi	r18, 0x0A	; 10
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <__udivmodsi4>
    18ce:	da 01       	movw	r26, r20
    18d0:	c9 01       	movw	r24, r18
    18d2:	8e 0d       	add	r24, r14
    18d4:	9f 1d       	adc	r25, r15
    18d6:	a0 1f       	adc	r26, r16
    18d8:	b1 1f       	adc	r27, r17
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	9a 83       	std	Y+2, r25	; 0x02
    18de:	ab 83       	std	Y+3, r26	; 0x03
    18e0:	bc 83       	std	Y+4, r27	; 0x04
	return Local_u32Result;
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	9a 81       	ldd	r25, Y+2	; 0x02
    18e6:	ab 81       	ldd	r26, Y+3	; 0x03
    18e8:	bc 81       	ldd	r27, Y+4	; 0x04
}
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	2d 96       	adiw	r28, 0x0d	; 13
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	08 95       	ret

00001908 <ApproxSin>:

f32 ApproxSin(f32 Copy_f32Value)
{
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	61 97       	sbiw	r28, 0x11	; 17
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	6e 87       	std	Y+14, r22	; 0x0e
    1926:	7f 87       	std	Y+15, r23	; 0x0f
    1928:	88 8b       	std	Y+16, r24	; 0x10
    192a:	99 8b       	std	Y+17, r25	; 0x11
	/*Define required variables*/
	uint8 Local_u8Counter;
    f32 Local_f32Result = 0;
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a0 e0       	ldi	r26, 0x00	; 0
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	89 87       	std	Y+9, r24	; 0x09
    1936:	9a 87       	std	Y+10, r25	; 0x0a
    1938:	ab 87       	std	Y+11, r26	; 0x0b
    193a:	bc 87       	std	Y+12, r27	; 0x0c
    sint32 Local_s32Sign = 1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a0 e0       	ldi	r26, 0x00	; 0
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	af 83       	std	Y+7, r26	; 0x07
    194a:	b8 87       	std	Y+8, r27	; 0x08
    194c:	10 c0       	rjmp	.+32     	; 0x196e <ApproxSin+0x66>

    /*Normalize angle to be between -2*pi and 2*pi*/
    while (Copy_f32Value < -2 * PI)
    {
    	Copy_f32Value += 2 * PI;
    194e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1950:	7f 85       	ldd	r23, Y+15	; 0x0f
    1952:	88 89       	ldd	r24, Y+16	; 0x10
    1954:	99 89       	ldd	r25, Y+17	; 0x11
    1956:	2b ed       	ldi	r18, 0xDB	; 219
    1958:	3f e0       	ldi	r19, 0x0F	; 15
    195a:	49 ec       	ldi	r20, 0xC9	; 201
    195c:	50 e4       	ldi	r21, 0x40	; 64
    195e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8e 87       	std	Y+14, r24	; 0x0e
    1968:	9f 87       	std	Y+15, r25	; 0x0f
    196a:	a8 8b       	std	Y+16, r26	; 0x10
    196c:	b9 8b       	std	Y+17, r27	; 0x11
	uint8 Local_u8Counter;
    f32 Local_f32Result = 0;
    sint32 Local_s32Sign = 1;

    /*Normalize angle to be between -2*pi and 2*pi*/
    while (Copy_f32Value < -2 * PI)
    196e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1970:	7f 85       	ldd	r23, Y+15	; 0x0f
    1972:	88 89       	ldd	r24, Y+16	; 0x10
    1974:	99 89       	ldd	r25, Y+17	; 0x11
    1976:	2b ed       	ldi	r18, 0xDB	; 219
    1978:	3f e0       	ldi	r19, 0x0F	; 15
    197a:	49 ec       	ldi	r20, 0xC9	; 201
    197c:	50 ec       	ldi	r21, 0xC0	; 192
    197e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	24 f3       	brlt	.-56     	; 0x194e <ApproxSin+0x46>
    1986:	10 c0       	rjmp	.+32     	; 0x19a8 <ApproxSin+0xa0>
    {
    	Copy_f32Value += 2 * PI;
    }
    while (Copy_f32Value >= 2 * PI)
    {
    	Copy_f32Value -= 2 * PI;
    1988:	6e 85       	ldd	r22, Y+14	; 0x0e
    198a:	7f 85       	ldd	r23, Y+15	; 0x0f
    198c:	88 89       	ldd	r24, Y+16	; 0x10
    198e:	99 89       	ldd	r25, Y+17	; 0x11
    1990:	2b ed       	ldi	r18, 0xDB	; 219
    1992:	3f e0       	ldi	r19, 0x0F	; 15
    1994:	49 ec       	ldi	r20, 0xC9	; 201
    1996:	50 e4       	ldi	r21, 0x40	; 64
    1998:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8e 87       	std	Y+14, r24	; 0x0e
    19a2:	9f 87       	std	Y+15, r25	; 0x0f
    19a4:	a8 8b       	std	Y+16, r26	; 0x10
    19a6:	b9 8b       	std	Y+17, r27	; 0x11
    /*Normalize angle to be between -2*pi and 2*pi*/
    while (Copy_f32Value < -2 * PI)
    {
    	Copy_f32Value += 2 * PI;
    }
    while (Copy_f32Value >= 2 * PI)
    19a8:	6e 85       	ldd	r22, Y+14	; 0x0e
    19aa:	7f 85       	ldd	r23, Y+15	; 0x0f
    19ac:	88 89       	ldd	r24, Y+16	; 0x10
    19ae:	99 89       	ldd	r25, Y+17	; 0x11
    19b0:	2b ed       	ldi	r18, 0xDB	; 219
    19b2:	3f e0       	ldi	r19, 0x0F	; 15
    19b4:	49 ec       	ldi	r20, 0xC9	; 201
    19b6:	50 e4       	ldi	r21, 0x40	; 64
    19b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    19bc:	88 23       	and	r24, r24
    19be:	24 f7       	brge	.-56     	; 0x1988 <ApproxSin+0x80>
    {
    	Copy_f32Value -= 2 * PI;
    }

    f32 Local_f32Term = Copy_f32Value;
    19c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    19c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    19c4:	a8 89       	ldd	r26, Y+16	; 0x10
    19c6:	b9 89       	ldd	r27, Y+17	; 0x11
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	ab 83       	std	Y+3, r26	; 0x03
    19ce:	bc 83       	std	Y+4, r27	; 0x04

    for(Local_u8Counter = 1; Local_u8Counter <= 10; Local_u8Counter += 2)
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	8d 87       	std	Y+13, r24	; 0x0d
    19d4:	70 c0       	rjmp	.+224    	; 0x1ab6 <ApproxSin+0x1ae>
    {
    	Local_f32Result += Local_s32Sign * Local_f32Term;
    19d6:	6d 81       	ldd	r22, Y+5	; 0x05
    19d8:	7e 81       	ldd	r23, Y+6	; 0x06
    19da:	8f 81       	ldd	r24, Y+7	; 0x07
    19dc:	98 85       	ldd	r25, Y+8	; 0x08
    19de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	29 81       	ldd	r18, Y+1	; 0x01
    19ec:	3a 81       	ldd	r19, Y+2	; 0x02
    19ee:	4b 81       	ldd	r20, Y+3	; 0x03
    19f0:	5c 81       	ldd	r21, Y+4	; 0x04
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9c 01       	movw	r18, r24
    19fc:	ad 01       	movw	r20, r26
    19fe:	69 85       	ldd	r22, Y+9	; 0x09
    1a00:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a02:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a04:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a06:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	89 87       	std	Y+9, r24	; 0x09
    1a10:	9a 87       	std	Y+10, r25	; 0x0a
    1a12:	ab 87       	std	Y+11, r26	; 0x0b
    1a14:	bc 87       	std	Y+12, r27	; 0x0c
    	Local_f32Term *= (Copy_f32Value * Copy_f32Value) / ((Local_u8Counter + 1) * (Local_u8Counter + 2));
    1a16:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a18:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a1a:	88 89       	ldd	r24, Y+16	; 0x10
    1a1c:	99 89       	ldd	r25, Y+17	; 0x11
    1a1e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a20:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a22:	48 89       	ldd	r20, Y+16	; 0x10
    1a24:	59 89       	ldd	r21, Y+17	; 0x11
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	7c 01       	movw	r14, r24
    1a30:	8d 01       	movw	r16, r26
    1a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9c 01       	movw	r18, r24
    1a3a:	2f 5f       	subi	r18, 0xFF	; 255
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 96       	adiw	r24, 0x02	; 2
    1a46:	ac 01       	movw	r20, r24
    1a48:	24 9f       	mul	r18, r20
    1a4a:	c0 01       	movw	r24, r0
    1a4c:	25 9f       	mul	r18, r21
    1a4e:	90 0d       	add	r25, r0
    1a50:	34 9f       	mul	r19, r20
    1a52:	90 0d       	add	r25, r0
    1a54:	11 24       	eor	r1, r1
    1a56:	aa 27       	eor	r26, r26
    1a58:	97 fd       	sbrc	r25, 7
    1a5a:	a0 95       	com	r26
    1a5c:	ba 2f       	mov	r27, r26
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1a66:	9b 01       	movw	r18, r22
    1a68:	ac 01       	movw	r20, r24
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	b7 01       	movw	r22, r14
    1a6e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9c 01       	movw	r18, r24
    1a78:	ad 01       	movw	r20, r26
    1a7a:	69 81       	ldd	r22, Y+1	; 0x01
    1a7c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	ab 83       	std	Y+3, r26	; 0x03
    1a90:	bc 83       	std	Y+4, r27	; 0x04
        Local_s32Sign *= -1;
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	af 81       	ldd	r26, Y+7	; 0x07
    1a98:	b8 85       	ldd	r27, Y+8	; 0x08
    1a9a:	b0 95       	com	r27
    1a9c:	a0 95       	com	r26
    1a9e:	90 95       	com	r25
    1aa0:	81 95       	neg	r24
    1aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa4:	af 4f       	sbci	r26, 0xFF	; 255
    1aa6:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	af 83       	std	Y+7, r26	; 0x07
    1aae:	b8 87       	std	Y+8, r27	; 0x08
    	Copy_f32Value -= 2 * PI;
    }

    f32 Local_f32Term = Copy_f32Value;

    for(Local_u8Counter = 1; Local_u8Counter <= 10; Local_u8Counter += 2)
    1ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab2:	8e 5f       	subi	r24, 0xFE	; 254
    1ab4:	8d 87       	std	Y+13, r24	; 0x0d
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	8b 30       	cpi	r24, 0x0B	; 11
    1aba:	08 f4       	brcc	.+2      	; 0x1abe <ApproxSin+0x1b6>
    1abc:	8c cf       	rjmp	.-232    	; 0x19d6 <ApproxSin+0xce>
    	Local_f32Result += Local_s32Sign * Local_f32Term;
    	Local_f32Term *= (Copy_f32Value * Copy_f32Value) / ((Local_u8Counter + 1) * (Local_u8Counter + 2));
        Local_s32Sign *= -1;
    }

    return Local_f32Result;
    1abe:	89 85       	ldd	r24, Y+9	; 0x09
    1ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac2:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ac4:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	61 96       	adiw	r28, 0x11	; 17
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	08 95       	ret

00001ae4 <FIR_u8ComputeImpulseResponse>:

uint8 FIR_u8ComputeImpulseResponse(f32 *Local_f32H, sint32 Copy_s32CoefficientsNum, f32 Copy_f32CutoffFrequency, f32 Copy_f32samplingRate)
{
    1ae4:	8f 92       	push	r8
    1ae6:	9f 92       	push	r9
    1ae8:	af 92       	push	r10
    1aea:	bf 92       	push	r11
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	60 97       	sbiw	r28, 0x10	; 16
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	9c 83       	std	Y+4, r25	; 0x04
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
    1b10:	4d 83       	std	Y+5, r20	; 0x05
    1b12:	5e 83       	std	Y+6, r21	; 0x06
    1b14:	6f 83       	std	Y+7, r22	; 0x07
    1b16:	78 87       	std	Y+8, r23	; 0x08
    1b18:	09 87       	std	Y+9, r16	; 0x09
    1b1a:	1a 87       	std	Y+10, r17	; 0x0a
    1b1c:	2b 87       	std	Y+11, r18	; 0x0b
    1b1e:	3c 87       	std	Y+12, r19	; 0x0c
    1b20:	cd 86       	std	Y+13, r12	; 0x0d
    1b22:	de 86       	std	Y+14, r13	; 0x0e
    1b24:	ef 86       	std	Y+15, r14	; 0x0f
    1b26:	f8 8a       	std	Y+16, r15	; 0x10
	/*Define a counter*/
	uint8 Local_u8Counter;
	uint8 Local_u8ErrorState = OK;
    1b28:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Local_f32H != NULL)
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <FIR_u8ComputeImpulseResponse+0x50>
    1b32:	e7 c0       	rjmp	.+462    	; 0x1d02 <FIR_u8ComputeImpulseResponse+0x21e>
	{
		for(Local_u8Counter = 0; Local_u8Counter < Copy_s32CoefficientsNum; Local_u8Counter++)
    1b34:	1a 82       	std	Y+2, r1	; 0x02
    1b36:	d5 c0       	rjmp	.+426    	; 0x1ce2 <FIR_u8ComputeImpulseResponse+0x1fe>
		{
			if (Local_u8Counter == (Copy_s32CoefficientsNum - 1) / 2)
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	e8 2e       	mov	r14, r24
    1b3c:	ff 24       	eor	r15, r15
    1b3e:	00 e0       	ldi	r16, 0x00	; 0
    1b40:	10 e0       	ldi	r17, 0x00	; 0
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	af 81       	ldd	r26, Y+7	; 0x07
    1b48:	b8 85       	ldd	r27, Y+8	; 0x08
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	a1 09       	sbc	r26, r1
    1b4e:	b1 09       	sbc	r27, r1
    1b50:	22 e0       	ldi	r18, 0x02	; 2
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divmodsi4>
    1b60:	da 01       	movw	r26, r20
    1b62:	c9 01       	movw	r24, r18
    1b64:	e8 16       	cp	r14, r24
    1b66:	f9 06       	cpc	r15, r25
    1b68:	0a 07       	cpc	r16, r26
    1b6a:	1b 07       	cpc	r17, r27
    1b6c:	39 f5       	brne	.+78     	; 0x1bbc <FIR_u8ComputeImpulseResponse+0xd8>
			{
				Local_f32H[Local_u8Counter] = 2 * Copy_f32CutoffFrequency / Copy_f32samplingRate;
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9c 01       	movw	r18, r24
    1b76:	22 0f       	add	r18, r18
    1b78:	33 1f       	adc	r19, r19
    1b7a:	22 0f       	add	r18, r18
    1b7c:	33 1f       	adc	r19, r19
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	8c 01       	movw	r16, r24
    1b84:	02 0f       	add	r16, r18
    1b86:	13 1f       	adc	r17, r19
    1b88:	29 85       	ldd	r18, Y+9	; 0x09
    1b8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b8c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b8e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b90:	ca 01       	movw	r24, r20
    1b92:	b9 01       	movw	r22, r18
    1b94:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ba2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ba4:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ba6:	58 89       	ldd	r21, Y+16	; 0x10
    1ba8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	80 83       	st	Z, r24
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	a2 83       	std	Z+2, r26	; 0x02
    1bb8:	b3 83       	std	Z+3, r27	; 0x03
    1bba:	90 c0       	rjmp	.+288    	; 0x1cdc <FIR_u8ComputeImpulseResponse+0x1f8>
			}
			else
			{
				Local_f32H[Local_u8Counter] = (ApproxSin(2 * PI * Copy_f32CutoffFrequency * (Local_u8Counter - (Copy_s32CoefficientsNum - 1) / 2) / Copy_f32samplingRate) /
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9c 01       	movw	r18, r24
    1bc4:	22 0f       	add	r18, r18
    1bc6:	33 1f       	adc	r19, r19
    1bc8:	22 0f       	add	r18, r18
    1bca:	33 1f       	adc	r19, r19
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	4c 01       	movw	r8, r24
    1bd2:	82 0e       	add	r8, r18
    1bd4:	93 1e       	adc	r9, r19
    1bd6:	69 85       	ldd	r22, Y+9	; 0x09
    1bd8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1bda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bde:	2b ed       	ldi	r18, 0xDB	; 219
    1be0:	3f e0       	ldi	r19, 0x0F	; 15
    1be2:	49 ec       	ldi	r20, 0xC9	; 201
    1be4:	50 e4       	ldi	r21, 0x40	; 64
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	5c 01       	movw	r10, r24
    1bf0:	6d 01       	movw	r12, r26
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	e8 2e       	mov	r14, r24
    1bf6:	ff 24       	eor	r15, r15
    1bf8:	00 e0       	ldi	r16, 0x00	; 0
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	af 81       	ldd	r26, Y+7	; 0x07
    1c02:	b8 85       	ldd	r27, Y+8	; 0x08
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	a1 09       	sbc	r26, r1
    1c08:	b1 09       	sbc	r27, r1
    1c0a:	22 e0       	ldi	r18, 0x02	; 2
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divmodsi4>
    1c1a:	da 01       	movw	r26, r20
    1c1c:	c9 01       	movw	r24, r18
    1c1e:	a8 01       	movw	r20, r16
    1c20:	97 01       	movw	r18, r14
    1c22:	28 1b       	sub	r18, r24
    1c24:	39 0b       	sbc	r19, r25
    1c26:	4a 0b       	sbc	r20, r26
    1c28:	5b 0b       	sbc	r21, r27
    1c2a:	da 01       	movw	r26, r20
    1c2c:	c9 01       	movw	r24, r18
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1c36:	9b 01       	movw	r18, r22
    1c38:	ac 01       	movw	r20, r24
    1c3a:	c6 01       	movw	r24, r12
    1c3c:	b5 01       	movw	r22, r10
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c4c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c4e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c50:	58 89       	ldd	r21, Y+16	; 0x10
    1c52:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 84 0c 	call	0x1908	; 0x1908 <ApproxSin>
    1c62:	5b 01       	movw	r10, r22
    1c64:	6c 01       	movw	r12, r24
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	e8 2e       	mov	r14, r24
    1c6a:	ff 24       	eor	r15, r15
    1c6c:	00 e0       	ldi	r16, 0x00	; 0
    1c6e:	10 e0       	ldi	r17, 0x00	; 0
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	af 81       	ldd	r26, Y+7	; 0x07
    1c76:	b8 85       	ldd	r27, Y+8	; 0x08
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	a1 09       	sbc	r26, r1
    1c7c:	b1 09       	sbc	r27, r1
    1c7e:	22 e0       	ldi	r18, 0x02	; 2
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	bc 01       	movw	r22, r24
    1c88:	cd 01       	movw	r24, r26
    1c8a:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divmodsi4>
    1c8e:	da 01       	movw	r26, r20
    1c90:	c9 01       	movw	r24, r18
    1c92:	a8 01       	movw	r20, r16
    1c94:	97 01       	movw	r18, r14
    1c96:	28 1b       	sub	r18, r24
    1c98:	39 0b       	sbc	r19, r25
    1c9a:	4a 0b       	sbc	r20, r26
    1c9c:	5b 0b       	sbc	r21, r27
    1c9e:	da 01       	movw	r26, r20
    1ca0:	c9 01       	movw	r24, r18
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	2b ed       	ldi	r18, 0xDB	; 219
    1cb4:	3f e0       	ldi	r19, 0x0F	; 15
    1cb6:	49 e4       	ldi	r20, 0x49	; 73
    1cb8:	50 e4       	ldi	r21, 0x40	; 64
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9c 01       	movw	r18, r24
    1cc4:	ad 01       	movw	r20, r26
    1cc6:	c6 01       	movw	r24, r12
    1cc8:	b5 01       	movw	r22, r10
    1cca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	f4 01       	movw	r30, r8
    1cd4:	80 83       	st	Z, r24
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	a2 83       	std	Z+2, r26	; 0x02
    1cda:	b3 83       	std	Z+3, r27	; 0x03
	uint8 Local_u8ErrorState = OK;

	/*Validate the pointer*/
	if(Local_f32H != NULL)
	{
		for(Local_u8Counter = 0; Local_u8Counter < Copy_s32CoefficientsNum; Local_u8Counter++)
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	8f 5f       	subi	r24, 0xFF	; 255
    1ce0:	8a 83       	std	Y+2, r24	; 0x02
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	af 81       	ldd	r26, Y+7	; 0x07
    1cf2:	b8 85       	ldd	r27, Y+8	; 0x08
    1cf4:	28 17       	cp	r18, r24
    1cf6:	39 07       	cpc	r19, r25
    1cf8:	4a 07       	cpc	r20, r26
    1cfa:	5b 07       	cpc	r21, r27
    1cfc:	0c f4       	brge	.+2      	; 0x1d00 <FIR_u8ComputeImpulseResponse+0x21c>
    1cfe:	1c cf       	rjmp	.-456    	; 0x1b38 <FIR_u8ComputeImpulseResponse+0x54>
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <FIR_u8ComputeImpulseResponse+0x222>
			}
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d08:	60 96       	adiw	r28, 0x10	; 16
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	bf 90       	pop	r11
    1d26:	af 90       	pop	r10
    1d28:	9f 90       	pop	r9
    1d2a:	8f 90       	pop	r8
    1d2c:	08 95       	ret

00001d2e <TIMER0_u8Init>:
 * @brief 						Function to initialize timer 0 peripheral.
 * @param Copy_pstTimerConfig	Struct to configure timer 0 options.
 * @return						Error State.
 */
uint8 TIMER0_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	27 97       	sbiw	r28, 0x07	; 7
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	9b 83       	std	Y+3, r25	; 0x03
    1d44:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1d46:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <TIMER0_u8Init+0x24>
    1d50:	de c0       	rjmp	.+444    	; 0x1f0e <TIMER0_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER0] == IDLE)
    1d52:	80 91 8d 01 	lds	r24, 0x018D
    1d56:	88 23       	and	r24, r24
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <TIMER0_u8Init+0x2e>
    1d5a:	d6 c0       	rjmp	.+428    	; 0x1f08 <TIMER0_u8Init+0x1da>
		{
			/*Inform others that timer 0 is busy*/
			TIMERS_u8StateArr[TIMER0] = BUSY;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	80 93 8d 01 	sts	0x018D, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    1d62:	ea 81       	ldd	r30, Y+2	; 0x02
    1d64:	fb 81       	ldd	r31, Y+3	; 0x03
    1d66:	81 81       	ldd	r24, Z+1	; 0x01
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	3f 83       	std	Y+7, r19	; 0x07
    1d6e:	2e 83       	std	Y+6, r18	; 0x06
    1d70:	8e 81       	ldd	r24, Y+6	; 0x06
    1d72:	9f 81       	ldd	r25, Y+7	; 0x07
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	91 05       	cpc	r25, r1
    1d78:	21 f1       	breq	.+72     	; 0x1dc2 <TIMER0_u8Init+0x94>
    1d7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <TIMER0_u8Init+0x60>
    1d84:	8e 81       	ldd	r24, Y+6	; 0x06
    1d86:	9f 81       	ldd	r25, Y+7	; 0x07
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	61 f0       	breq	.+24     	; 0x1da4 <TIMER0_u8Init+0x76>
    1d8c:	46 c0       	rjmp	.+140    	; 0x1e1a <TIMER0_u8Init+0xec>
    1d8e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d90:	3f 81       	ldd	r19, Y+7	; 0x07
    1d92:	22 30       	cpi	r18, 0x02	; 2
    1d94:	31 05       	cpc	r19, r1
    1d96:	21 f1       	breq	.+72     	; 0x1de0 <TIMER0_u8Init+0xb2>
    1d98:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	91 05       	cpc	r25, r1
    1da0:	71 f1       	breq	.+92     	; 0x1dfe <TIMER0_u8Init+0xd0>
    1da2:	3b c0       	rjmp	.+118    	; 0x1e1a <TIMER0_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    1da4:	a3 e5       	ldi	r26, 0x53	; 83
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e3 e5       	ldi	r30, 0x53	; 83
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8f 7b       	andi	r24, 0xBF	; 191
    1db0:	8c 93       	st	X, r24
    1db2:	a3 e5       	ldi	r26, 0x53	; 83
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e3 e5       	ldi	r30, 0x53	; 83
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	87 7f       	andi	r24, 0xF7	; 247
    1dbe:	8c 93       	st	X, r24
    1dc0:	2c c0       	rjmp	.+88     	; 0x1e1a <TIMER0_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    1dc2:	a3 e5       	ldi	r26, 0x53	; 83
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e3 e5       	ldi	r30, 0x53	; 83
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	80 64       	ori	r24, 0x40	; 64
    1dce:	8c 93       	st	X, r24
    1dd0:	a3 e5       	ldi	r26, 0x53	; 83
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e3 e5       	ldi	r30, 0x53	; 83
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	87 7f       	andi	r24, 0xF7	; 247
    1ddc:	8c 93       	st	X, r24
    1dde:	1d c0       	rjmp	.+58     	; 0x1e1a <TIMER0_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    1de0:	a3 e5       	ldi	r26, 0x53	; 83
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e3 e5       	ldi	r30, 0x53	; 83
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8f 7b       	andi	r24, 0xBF	; 191
    1dec:	8c 93       	st	X, r24
    1dee:	a3 e5       	ldi	r26, 0x53	; 83
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e3 e5       	ldi	r30, 0x53	; 83
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	88 60       	ori	r24, 0x08	; 8
    1dfa:	8c 93       	st	X, r24
    1dfc:	0e c0       	rjmp	.+28     	; 0x1e1a <TIMER0_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    1dfe:	a3 e5       	ldi	r26, 0x53	; 83
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e3 e5       	ldi	r30, 0x53	; 83
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	80 64       	ori	r24, 0x40	; 64
    1e0a:	8c 93       	st	X, r24
    1e0c:	a3 e5       	ldi	r26, 0x53	; 83
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e3 e5       	ldi	r30, 0x53	; 83
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	88 60       	ori	r24, 0x08	; 8
    1e18:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR0 &= TIMER0_2_OCMATCH_MASK;
    1e1a:	a3 e5       	ldi	r26, 0x53	; 83
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e3 e5       	ldi	r30, 0x53	; 83
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	8f 7c       	andi	r24, 0xCF	; 207
    1e26:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    1e28:	ea 81       	ldd	r30, Y+2	; 0x02
    1e2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e2c:	81 81       	ldd	r24, Z+1	; 0x01
    1e2e:	88 23       	and	r24, r24
    1e30:	29 f0       	breq	.+10     	; 0x1e3c <TIMER0_u8Init+0x10e>
    1e32:	ea 81       	ldd	r30, Y+2	; 0x02
    1e34:	fb 81       	ldd	r31, Y+3	; 0x03
    1e36:	81 81       	ldd	r24, Z+1	; 0x01
    1e38:	82 30       	cpi	r24, 0x02	; 2
    1e3a:	e1 f4       	brne	.+56     	; 0x1e74 <TIMER0_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    1e3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	84 30       	cpi	r24, 0x04	; 4
    1e44:	a0 f4       	brcc	.+40     	; 0x1e6e <TIMER0_u8Init+0x140>
				{
					TCCR0 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    1e46:	a3 e5       	ldi	r26, 0x53	; 83
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e3 e5       	ldi	r30, 0x53	; 83
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	28 2f       	mov	r18, r24
    1e52:	ea 81       	ldd	r30, Y+2	; 0x02
    1e54:	fb 81       	ldd	r31, Y+3	; 0x03
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	82 95       	swap	r24
    1e5e:	92 95       	swap	r25
    1e60:	90 7f       	andi	r25, 0xF0	; 240
    1e62:	98 27       	eor	r25, r24
    1e64:	80 7f       	andi	r24, 0xF0	; 240
    1e66:	98 27       	eor	r25, r24
    1e68:	82 2b       	or	r24, r18
    1e6a:	8c 93       	st	X, r24
    1e6c:	3b c0       	rjmp	.+118    	; 0x1ee4 <TIMER0_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	38 c0       	rjmp	.+112    	; 0x1ee4 <TIMER0_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    1e74:	ea 81       	ldd	r30, Y+2	; 0x02
    1e76:	fb 81       	ldd	r31, Y+3	; 0x03
    1e78:	81 81       	ldd	r24, Z+1	; 0x01
    1e7a:	83 30       	cpi	r24, 0x03	; 3
    1e7c:	29 f0       	breq	.+10     	; 0x1e88 <TIMER0_u8Init+0x15a>
    1e7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e80:	fb 81       	ldd	r31, Y+3	; 0x03
    1e82:	81 81       	ldd	r24, Z+1	; 0x01
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	71 f5       	brne	.+92     	; 0x1ee4 <TIMER0_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    1e88:	ea 81       	ldd	r30, Y+2	; 0x02
    1e8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	3d 83       	std	Y+5, r19	; 0x05
    1e94:	2c 83       	std	Y+4, r18	; 0x04
    1e96:	8c 81       	ldd	r24, Y+4	; 0x04
    1e98:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9a:	84 30       	cpi	r24, 0x04	; 4
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	81 f0       	breq	.+32     	; 0x1ec0 <TIMER0_u8Init+0x192>
    1ea0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea4:	25 30       	cpi	r18, 0x05	; 5
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	99 f0       	breq	.+38     	; 0x1ed0 <TIMER0_u8Init+0x1a2>
    1eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1eac:	9d 81       	ldd	r25, Y+5	; 0x05
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	b9 f4       	brne	.+46     	; 0x1ee0 <TIMER0_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    1eb2:	e3 e5       	ldi	r30, 0x53	; 83
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	a3 e5       	ldi	r26, 0x53	; 83
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	8c 91       	ld	r24, X
    1ebc:	80 83       	st	Z, r24
    1ebe:	12 c0       	rjmp	.+36     	; 0x1ee4 <TIMER0_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    1ec0:	a3 e5       	ldi	r26, 0x53	; 83
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e3 e5       	ldi	r30, 0x53	; 83
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	80 62       	ori	r24, 0x20	; 32
    1ecc:	8c 93       	st	X, r24
    1ece:	0a c0       	rjmp	.+20     	; 0x1ee4 <TIMER0_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    1ed0:	a3 e5       	ldi	r26, 0x53	; 83
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e3 e5       	ldi	r30, 0x53	; 83
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 63       	ori	r24, 0x30	; 48
    1edc:	8c 93       	st	X, r24
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <TIMER0_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR0 &= PRESCALER_MASK;
    1ee4:	a3 e5       	ldi	r26, 0x53	; 83
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e3 e5       	ldi	r30, 0x53	; 83
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	88 7f       	andi	r24, 0xF8	; 248
    1ef0:	8c 93       	st	X, r24
			TCCR0 |= Copy_pstTimerConfig -> ClkSelect;
    1ef2:	a3 e5       	ldi	r26, 0x53	; 83
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e3 e5       	ldi	r30, 0x53	; 83
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	90 81       	ld	r25, Z
    1efc:	ea 81       	ldd	r30, Y+2	; 0x02
    1efe:	fb 81       	ldd	r31, Y+3	; 0x03
    1f00:	80 81       	ld	r24, Z
    1f02:	89 2b       	or	r24, r25
    1f04:	8c 93       	st	X, r24
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <TIMER0_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    1f08:	84 e0       	ldi	r24, 0x04	; 4
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <TIMER0_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f14:	27 96       	adiw	r28, 0x07	; 7
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <TIMER1_u8Init>:
 * @brief 						Function to initialize timer 1 peripheral.
 * @param Copy_pstTimerConfig	Struct to configure timer 1 options.
 * @return						Error State.
 */
uint8 TIMER1_u8Init(const TIMER1_CFG_t *Copy_pstTimerConfig)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	29 97       	sbiw	r28, 0x09	; 9
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	9b 83       	std	Y+3, r25	; 0x03
    1f3c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1f3e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	9b 81       	ldd	r25, Y+3	; 0x03
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <TIMER1_u8Init+0x24>
    1f48:	71 c1       	rjmp	.+738    	; 0x222c <TIMER1_u8Init+0x306>
	{
		if(TIMERS_u8StateArr[TIMER1] == IDLE)
    1f4a:	80 91 8e 01 	lds	r24, 0x018E
    1f4e:	88 23       	and	r24, r24
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <TIMER1_u8Init+0x2e>
    1f52:	69 c1       	rjmp	.+722    	; 0x2226 <TIMER1_u8Init+0x300>
		{
			/*Inform others that timer 1 is busy from now*/
			TIMERS_u8StateArr[TIMER1] = BUSY;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	80 93 8e 01 	sts	0x018E, r24

			/*Select Wave Generation Mode*/
			TCCR1A &= TIMER1_WGM_MASK_A;
    1f5a:	af e4       	ldi	r26, 0x4F	; 79
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	ef e4       	ldi	r30, 0x4F	; 79
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	8c 7f       	andi	r24, 0xFC	; 252
    1f66:	8c 93       	st	X, r24
			TCCR1B &= TIMER1_WGM_MASK_B;
    1f68:	ae e4       	ldi	r26, 0x4E	; 78
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	ee e4       	ldi	r30, 0x4E	; 78
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	87 7e       	andi	r24, 0xE7	; 231
    1f74:	8c 93       	st	X, r24
			TCCR1A |= ((Copy_pstTimerConfig -> WGM) & 3);
    1f76:	af e4       	ldi	r26, 0x4F	; 79
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	ef e4       	ldi	r30, 0x4F	; 79
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	98 2f       	mov	r25, r24
    1f82:	ea 81       	ldd	r30, Y+2	; 0x02
    1f84:	fb 81       	ldd	r31, Y+3	; 0x03
    1f86:	81 81       	ldd	r24, Z+1	; 0x01
    1f88:	83 70       	andi	r24, 0x03	; 3
    1f8a:	89 2b       	or	r24, r25
    1f8c:	8c 93       	st	X, r24
			TCCR1B |= ((((Copy_pstTimerConfig -> WGM) >> 2) & 3) << 3);
    1f8e:	ae e4       	ldi	r26, 0x4E	; 78
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	ee e4       	ldi	r30, 0x4E	; 78
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	28 2f       	mov	r18, r24
    1f9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f9e:	81 81       	ldd	r24, Z+1	; 0x01
    1fa0:	86 95       	lsr	r24
    1fa2:	86 95       	lsr	r24
    1fa4:	88 2f       	mov	r24, r24
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	83 70       	andi	r24, 0x03	; 3
    1faa:	90 70       	andi	r25, 0x00	; 0
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	82 2b       	or	r24, r18
    1fba:	8c 93       	st	X, r24

			/*Select Output Compare Match Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    1fbc:	ea 81       	ldd	r30, Y+2	; 0x02
    1fbe:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc0:	81 81       	ldd	r24, Z+1	; 0x01
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	39 87       	std	Y+9, r19	; 0x09
    1fc8:	28 87       	std	Y+8, r18	; 0x08
    1fca:	88 85       	ldd	r24, Y+8	; 0x08
    1fcc:	99 85       	ldd	r25, Y+9	; 0x09
    1fce:	8c 30       	cpi	r24, 0x0C	; 12
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	b4 f4       	brge	.+44     	; 0x2000 <TIMER1_u8Init+0xda>
    1fd4:	28 85       	ldd	r18, Y+8	; 0x08
    1fd6:	39 85       	ldd	r19, Y+9	; 0x09
    1fd8:	25 30       	cpi	r18, 0x05	; 5
    1fda:	31 05       	cpc	r19, r1
    1fdc:	0c f0       	brlt	.+2      	; 0x1fe0 <TIMER1_u8Init+0xba>
    1fde:	70 c0       	rjmp	.+224    	; 0x20c0 <TIMER1_u8Init+0x19a>
    1fe0:	88 85       	ldd	r24, Y+8	; 0x08
    1fe2:	99 85       	ldd	r25, Y+9	; 0x09
    1fe4:	84 30       	cpi	r24, 0x04	; 4
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	c4 f4       	brge	.+48     	; 0x201a <TIMER1_u8Init+0xf4>
    1fea:	28 85       	ldd	r18, Y+8	; 0x08
    1fec:	39 85       	ldd	r19, Y+9	; 0x09
    1fee:	21 30       	cpi	r18, 0x01	; 1
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	0c f0       	brlt	.+2      	; 0x1ff6 <TIMER1_u8Init+0xd0>
    1ff4:	65 c0       	rjmp	.+202    	; 0x20c0 <TIMER1_u8Init+0x19a>
    1ff6:	88 85       	ldd	r24, Y+8	; 0x08
    1ff8:	99 85       	ldd	r25, Y+9	; 0x09
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	71 f0       	breq	.+28     	; 0x201a <TIMER1_u8Init+0xf4>
    1ffe:	ff c0       	rjmp	.+510    	; 0x21fe <TIMER1_u8Init+0x2d8>
    2000:	28 85       	ldd	r18, Y+8	; 0x08
    2002:	39 85       	ldd	r19, Y+9	; 0x09
    2004:	2c 30       	cpi	r18, 0x0C	; 12
    2006:	31 05       	cpc	r19, r1
    2008:	41 f0       	breq	.+16     	; 0x201a <TIMER1_u8Init+0xf4>
    200a:	88 85       	ldd	r24, Y+8	; 0x08
    200c:	99 85       	ldd	r25, Y+9	; 0x09
    200e:	0e 97       	sbiw	r24, 0x0e	; 14
    2010:	82 30       	cpi	r24, 0x02	; 2
    2012:	91 05       	cpc	r25, r1
    2014:	08 f0       	brcs	.+2      	; 0x2018 <TIMER1_u8Init+0xf2>
    2016:	f3 c0       	rjmp	.+486    	; 0x21fe <TIMER1_u8Init+0x2d8>
    2018:	53 c0       	rjmp	.+166    	; 0x20c0 <TIMER1_u8Init+0x19a>
			{
			case NORMAL_16_BITS:
			case CTC_OCR1A:
			case CTC_ICR1:
				/*For Channel A*/
				if((Copy_pstTimerConfig -> OCAMode) < NON_INVERTED_PWM)
    201a:	ea 81       	ldd	r30, Y+2	; 0x02
    201c:	fb 81       	ldd	r31, Y+3	; 0x03
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	84 30       	cpi	r24, 0x04	; 4
    2022:	f0 f4       	brcc	.+60     	; 0x2060 <TIMER1_u8Init+0x13a>
				{
					TCCR1A &= TIMER1_OCMATCH_A_MASK;
    2024:	af e4       	ldi	r26, 0x4F	; 79
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	ef e4       	ldi	r30, 0x4F	; 79
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	8f 73       	andi	r24, 0x3F	; 63
    2030:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCAMode) << 6);
    2032:	af e4       	ldi	r26, 0x4F	; 79
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	ef e4       	ldi	r30, 0x4F	; 79
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	28 2f       	mov	r18, r24
    203e:	ea 81       	ldd	r30, Y+2	; 0x02
    2040:	fb 81       	ldd	r31, Y+3	; 0x03
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	00 24       	eor	r0, r0
    204a:	96 95       	lsr	r25
    204c:	87 95       	ror	r24
    204e:	07 94       	ror	r0
    2050:	96 95       	lsr	r25
    2052:	87 95       	ror	r24
    2054:	07 94       	ror	r0
    2056:	98 2f       	mov	r25, r24
    2058:	80 2d       	mov	r24, r0
    205a:	82 2b       	or	r24, r18
    205c:	8c 93       	st	X, r24
    205e:	07 c0       	rjmp	.+14     	; 0x206e <TIMER1_u8Init+0x148>
				}
				else if((Copy_pstTimerConfig -> OCAMode) == DO_NOT_CHANGE)
    2060:	ea 81       	ldd	r30, Y+2	; 0x02
    2062:	fb 81       	ldd	r31, Y+3	; 0x03
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	86 30       	cpi	r24, 0x06	; 6
    2068:	11 f0       	breq	.+4      	; 0x206e <TIMER1_u8Init+0x148>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				if((Copy_pstTimerConfig -> OCBMode) < NON_INVERTED_PWM)
    206e:	ea 81       	ldd	r30, Y+2	; 0x02
    2070:	fb 81       	ldd	r31, Y+3	; 0x03
    2072:	83 81       	ldd	r24, Z+3	; 0x03
    2074:	84 30       	cpi	r24, 0x04	; 4
    2076:	d8 f4       	brcc	.+54     	; 0x20ae <TIMER1_u8Init+0x188>
				{
					TCCR1A &= TIMER1_OCMATCH_B_MASK;
    2078:	af e4       	ldi	r26, 0x4F	; 79
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	ef e4       	ldi	r30, 0x4F	; 79
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	8f 7c       	andi	r24, 0xCF	; 207
    2084:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCBMode) << 4);
    2086:	af e4       	ldi	r26, 0x4F	; 79
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	ef e4       	ldi	r30, 0x4F	; 79
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	28 2f       	mov	r18, r24
    2092:	ea 81       	ldd	r30, Y+2	; 0x02
    2094:	fb 81       	ldd	r31, Y+3	; 0x03
    2096:	83 81       	ldd	r24, Z+3	; 0x03
    2098:	88 2f       	mov	r24, r24
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	82 95       	swap	r24
    209e:	92 95       	swap	r25
    20a0:	90 7f       	andi	r25, 0xF0	; 240
    20a2:	98 27       	eor	r25, r24
    20a4:	80 7f       	andi	r24, 0xF0	; 240
    20a6:	98 27       	eor	r25, r24
    20a8:	82 2b       	or	r24, r18
    20aa:	8c 93       	st	X, r24
    20ac:	aa c0       	rjmp	.+340    	; 0x2202 <TIMER1_u8Init+0x2dc>
				}
				else if((Copy_pstTimerConfig -> OCBMode) == DO_NOT_CHANGE)
    20ae:	ea 81       	ldd	r30, Y+2	; 0x02
    20b0:	fb 81       	ldd	r31, Y+3	; 0x03
    20b2:	83 81       	ldd	r24, Z+3	; 0x03
    20b4:	86 30       	cpi	r24, 0x06	; 6
    20b6:	09 f4       	brne	.+2      	; 0x20ba <TIMER1_u8Init+0x194>
    20b8:	a4 c0       	rjmp	.+328    	; 0x2202 <TIMER1_u8Init+0x2dc>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	a1 c0       	rjmp	.+322    	; 0x2202 <TIMER1_u8Init+0x2dc>
			case PHASE_FREQ_CORR_ICR1:
			case PHASE_FREQ_CORR_OCR1A:
			case PHASE_CORR_ICR1:
			case PHASE_CORR_OCR1A:
				/*For Channel A*/
				switch(Copy_pstTimerConfig -> OCAMode)
    20c0:	ea 81       	ldd	r30, Y+2	; 0x02
    20c2:	fb 81       	ldd	r31, Y+3	; 0x03
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	3f 83       	std	Y+7, r19	; 0x07
    20cc:	2e 83       	std	Y+6, r18	; 0x06
    20ce:	8e 81       	ldd	r24, Y+6	; 0x06
    20d0:	9f 81       	ldd	r25, Y+7	; 0x07
    20d2:	84 30       	cpi	r24, 0x04	; 4
    20d4:	91 05       	cpc	r25, r1
    20d6:	19 f1       	breq	.+70     	; 0x211e <TIMER1_u8Init+0x1f8>
    20d8:	2e 81       	ldd	r18, Y+6	; 0x06
    20da:	3f 81       	ldd	r19, Y+7	; 0x07
    20dc:	25 30       	cpi	r18, 0x05	; 5
    20de:	31 05       	cpc	r19, r1
    20e0:	2c f4       	brge	.+10     	; 0x20ec <TIMER1_u8Init+0x1c6>
    20e2:	8e 81       	ldd	r24, Y+6	; 0x06
    20e4:	9f 81       	ldd	r25, Y+7	; 0x07
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	61 f0       	breq	.+24     	; 0x2102 <TIMER1_u8Init+0x1dc>
    20ea:	37 c0       	rjmp	.+110    	; 0x215a <TIMER1_u8Init+0x234>
    20ec:	2e 81       	ldd	r18, Y+6	; 0x06
    20ee:	3f 81       	ldd	r19, Y+7	; 0x07
    20f0:	25 30       	cpi	r18, 0x05	; 5
    20f2:	31 05       	cpc	r19, r1
    20f4:	19 f1       	breq	.+70     	; 0x213c <TIMER1_u8Init+0x216>
    20f6:	8e 81       	ldd	r24, Y+6	; 0x06
    20f8:	9f 81       	ldd	r25, Y+7	; 0x07
    20fa:	86 30       	cpi	r24, 0x06	; 6
    20fc:	91 05       	cpc	r25, r1
    20fe:	79 f1       	breq	.+94     	; 0x215e <TIMER1_u8Init+0x238>
    2100:	2c c0       	rjmp	.+88     	; 0x215a <TIMER1_u8Init+0x234>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    2102:	af e4       	ldi	r26, 0x4F	; 79
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	ef e4       	ldi	r30, 0x4F	; 79
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	8f 73       	andi	r24, 0x3F	; 63
    210e:	8c 93       	st	X, r24
    2110:	af e4       	ldi	r26, 0x4F	; 79
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	ef e4       	ldi	r30, 0x4F	; 79
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	8c 93       	st	X, r24
    211c:	20 c0       	rjmp	.+64     	; 0x215e <TIMER1_u8Init+0x238>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    211e:	af e4       	ldi	r26, 0x4F	; 79
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	ef e4       	ldi	r30, 0x4F	; 79
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	8f 73       	andi	r24, 0x3F	; 63
    212a:	8c 93       	st	X, r24
    212c:	af e4       	ldi	r26, 0x4F	; 79
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	ef e4       	ldi	r30, 0x4F	; 79
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	80 68       	ori	r24, 0x80	; 128
    2138:	8c 93       	st	X, r24
    213a:	11 c0       	rjmp	.+34     	; 0x215e <TIMER1_u8Init+0x238>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    213c:	af e4       	ldi	r26, 0x4F	; 79
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	ef e4       	ldi	r30, 0x4F	; 79
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	8f 73       	andi	r24, 0x3F	; 63
    2148:	8c 93       	st	X, r24
    214a:	af e4       	ldi	r26, 0x4F	; 79
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	ef e4       	ldi	r30, 0x4F	; 79
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	80 6c       	ori	r24, 0xC0	; 192
    2156:	8c 93       	st	X, r24
    2158:	02 c0       	rjmp	.+4      	; 0x215e <TIMER1_u8Init+0x238>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				switch(Copy_pstTimerConfig -> OCBMode)
    215e:	ea 81       	ldd	r30, Y+2	; 0x02
    2160:	fb 81       	ldd	r31, Y+3	; 0x03
    2162:	83 81       	ldd	r24, Z+3	; 0x03
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	3d 83       	std	Y+5, r19	; 0x05
    216a:	2c 83       	std	Y+4, r18	; 0x04
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	9d 81       	ldd	r25, Y+5	; 0x05
    2170:	84 30       	cpi	r24, 0x04	; 4
    2172:	91 05       	cpc	r25, r1
    2174:	19 f1       	breq	.+70     	; 0x21bc <TIMER1_u8Init+0x296>
    2176:	2c 81       	ldd	r18, Y+4	; 0x04
    2178:	3d 81       	ldd	r19, Y+5	; 0x05
    217a:	25 30       	cpi	r18, 0x05	; 5
    217c:	31 05       	cpc	r19, r1
    217e:	2c f4       	brge	.+10     	; 0x218a <TIMER1_u8Init+0x264>
    2180:	8c 81       	ldd	r24, Y+4	; 0x04
    2182:	9d 81       	ldd	r25, Y+5	; 0x05
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	61 f0       	breq	.+24     	; 0x21a0 <TIMER1_u8Init+0x27a>
    2188:	37 c0       	rjmp	.+110    	; 0x21f8 <TIMER1_u8Init+0x2d2>
    218a:	2c 81       	ldd	r18, Y+4	; 0x04
    218c:	3d 81       	ldd	r19, Y+5	; 0x05
    218e:	25 30       	cpi	r18, 0x05	; 5
    2190:	31 05       	cpc	r19, r1
    2192:	19 f1       	breq	.+70     	; 0x21da <TIMER1_u8Init+0x2b4>
    2194:	8c 81       	ldd	r24, Y+4	; 0x04
    2196:	9d 81       	ldd	r25, Y+5	; 0x05
    2198:	86 30       	cpi	r24, 0x06	; 6
    219a:	91 05       	cpc	r25, r1
    219c:	91 f1       	breq	.+100    	; 0x2202 <TIMER1_u8Init+0x2dc>
    219e:	2c c0       	rjmp	.+88     	; 0x21f8 <TIMER1_u8Init+0x2d2>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    21a0:	af e4       	ldi	r26, 0x4F	; 79
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	ef e4       	ldi	r30, 0x4F	; 79
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	8f 7c       	andi	r24, 0xCF	; 207
    21ac:	8c 93       	st	X, r24
    21ae:	af e4       	ldi	r26, 0x4F	; 79
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	ef e4       	ldi	r30, 0x4F	; 79
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	8c 93       	st	X, r24
    21ba:	23 c0       	rjmp	.+70     	; 0x2202 <TIMER1_u8Init+0x2dc>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    21bc:	af e4       	ldi	r26, 0x4F	; 79
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	ef e4       	ldi	r30, 0x4F	; 79
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	8f 7c       	andi	r24, 0xCF	; 207
    21c8:	8c 93       	st	X, r24
    21ca:	af e4       	ldi	r26, 0x4F	; 79
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	ef e4       	ldi	r30, 0x4F	; 79
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	80 62       	ori	r24, 0x20	; 32
    21d6:	8c 93       	st	X, r24
    21d8:	14 c0       	rjmp	.+40     	; 0x2202 <TIMER1_u8Init+0x2dc>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    21da:	af e4       	ldi	r26, 0x4F	; 79
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	ef e4       	ldi	r30, 0x4F	; 79
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8f 7c       	andi	r24, 0xCF	; 207
    21e6:	8c 93       	st	X, r24
    21e8:	af e4       	ldi	r26, 0x4F	; 79
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	ef e4       	ldi	r30, 0x4F	; 79
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	80 63       	ori	r24, 0x30	; 48
    21f4:	8c 93       	st	X, r24
    21f6:	05 c0       	rjmp	.+10     	; 0x2202 <TIMER1_u8Init+0x2dc>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <TIMER1_u8Init+0x2dc>
				}
				break;

			default:Local_u8ErrorState = NOK;	break;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	89 83       	std	Y+1, r24	; 0x01
			}

			/*Select the clock*/
			TCCR1B &= PRESCALER_MASK;
    2202:	ae e4       	ldi	r26, 0x4E	; 78
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	ee e4       	ldi	r30, 0x4E	; 78
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	88 7f       	andi	r24, 0xF8	; 248
    220e:	8c 93       	st	X, r24
			TCCR1B |= Copy_pstTimerConfig -> ClkSelect;
    2210:	ae e4       	ldi	r26, 0x4E	; 78
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	ee e4       	ldi	r30, 0x4E	; 78
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	90 81       	ld	r25, Z
    221a:	ea 81       	ldd	r30, Y+2	; 0x02
    221c:	fb 81       	ldd	r31, Y+3	; 0x03
    221e:	80 81       	ld	r24, Z
    2220:	89 2b       	or	r24, r25
    2222:	8c 93       	st	X, r24
    2224:	05 c0       	rjmp	.+10     	; 0x2230 <TIMER1_u8Init+0x30a>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2226:	84 e0       	ldi	r24, 0x04	; 4
    2228:	89 83       	std	Y+1, r24	; 0x01
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <TIMER1_u8Init+0x30a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2230:	89 81       	ldd	r24, Y+1	; 0x01
}
    2232:	29 96       	adiw	r28, 0x09	; 9
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <TIMER2_u8Init>:
 * @brief 						Function to initialize timer 2 peripheral.
 * @param Copy_pstTimerConfig	Struct to configure timer 2 otions.
 * @return						Error State.
 */
uint8 TIMER2_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	27 97       	sbiw	r28, 0x07	; 7
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	9b 83       	std	Y+3, r25	; 0x03
    225a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    225c:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	9b 81       	ldd	r25, Y+3	; 0x03
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	09 f4       	brne	.+2      	; 0x2268 <TIMER2_u8Init+0x24>
    2266:	de c0       	rjmp	.+444    	; 0x2424 <TIMER2_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER2] == IDLE)
    2268:	80 91 8f 01 	lds	r24, 0x018F
    226c:	88 23       	and	r24, r24
    226e:	09 f0       	breq	.+2      	; 0x2272 <TIMER2_u8Init+0x2e>
    2270:	d6 c0       	rjmp	.+428    	; 0x241e <TIMER2_u8Init+0x1da>
		{
			/*Inform others that timer 2 is busy from now*/
			TIMERS_u8StateArr[TIMER2] = BUSY;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	80 93 8f 01 	sts	0x018F, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    2278:	ea 81       	ldd	r30, Y+2	; 0x02
    227a:	fb 81       	ldd	r31, Y+3	; 0x03
    227c:	81 81       	ldd	r24, Z+1	; 0x01
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	3f 83       	std	Y+7, r19	; 0x07
    2284:	2e 83       	std	Y+6, r18	; 0x06
    2286:	8e 81       	ldd	r24, Y+6	; 0x06
    2288:	9f 81       	ldd	r25, Y+7	; 0x07
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	91 05       	cpc	r25, r1
    228e:	21 f1       	breq	.+72     	; 0x22d8 <TIMER2_u8Init+0x94>
    2290:	2e 81       	ldd	r18, Y+6	; 0x06
    2292:	3f 81       	ldd	r19, Y+7	; 0x07
    2294:	22 30       	cpi	r18, 0x02	; 2
    2296:	31 05       	cpc	r19, r1
    2298:	2c f4       	brge	.+10     	; 0x22a4 <TIMER2_u8Init+0x60>
    229a:	8e 81       	ldd	r24, Y+6	; 0x06
    229c:	9f 81       	ldd	r25, Y+7	; 0x07
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	61 f0       	breq	.+24     	; 0x22ba <TIMER2_u8Init+0x76>
    22a2:	46 c0       	rjmp	.+140    	; 0x2330 <TIMER2_u8Init+0xec>
    22a4:	2e 81       	ldd	r18, Y+6	; 0x06
    22a6:	3f 81       	ldd	r19, Y+7	; 0x07
    22a8:	22 30       	cpi	r18, 0x02	; 2
    22aa:	31 05       	cpc	r19, r1
    22ac:	21 f1       	breq	.+72     	; 0x22f6 <TIMER2_u8Init+0xb2>
    22ae:	8e 81       	ldd	r24, Y+6	; 0x06
    22b0:	9f 81       	ldd	r25, Y+7	; 0x07
    22b2:	83 30       	cpi	r24, 0x03	; 3
    22b4:	91 05       	cpc	r25, r1
    22b6:	71 f1       	breq	.+92     	; 0x2314 <TIMER2_u8Init+0xd0>
    22b8:	3b c0       	rjmp	.+118    	; 0x2330 <TIMER2_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    22ba:	a5 e4       	ldi	r26, 0x45	; 69
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e5 e4       	ldi	r30, 0x45	; 69
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	8f 7b       	andi	r24, 0xBF	; 191
    22c6:	8c 93       	st	X, r24
    22c8:	a5 e4       	ldi	r26, 0x45	; 69
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e5 e4       	ldi	r30, 0x45	; 69
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	87 7f       	andi	r24, 0xF7	; 247
    22d4:	8c 93       	st	X, r24
    22d6:	2c c0       	rjmp	.+88     	; 0x2330 <TIMER2_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    22d8:	a5 e4       	ldi	r26, 0x45	; 69
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e5 e4       	ldi	r30, 0x45	; 69
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	80 64       	ori	r24, 0x40	; 64
    22e4:	8c 93       	st	X, r24
    22e6:	a5 e4       	ldi	r26, 0x45	; 69
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e5 e4       	ldi	r30, 0x45	; 69
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	87 7f       	andi	r24, 0xF7	; 247
    22f2:	8c 93       	st	X, r24
    22f4:	1d c0       	rjmp	.+58     	; 0x2330 <TIMER2_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    22f6:	a5 e4       	ldi	r26, 0x45	; 69
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e5 e4       	ldi	r30, 0x45	; 69
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	8f 7b       	andi	r24, 0xBF	; 191
    2302:	8c 93       	st	X, r24
    2304:	a5 e4       	ldi	r26, 0x45	; 69
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e5 e4       	ldi	r30, 0x45	; 69
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	88 60       	ori	r24, 0x08	; 8
    2310:	8c 93       	st	X, r24
    2312:	0e c0       	rjmp	.+28     	; 0x2330 <TIMER2_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2314:	a5 e4       	ldi	r26, 0x45	; 69
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e5 e4       	ldi	r30, 0x45	; 69
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	80 64       	ori	r24, 0x40	; 64
    2320:	8c 93       	st	X, r24
    2322:	a5 e4       	ldi	r26, 0x45	; 69
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e5 e4       	ldi	r30, 0x45	; 69
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	88 60       	ori	r24, 0x08	; 8
    232e:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR2 &= TIMER0_2_OCMATCH_MASK;
    2330:	a5 e4       	ldi	r26, 0x45	; 69
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e5 e4       	ldi	r30, 0x45	; 69
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	8f 7c       	andi	r24, 0xCF	; 207
    233c:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    233e:	ea 81       	ldd	r30, Y+2	; 0x02
    2340:	fb 81       	ldd	r31, Y+3	; 0x03
    2342:	81 81       	ldd	r24, Z+1	; 0x01
    2344:	88 23       	and	r24, r24
    2346:	29 f0       	breq	.+10     	; 0x2352 <TIMER2_u8Init+0x10e>
    2348:	ea 81       	ldd	r30, Y+2	; 0x02
    234a:	fb 81       	ldd	r31, Y+3	; 0x03
    234c:	81 81       	ldd	r24, Z+1	; 0x01
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	e1 f4       	brne	.+56     	; 0x238a <TIMER2_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    2352:	ea 81       	ldd	r30, Y+2	; 0x02
    2354:	fb 81       	ldd	r31, Y+3	; 0x03
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	84 30       	cpi	r24, 0x04	; 4
    235a:	a0 f4       	brcc	.+40     	; 0x2384 <TIMER2_u8Init+0x140>
				{
					TCCR2 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    235c:	a5 e4       	ldi	r26, 0x45	; 69
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e5 e4       	ldi	r30, 0x45	; 69
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	28 2f       	mov	r18, r24
    2368:	ea 81       	ldd	r30, Y+2	; 0x02
    236a:	fb 81       	ldd	r31, Y+3	; 0x03
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	88 2f       	mov	r24, r24
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	82 95       	swap	r24
    2374:	92 95       	swap	r25
    2376:	90 7f       	andi	r25, 0xF0	; 240
    2378:	98 27       	eor	r25, r24
    237a:	80 7f       	andi	r24, 0xF0	; 240
    237c:	98 27       	eor	r25, r24
    237e:	82 2b       	or	r24, r18
    2380:	8c 93       	st	X, r24
    2382:	3b c0       	rjmp	.+118    	; 0x23fa <TIMER2_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	38 c0       	rjmp	.+112    	; 0x23fa <TIMER2_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    238a:	ea 81       	ldd	r30, Y+2	; 0x02
    238c:	fb 81       	ldd	r31, Y+3	; 0x03
    238e:	81 81       	ldd	r24, Z+1	; 0x01
    2390:	83 30       	cpi	r24, 0x03	; 3
    2392:	29 f0       	breq	.+10     	; 0x239e <TIMER2_u8Init+0x15a>
    2394:	ea 81       	ldd	r30, Y+2	; 0x02
    2396:	fb 81       	ldd	r31, Y+3	; 0x03
    2398:	81 81       	ldd	r24, Z+1	; 0x01
    239a:	81 30       	cpi	r24, 0x01	; 1
    239c:	71 f5       	brne	.+92     	; 0x23fa <TIMER2_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    239e:	ea 81       	ldd	r30, Y+2	; 0x02
    23a0:	fb 81       	ldd	r31, Y+3	; 0x03
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	28 2f       	mov	r18, r24
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	3d 83       	std	Y+5, r19	; 0x05
    23aa:	2c 83       	std	Y+4, r18	; 0x04
    23ac:	8c 81       	ldd	r24, Y+4	; 0x04
    23ae:	9d 81       	ldd	r25, Y+5	; 0x05
    23b0:	84 30       	cpi	r24, 0x04	; 4
    23b2:	91 05       	cpc	r25, r1
    23b4:	81 f0       	breq	.+32     	; 0x23d6 <TIMER2_u8Init+0x192>
    23b6:	2c 81       	ldd	r18, Y+4	; 0x04
    23b8:	3d 81       	ldd	r19, Y+5	; 0x05
    23ba:	25 30       	cpi	r18, 0x05	; 5
    23bc:	31 05       	cpc	r19, r1
    23be:	99 f0       	breq	.+38     	; 0x23e6 <TIMER2_u8Init+0x1a2>
    23c0:	8c 81       	ldd	r24, Y+4	; 0x04
    23c2:	9d 81       	ldd	r25, Y+5	; 0x05
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	b9 f4       	brne	.+46     	; 0x23f6 <TIMER2_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    23c8:	e5 e4       	ldi	r30, 0x45	; 69
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	a5 e4       	ldi	r26, 0x45	; 69
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	8c 91       	ld	r24, X
    23d2:	80 83       	st	Z, r24
    23d4:	12 c0       	rjmp	.+36     	; 0x23fa <TIMER2_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    23d6:	a5 e4       	ldi	r26, 0x45	; 69
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e5 e4       	ldi	r30, 0x45	; 69
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	80 62       	ori	r24, 0x20	; 32
    23e2:	8c 93       	st	X, r24
    23e4:	0a c0       	rjmp	.+20     	; 0x23fa <TIMER2_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    23e6:	a5 e4       	ldi	r26, 0x45	; 69
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e5 e4       	ldi	r30, 0x45	; 69
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	80 63       	ori	r24, 0x30	; 48
    23f2:	8c 93       	st	X, r24
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <TIMER2_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR2 &= PRESCALER_MASK;
    23fa:	a5 e4       	ldi	r26, 0x45	; 69
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e5 e4       	ldi	r30, 0x45	; 69
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	88 7f       	andi	r24, 0xF8	; 248
    2406:	8c 93       	st	X, r24
			TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    2408:	a5 e4       	ldi	r26, 0x45	; 69
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e5 e4       	ldi	r30, 0x45	; 69
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	90 81       	ld	r25, Z
    2412:	ea 81       	ldd	r30, Y+2	; 0x02
    2414:	fb 81       	ldd	r31, Y+3	; 0x03
    2416:	80 81       	ld	r24, Z
    2418:	89 2b       	or	r24, r25
    241a:	8c 93       	st	X, r24
    241c:	05 c0       	rjmp	.+10     	; 0x2428 <TIMER2_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    241e:	84 e0       	ldi	r24, 0x04	; 4
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <TIMER2_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2424:	82 e0       	ldi	r24, 0x02	; 2
    2426:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2428:	89 81       	ldd	r24, Y+1	; 0x01
}
    242a:	27 96       	adiw	r28, 0x07	; 7
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <TIMER0_u8SetCompOutMode>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER0_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	00 d0       	rcall	.+0      	; 0x2442 <TIMER0_u8SetCompOutMode+0x6>
    2442:	00 d0       	rcall	.+0      	; 0x2444 <TIMER0_u8SetCompOutMode+0x8>
    2444:	00 d0       	rcall	.+0      	; 0x2446 <TIMER0_u8SetCompOutMode+0xa>
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	9b 83       	std	Y+3, r25	; 0x03
    244c:	8a 83       	std	Y+2, r24	; 0x02
    244e:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2450:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    2452:	8a 81       	ldd	r24, Y+2	; 0x02
    2454:	9b 81       	ldd	r25, Y+3	; 0x03
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	09 f4       	brne	.+2      	; 0x245c <TIMER0_u8SetCompOutMode+0x20>
    245a:	60 c0       	rjmp	.+192    	; 0x251c <TIMER0_u8SetCompOutMode+0xe0>
	{
		TCCR0 &= TIMER0_2_OCMATCH_MASK;
    245c:	a3 e5       	ldi	r26, 0x53	; 83
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e3 e5       	ldi	r30, 0x53	; 83
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	8f 7c       	andi	r24, 0xCF	; 207
    2468:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    246a:	ea 81       	ldd	r30, Y+2	; 0x02
    246c:	fb 81       	ldd	r31, Y+3	; 0x03
    246e:	81 81       	ldd	r24, Z+1	; 0x01
    2470:	88 23       	and	r24, r24
    2472:	29 f0       	breq	.+10     	; 0x247e <TIMER0_u8SetCompOutMode+0x42>
    2474:	ea 81       	ldd	r30, Y+2	; 0x02
    2476:	fb 81       	ldd	r31, Y+3	; 0x03
    2478:	81 81       	ldd	r24, Z+1	; 0x01
    247a:	82 30       	cpi	r24, 0x02	; 2
    247c:	c1 f4       	brne	.+48     	; 0x24ae <TIMER0_u8SetCompOutMode+0x72>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    247e:	8c 81       	ldd	r24, Y+4	; 0x04
    2480:	84 30       	cpi	r24, 0x04	; 4
    2482:	90 f4       	brcc	.+36     	; 0x24a8 <TIMER0_u8SetCompOutMode+0x6c>
			{
				TCCR0 |= (Copy_u8Mode << 4);
    2484:	a3 e5       	ldi	r26, 0x53	; 83
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e3 e5       	ldi	r30, 0x53	; 83
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	28 2f       	mov	r18, r24
    2490:	8c 81       	ldd	r24, Y+4	; 0x04
    2492:	88 2f       	mov	r24, r24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	82 95       	swap	r24
    2498:	92 95       	swap	r25
    249a:	90 7f       	andi	r25, 0xF0	; 240
    249c:	98 27       	eor	r25, r24
    249e:	80 7f       	andi	r24, 0xF0	; 240
    24a0:	98 27       	eor	r25, r24
    24a2:	82 2b       	or	r24, r18
    24a4:	8c 93       	st	X, r24
    24a6:	3c c0       	rjmp	.+120    	; 0x2520 <TIMER0_u8SetCompOutMode+0xe4>
			}
			else
			{
				Local_u8ErrorState = NOK;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	39 c0       	rjmp	.+114    	; 0x2520 <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    24ae:	ea 81       	ldd	r30, Y+2	; 0x02
    24b0:	fb 81       	ldd	r31, Y+3	; 0x03
    24b2:	81 81       	ldd	r24, Z+1	; 0x01
    24b4:	83 30       	cpi	r24, 0x03	; 3
    24b6:	29 f0       	breq	.+10     	; 0x24c2 <TIMER0_u8SetCompOutMode+0x86>
    24b8:	ea 81       	ldd	r30, Y+2	; 0x02
    24ba:	fb 81       	ldd	r31, Y+3	; 0x03
    24bc:	81 81       	ldd	r24, Z+1	; 0x01
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	79 f5       	brne	.+94     	; 0x2520 <TIMER0_u8SetCompOutMode+0xe4>
		{
			switch(Copy_u8Mode)
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	3e 83       	std	Y+6, r19	; 0x06
    24ca:	2d 83       	std	Y+5, r18	; 0x05
    24cc:	8d 81       	ldd	r24, Y+5	; 0x05
    24ce:	9e 81       	ldd	r25, Y+6	; 0x06
    24d0:	84 30       	cpi	r24, 0x04	; 4
    24d2:	91 05       	cpc	r25, r1
    24d4:	81 f0       	breq	.+32     	; 0x24f6 <TIMER0_u8SetCompOutMode+0xba>
    24d6:	2d 81       	ldd	r18, Y+5	; 0x05
    24d8:	3e 81       	ldd	r19, Y+6	; 0x06
    24da:	25 30       	cpi	r18, 0x05	; 5
    24dc:	31 05       	cpc	r19, r1
    24de:	99 f0       	breq	.+38     	; 0x2506 <TIMER0_u8SetCompOutMode+0xca>
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	b9 f4       	brne	.+46     	; 0x2516 <TIMER0_u8SetCompOutMode+0xda>
			{
			case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    24e8:	e3 e5       	ldi	r30, 0x53	; 83
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	a3 e5       	ldi	r26, 0x53	; 83
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	8c 91       	ld	r24, X
    24f2:	80 83       	st	Z, r24
    24f4:	15 c0       	rjmp	.+42     	; 0x2520 <TIMER0_u8SetCompOutMode+0xe4>
			case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    24f6:	a3 e5       	ldi	r26, 0x53	; 83
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e3 e5       	ldi	r30, 0x53	; 83
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	80 62       	ori	r24, 0x20	; 32
    2502:	8c 93       	st	X, r24
    2504:	0d c0       	rjmp	.+26     	; 0x2520 <TIMER0_u8SetCompOutMode+0xe4>
			case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    2506:	a3 e5       	ldi	r26, 0x53	; 83
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e3 e5       	ldi	r30, 0x53	; 83
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	80 63       	ori	r24, 0x30	; 48
    2512:	8c 93       	st	X, r24
    2514:	05 c0       	rjmp	.+10     	; 0x2520 <TIMER0_u8SetCompOutMode+0xe4>
			default: Local_u8ErrorState = NOK;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    2520:	89 81       	ldd	r24, Y+1	; 0x01
}
    2522:	26 96       	adiw	r28, 0x06	; 6
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <TIMER1_u8SetCompOutModeChA>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER1_u8SetCompOutModeChA(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	28 97       	sbiw	r28, 0x08	; 8
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	9b 83       	std	Y+3, r25	; 0x03
    254a:	8a 83       	std	Y+2, r24	; 0x02
    254c:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    254e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	9b 81       	ldd	r25, Y+3	; 0x03
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	09 f4       	brne	.+2      	; 0x255a <TIMER1_u8SetCompOutModeChA+0x26>
    2558:	a5 c0       	rjmp	.+330    	; 0x26a4 <TIMER1_u8SetCompOutModeChA+0x170>
	{
		/*Select Output Compare Match Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    255a:	ea 81       	ldd	r30, Y+2	; 0x02
    255c:	fb 81       	ldd	r31, Y+3	; 0x03
    255e:	81 81       	ldd	r24, Z+1	; 0x01
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	38 87       	std	Y+8, r19	; 0x08
    2566:	2f 83       	std	Y+7, r18	; 0x07
    2568:	8f 81       	ldd	r24, Y+7	; 0x07
    256a:	98 85       	ldd	r25, Y+8	; 0x08
    256c:	8c 30       	cpi	r24, 0x0C	; 12
    256e:	91 05       	cpc	r25, r1
    2570:	ac f4       	brge	.+42     	; 0x259c <TIMER1_u8SetCompOutModeChA+0x68>
    2572:	2f 81       	ldd	r18, Y+7	; 0x07
    2574:	38 85       	ldd	r19, Y+8	; 0x08
    2576:	25 30       	cpi	r18, 0x05	; 5
    2578:	31 05       	cpc	r19, r1
    257a:	0c f0       	brlt	.+2      	; 0x257e <TIMER1_u8SetCompOutModeChA+0x4a>
    257c:	42 c0       	rjmp	.+132    	; 0x2602 <TIMER1_u8SetCompOutModeChA+0xce>
    257e:	8f 81       	ldd	r24, Y+7	; 0x07
    2580:	98 85       	ldd	r25, Y+8	; 0x08
    2582:	84 30       	cpi	r24, 0x04	; 4
    2584:	91 05       	cpc	r25, r1
    2586:	bc f4       	brge	.+46     	; 0x25b6 <TIMER1_u8SetCompOutModeChA+0x82>
    2588:	2f 81       	ldd	r18, Y+7	; 0x07
    258a:	38 85       	ldd	r19, Y+8	; 0x08
    258c:	21 30       	cpi	r18, 0x01	; 1
    258e:	31 05       	cpc	r19, r1
    2590:	c4 f5       	brge	.+112    	; 0x2602 <TIMER1_u8SetCompOutModeChA+0xce>
    2592:	8f 81       	ldd	r24, Y+7	; 0x07
    2594:	98 85       	ldd	r25, Y+8	; 0x08
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	71 f0       	breq	.+28     	; 0x25b6 <TIMER1_u8SetCompOutModeChA+0x82>
    259a:	81 c0       	rjmp	.+258    	; 0x269e <TIMER1_u8SetCompOutModeChA+0x16a>
    259c:	2f 81       	ldd	r18, Y+7	; 0x07
    259e:	38 85       	ldd	r19, Y+8	; 0x08
    25a0:	2c 30       	cpi	r18, 0x0C	; 12
    25a2:	31 05       	cpc	r19, r1
    25a4:	41 f0       	breq	.+16     	; 0x25b6 <TIMER1_u8SetCompOutModeChA+0x82>
    25a6:	8f 81       	ldd	r24, Y+7	; 0x07
    25a8:	98 85       	ldd	r25, Y+8	; 0x08
    25aa:	0e 97       	sbiw	r24, 0x0e	; 14
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	91 05       	cpc	r25, r1
    25b0:	08 f0       	brcs	.+2      	; 0x25b4 <TIMER1_u8SetCompOutModeChA+0x80>
    25b2:	75 c0       	rjmp	.+234    	; 0x269e <TIMER1_u8SetCompOutModeChA+0x16a>
    25b4:	26 c0       	rjmp	.+76     	; 0x2602 <TIMER1_u8SetCompOutModeChA+0xce>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel A*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    25b6:	8c 81       	ldd	r24, Y+4	; 0x04
    25b8:	84 30       	cpi	r24, 0x04	; 4
    25ba:	e0 f4       	brcc	.+56     	; 0x25f4 <TIMER1_u8SetCompOutModeChA+0xc0>
			{
				TCCR1A &= TIMER1_OCMATCH_A_MASK;
    25bc:	af e4       	ldi	r26, 0x4F	; 79
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	ef e4       	ldi	r30, 0x4F	; 79
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	8f 73       	andi	r24, 0x3F	; 63
    25c8:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 6);
    25ca:	af e4       	ldi	r26, 0x4F	; 79
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	ef e4       	ldi	r30, 0x4F	; 79
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	28 2f       	mov	r18, r24
    25d6:	8c 81       	ldd	r24, Y+4	; 0x04
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	00 24       	eor	r0, r0
    25de:	96 95       	lsr	r25
    25e0:	87 95       	ror	r24
    25e2:	07 94       	ror	r0
    25e4:	96 95       	lsr	r25
    25e6:	87 95       	ror	r24
    25e8:	07 94       	ror	r0
    25ea:	98 2f       	mov	r25, r24
    25ec:	80 2d       	mov	r24, r0
    25ee:	82 2b       	or	r24, r18
    25f0:	8c 93       	st	X, r24
    25f2:	5a c0       	rjmp	.+180    	; 0x26a8 <TIMER1_u8SetCompOutModeChA+0x174>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    25f4:	8c 81       	ldd	r24, Y+4	; 0x04
    25f6:	86 30       	cpi	r24, 0x06	; 6
    25f8:	09 f4       	brne	.+2      	; 0x25fc <TIMER1_u8SetCompOutModeChA+0xc8>
    25fa:	56 c0       	rjmp	.+172    	; 0x26a8 <TIMER1_u8SetCompOutModeChA+0x174>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	53 c0       	rjmp	.+166    	; 0x26a8 <TIMER1_u8SetCompOutModeChA+0x174>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel A*/
			switch(Copy_u8Mode)
    2602:	8c 81       	ldd	r24, Y+4	; 0x04
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	3e 83       	std	Y+6, r19	; 0x06
    260a:	2d 83       	std	Y+5, r18	; 0x05
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	84 30       	cpi	r24, 0x04	; 4
    2612:	91 05       	cpc	r25, r1
    2614:	19 f1       	breq	.+70     	; 0x265c <TIMER1_u8SetCompOutModeChA+0x128>
    2616:	2d 81       	ldd	r18, Y+5	; 0x05
    2618:	3e 81       	ldd	r19, Y+6	; 0x06
    261a:	25 30       	cpi	r18, 0x05	; 5
    261c:	31 05       	cpc	r19, r1
    261e:	2c f4       	brge	.+10     	; 0x262a <TIMER1_u8SetCompOutModeChA+0xf6>
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	61 f0       	breq	.+24     	; 0x2640 <TIMER1_u8SetCompOutModeChA+0x10c>
    2628:	37 c0       	rjmp	.+110    	; 0x2698 <TIMER1_u8SetCompOutModeChA+0x164>
    262a:	2d 81       	ldd	r18, Y+5	; 0x05
    262c:	3e 81       	ldd	r19, Y+6	; 0x06
    262e:	25 30       	cpi	r18, 0x05	; 5
    2630:	31 05       	cpc	r19, r1
    2632:	19 f1       	breq	.+70     	; 0x267a <TIMER1_u8SetCompOutModeChA+0x146>
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	9e 81       	ldd	r25, Y+6	; 0x06
    2638:	86 30       	cpi	r24, 0x06	; 6
    263a:	91 05       	cpc	r25, r1
    263c:	a9 f1       	breq	.+106    	; 0x26a8 <TIMER1_u8SetCompOutModeChA+0x174>
    263e:	2c c0       	rjmp	.+88     	; 0x2698 <TIMER1_u8SetCompOutModeChA+0x164>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    2640:	af e4       	ldi	r26, 0x4F	; 79
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	ef e4       	ldi	r30, 0x4F	; 79
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	8f 73       	andi	r24, 0x3F	; 63
    264c:	8c 93       	st	X, r24
    264e:	af e4       	ldi	r26, 0x4F	; 79
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	ef e4       	ldi	r30, 0x4F	; 79
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	8c 93       	st	X, r24
    265a:	26 c0       	rjmp	.+76     	; 0x26a8 <TIMER1_u8SetCompOutModeChA+0x174>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    265c:	af e4       	ldi	r26, 0x4F	; 79
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	ef e4       	ldi	r30, 0x4F	; 79
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	8f 73       	andi	r24, 0x3F	; 63
    2668:	8c 93       	st	X, r24
    266a:	af e4       	ldi	r26, 0x4F	; 79
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	ef e4       	ldi	r30, 0x4F	; 79
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	80 68       	ori	r24, 0x80	; 128
    2676:	8c 93       	st	X, r24
    2678:	17 c0       	rjmp	.+46     	; 0x26a8 <TIMER1_u8SetCompOutModeChA+0x174>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    267a:	af e4       	ldi	r26, 0x4F	; 79
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	ef e4       	ldi	r30, 0x4F	; 79
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	8f 73       	andi	r24, 0x3F	; 63
    2686:	8c 93       	st	X, r24
    2688:	af e4       	ldi	r26, 0x4F	; 79
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	ef e4       	ldi	r30, 0x4F	; 79
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	80 6c       	ori	r24, 0xC0	; 192
    2694:	8c 93       	st	X, r24
    2696:	08 c0       	rjmp	.+16     	; 0x26a8 <TIMER1_u8SetCompOutModeChA+0x174>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	05 c0       	rjmp	.+10     	; 0x26a8 <TIMER1_u8SetCompOutModeChA+0x174>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	89 83       	std	Y+1, r24	; 0x01
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <TIMER1_u8SetCompOutModeChA+0x174>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    26a4:	82 e0       	ldi	r24, 0x02	; 2
    26a6:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26aa:	28 96       	adiw	r28, 0x08	; 8
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <TIMER1_u8SetCompOutModeChB>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER1_u8SetCompOutModeChB(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	28 97       	sbiw	r28, 0x08	; 8
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	9b 83       	std	Y+3, r25	; 0x03
    26d2:	8a 83       	std	Y+2, r24	; 0x02
    26d4:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    26d6:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	9b 81       	ldd	r25, Y+3	; 0x03
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	09 f4       	brne	.+2      	; 0x26e2 <TIMER1_u8SetCompOutModeChB+0x26>
    26e0:	a2 c0       	rjmp	.+324    	; 0x2826 <TIMER1_u8SetCompOutModeChB+0x16a>
	{
		switch(Copy_pstTimerConfig -> WGM)
    26e2:	ea 81       	ldd	r30, Y+2	; 0x02
    26e4:	fb 81       	ldd	r31, Y+3	; 0x03
    26e6:	81 81       	ldd	r24, Z+1	; 0x01
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	38 87       	std	Y+8, r19	; 0x08
    26ee:	2f 83       	std	Y+7, r18	; 0x07
    26f0:	8f 81       	ldd	r24, Y+7	; 0x07
    26f2:	98 85       	ldd	r25, Y+8	; 0x08
    26f4:	8c 30       	cpi	r24, 0x0C	; 12
    26f6:	91 05       	cpc	r25, r1
    26f8:	ac f4       	brge	.+42     	; 0x2724 <TIMER1_u8SetCompOutModeChB+0x68>
    26fa:	2f 81       	ldd	r18, Y+7	; 0x07
    26fc:	38 85       	ldd	r19, Y+8	; 0x08
    26fe:	25 30       	cpi	r18, 0x05	; 5
    2700:	31 05       	cpc	r19, r1
    2702:	0c f0       	brlt	.+2      	; 0x2706 <TIMER1_u8SetCompOutModeChB+0x4a>
    2704:	3f c0       	rjmp	.+126    	; 0x2784 <TIMER1_u8SetCompOutModeChB+0xc8>
    2706:	8f 81       	ldd	r24, Y+7	; 0x07
    2708:	98 85       	ldd	r25, Y+8	; 0x08
    270a:	84 30       	cpi	r24, 0x04	; 4
    270c:	91 05       	cpc	r25, r1
    270e:	bc f4       	brge	.+46     	; 0x273e <TIMER1_u8SetCompOutModeChB+0x82>
    2710:	2f 81       	ldd	r18, Y+7	; 0x07
    2712:	38 85       	ldd	r19, Y+8	; 0x08
    2714:	21 30       	cpi	r18, 0x01	; 1
    2716:	31 05       	cpc	r19, r1
    2718:	ac f5       	brge	.+106    	; 0x2784 <TIMER1_u8SetCompOutModeChB+0xc8>
    271a:	8f 81       	ldd	r24, Y+7	; 0x07
    271c:	98 85       	ldd	r25, Y+8	; 0x08
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	71 f0       	breq	.+28     	; 0x273e <TIMER1_u8SetCompOutModeChB+0x82>
    2722:	7e c0       	rjmp	.+252    	; 0x2820 <TIMER1_u8SetCompOutModeChB+0x164>
    2724:	2f 81       	ldd	r18, Y+7	; 0x07
    2726:	38 85       	ldd	r19, Y+8	; 0x08
    2728:	2c 30       	cpi	r18, 0x0C	; 12
    272a:	31 05       	cpc	r19, r1
    272c:	41 f0       	breq	.+16     	; 0x273e <TIMER1_u8SetCompOutModeChB+0x82>
    272e:	8f 81       	ldd	r24, Y+7	; 0x07
    2730:	98 85       	ldd	r25, Y+8	; 0x08
    2732:	0e 97       	sbiw	r24, 0x0e	; 14
    2734:	82 30       	cpi	r24, 0x02	; 2
    2736:	91 05       	cpc	r25, r1
    2738:	08 f0       	brcs	.+2      	; 0x273c <TIMER1_u8SetCompOutModeChB+0x80>
    273a:	72 c0       	rjmp	.+228    	; 0x2820 <TIMER1_u8SetCompOutModeChB+0x164>
    273c:	23 c0       	rjmp	.+70     	; 0x2784 <TIMER1_u8SetCompOutModeChB+0xc8>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel B*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    273e:	8c 81       	ldd	r24, Y+4	; 0x04
    2740:	84 30       	cpi	r24, 0x04	; 4
    2742:	c8 f4       	brcc	.+50     	; 0x2776 <TIMER1_u8SetCompOutModeChB+0xba>
			{
				TCCR1A &= TIMER1_OCMATCH_B_MASK;
    2744:	af e4       	ldi	r26, 0x4F	; 79
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	ef e4       	ldi	r30, 0x4F	; 79
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	8f 7c       	andi	r24, 0xCF	; 207
    2750:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 4);
    2752:	af e4       	ldi	r26, 0x4F	; 79
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	ef e4       	ldi	r30, 0x4F	; 79
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	28 2f       	mov	r18, r24
    275e:	8c 81       	ldd	r24, Y+4	; 0x04
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	82 95       	swap	r24
    2766:	92 95       	swap	r25
    2768:	90 7f       	andi	r25, 0xF0	; 240
    276a:	98 27       	eor	r25, r24
    276c:	80 7f       	andi	r24, 0xF0	; 240
    276e:	98 27       	eor	r25, r24
    2770:	82 2b       	or	r24, r18
    2772:	8c 93       	st	X, r24
    2774:	5a c0       	rjmp	.+180    	; 0x282a <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    2776:	8c 81       	ldd	r24, Y+4	; 0x04
    2778:	86 30       	cpi	r24, 0x06	; 6
    277a:	09 f4       	brne	.+2      	; 0x277e <TIMER1_u8SetCompOutModeChB+0xc2>
    277c:	56 c0       	rjmp	.+172    	; 0x282a <TIMER1_u8SetCompOutModeChB+0x16e>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	53 c0       	rjmp	.+166    	; 0x282a <TIMER1_u8SetCompOutModeChB+0x16e>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel B*/
			switch(Copy_u8Mode)
    2784:	8c 81       	ldd	r24, Y+4	; 0x04
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	3e 83       	std	Y+6, r19	; 0x06
    278c:	2d 83       	std	Y+5, r18	; 0x05
    278e:	8d 81       	ldd	r24, Y+5	; 0x05
    2790:	9e 81       	ldd	r25, Y+6	; 0x06
    2792:	84 30       	cpi	r24, 0x04	; 4
    2794:	91 05       	cpc	r25, r1
    2796:	19 f1       	breq	.+70     	; 0x27de <TIMER1_u8SetCompOutModeChB+0x122>
    2798:	2d 81       	ldd	r18, Y+5	; 0x05
    279a:	3e 81       	ldd	r19, Y+6	; 0x06
    279c:	25 30       	cpi	r18, 0x05	; 5
    279e:	31 05       	cpc	r19, r1
    27a0:	2c f4       	brge	.+10     	; 0x27ac <TIMER1_u8SetCompOutModeChB+0xf0>
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	61 f0       	breq	.+24     	; 0x27c2 <TIMER1_u8SetCompOutModeChB+0x106>
    27aa:	37 c0       	rjmp	.+110    	; 0x281a <TIMER1_u8SetCompOutModeChB+0x15e>
    27ac:	2d 81       	ldd	r18, Y+5	; 0x05
    27ae:	3e 81       	ldd	r19, Y+6	; 0x06
    27b0:	25 30       	cpi	r18, 0x05	; 5
    27b2:	31 05       	cpc	r19, r1
    27b4:	19 f1       	breq	.+70     	; 0x27fc <TIMER1_u8SetCompOutModeChB+0x140>
    27b6:	8d 81       	ldd	r24, Y+5	; 0x05
    27b8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ba:	86 30       	cpi	r24, 0x06	; 6
    27bc:	91 05       	cpc	r25, r1
    27be:	a9 f1       	breq	.+106    	; 0x282a <TIMER1_u8SetCompOutModeChB+0x16e>
    27c0:	2c c0       	rjmp	.+88     	; 0x281a <TIMER1_u8SetCompOutModeChB+0x15e>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    27c2:	af e4       	ldi	r26, 0x4F	; 79
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	ef e4       	ldi	r30, 0x4F	; 79
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	8f 7c       	andi	r24, 0xCF	; 207
    27ce:	8c 93       	st	X, r24
    27d0:	af e4       	ldi	r26, 0x4F	; 79
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	ef e4       	ldi	r30, 0x4F	; 79
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	8c 93       	st	X, r24
    27dc:	26 c0       	rjmp	.+76     	; 0x282a <TIMER1_u8SetCompOutModeChB+0x16e>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    27de:	af e4       	ldi	r26, 0x4F	; 79
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	ef e4       	ldi	r30, 0x4F	; 79
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	8f 7c       	andi	r24, 0xCF	; 207
    27ea:	8c 93       	st	X, r24
    27ec:	af e4       	ldi	r26, 0x4F	; 79
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ef e4       	ldi	r30, 0x4F	; 79
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	80 62       	ori	r24, 0x20	; 32
    27f8:	8c 93       	st	X, r24
    27fa:	17 c0       	rjmp	.+46     	; 0x282a <TIMER1_u8SetCompOutModeChB+0x16e>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    27fc:	af e4       	ldi	r26, 0x4F	; 79
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	ef e4       	ldi	r30, 0x4F	; 79
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	8f 7c       	andi	r24, 0xCF	; 207
    2808:	8c 93       	st	X, r24
    280a:	af e4       	ldi	r26, 0x4F	; 79
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	ef e4       	ldi	r30, 0x4F	; 79
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	80 63       	ori	r24, 0x30	; 48
    2816:	8c 93       	st	X, r24
    2818:	08 c0       	rjmp	.+16     	; 0x282a <TIMER1_u8SetCompOutModeChB+0x16e>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	05 c0       	rjmp	.+10     	; 0x282a <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	02 c0       	rjmp	.+4      	; 0x282a <TIMER1_u8SetCompOutModeChB+0x16e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
}
    282c:	28 96       	adiw	r28, 0x08	; 8
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <TIMER2_u8SetCompOutMode>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER2_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	28 97       	sbiw	r28, 0x08	; 8
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	9b 83       	std	Y+3, r25	; 0x03
    2854:	8a 83       	std	Y+2, r24	; 0x02
    2856:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2858:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	9b 81       	ldd	r25, Y+3	; 0x03
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	09 f4       	brne	.+2      	; 0x2864 <TIMER2_u8SetCompOutMode+0x26>
    2862:	cd c0       	rjmp	.+410    	; 0x29fe <TIMER2_u8SetCompOutMode+0x1c0>
	{
		/*Select Wave Generation Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    2864:	ea 81       	ldd	r30, Y+2	; 0x02
    2866:	fb 81       	ldd	r31, Y+3	; 0x03
    2868:	81 81       	ldd	r24, Z+1	; 0x01
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	38 87       	std	Y+8, r19	; 0x08
    2870:	2f 83       	std	Y+7, r18	; 0x07
    2872:	8f 81       	ldd	r24, Y+7	; 0x07
    2874:	98 85       	ldd	r25, Y+8	; 0x08
    2876:	81 30       	cpi	r24, 0x01	; 1
    2878:	91 05       	cpc	r25, r1
    287a:	21 f1       	breq	.+72     	; 0x28c4 <TIMER2_u8SetCompOutMode+0x86>
    287c:	2f 81       	ldd	r18, Y+7	; 0x07
    287e:	38 85       	ldd	r19, Y+8	; 0x08
    2880:	22 30       	cpi	r18, 0x02	; 2
    2882:	31 05       	cpc	r19, r1
    2884:	2c f4       	brge	.+10     	; 0x2890 <TIMER2_u8SetCompOutMode+0x52>
    2886:	8f 81       	ldd	r24, Y+7	; 0x07
    2888:	98 85       	ldd	r25, Y+8	; 0x08
    288a:	00 97       	sbiw	r24, 0x00	; 0
    288c:	61 f0       	breq	.+24     	; 0x28a6 <TIMER2_u8SetCompOutMode+0x68>
    288e:	46 c0       	rjmp	.+140    	; 0x291c <TIMER2_u8SetCompOutMode+0xde>
    2890:	2f 81       	ldd	r18, Y+7	; 0x07
    2892:	38 85       	ldd	r19, Y+8	; 0x08
    2894:	22 30       	cpi	r18, 0x02	; 2
    2896:	31 05       	cpc	r19, r1
    2898:	21 f1       	breq	.+72     	; 0x28e2 <TIMER2_u8SetCompOutMode+0xa4>
    289a:	8f 81       	ldd	r24, Y+7	; 0x07
    289c:	98 85       	ldd	r25, Y+8	; 0x08
    289e:	83 30       	cpi	r24, 0x03	; 3
    28a0:	91 05       	cpc	r25, r1
    28a2:	71 f1       	breq	.+92     	; 0x2900 <TIMER2_u8SetCompOutMode+0xc2>
    28a4:	3b c0       	rjmp	.+118    	; 0x291c <TIMER2_u8SetCompOutMode+0xde>
		{
		case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    28a6:	a5 e4       	ldi	r26, 0x45	; 69
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e5 e4       	ldi	r30, 0x45	; 69
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	8f 7b       	andi	r24, 0xBF	; 191
    28b2:	8c 93       	st	X, r24
    28b4:	a5 e4       	ldi	r26, 0x45	; 69
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e5 e4       	ldi	r30, 0x45	; 69
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	87 7f       	andi	r24, 0xF7	; 247
    28c0:	8c 93       	st	X, r24
    28c2:	2c c0       	rjmp	.+88     	; 0x291c <TIMER2_u8SetCompOutMode+0xde>
		case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    28c4:	a5 e4       	ldi	r26, 0x45	; 69
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	e5 e4       	ldi	r30, 0x45	; 69
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	80 64       	ori	r24, 0x40	; 64
    28d0:	8c 93       	st	X, r24
    28d2:	a5 e4       	ldi	r26, 0x45	; 69
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	e5 e4       	ldi	r30, 0x45	; 69
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	87 7f       	andi	r24, 0xF7	; 247
    28de:	8c 93       	st	X, r24
    28e0:	1d c0       	rjmp	.+58     	; 0x291c <TIMER2_u8SetCompOutMode+0xde>
		case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    28e2:	a5 e4       	ldi	r26, 0x45	; 69
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	e5 e4       	ldi	r30, 0x45	; 69
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	8f 7b       	andi	r24, 0xBF	; 191
    28ee:	8c 93       	st	X, r24
    28f0:	a5 e4       	ldi	r26, 0x45	; 69
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	e5 e4       	ldi	r30, 0x45	; 69
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	88 60       	ori	r24, 0x08	; 8
    28fc:	8c 93       	st	X, r24
    28fe:	0e c0       	rjmp	.+28     	; 0x291c <TIMER2_u8SetCompOutMode+0xde>
		case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2900:	a5 e4       	ldi	r26, 0x45	; 69
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	e5 e4       	ldi	r30, 0x45	; 69
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	80 64       	ori	r24, 0x40	; 64
    290c:	8c 93       	st	X, r24
    290e:	a5 e4       	ldi	r26, 0x45	; 69
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e5 e4       	ldi	r30, 0x45	; 69
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	88 60       	ori	r24, 0x08	; 8
    291a:	8c 93       	st	X, r24
		}

		/*Select Output Compare Match Mode*/
		TCCR2 &= TIMER0_2_OCMATCH_MASK;
    291c:	a5 e4       	ldi	r26, 0x45	; 69
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e5 e4       	ldi	r30, 0x45	; 69
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	8f 7c       	andi	r24, 0xCF	; 207
    2928:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    292a:	ea 81       	ldd	r30, Y+2	; 0x02
    292c:	fb 81       	ldd	r31, Y+3	; 0x03
    292e:	81 81       	ldd	r24, Z+1	; 0x01
    2930:	88 23       	and	r24, r24
    2932:	29 f0       	breq	.+10     	; 0x293e <TIMER2_u8SetCompOutMode+0x100>
    2934:	ea 81       	ldd	r30, Y+2	; 0x02
    2936:	fb 81       	ldd	r31, Y+3	; 0x03
    2938:	81 81       	ldd	r24, Z+1	; 0x01
    293a:	82 30       	cpi	r24, 0x02	; 2
    293c:	c1 f4       	brne	.+48     	; 0x296e <TIMER2_u8SetCompOutMode+0x130>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    293e:	8c 81       	ldd	r24, Y+4	; 0x04
    2940:	84 30       	cpi	r24, 0x04	; 4
    2942:	90 f4       	brcc	.+36     	; 0x2968 <TIMER2_u8SetCompOutMode+0x12a>
			{
				TCCR2 |= (Copy_u8Mode << 4);
    2944:	a5 e4       	ldi	r26, 0x45	; 69
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	e5 e4       	ldi	r30, 0x45	; 69
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	28 2f       	mov	r18, r24
    2950:	8c 81       	ldd	r24, Y+4	; 0x04
    2952:	88 2f       	mov	r24, r24
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	82 95       	swap	r24
    2958:	92 95       	swap	r25
    295a:	90 7f       	andi	r25, 0xF0	; 240
    295c:	98 27       	eor	r25, r24
    295e:	80 7f       	andi	r24, 0xF0	; 240
    2960:	98 27       	eor	r25, r24
    2962:	82 2b       	or	r24, r18
    2964:	8c 93       	st	X, r24
    2966:	39 c0       	rjmp	.+114    	; 0x29da <TIMER2_u8SetCompOutMode+0x19c>
			}
			else
			{
				Local_u8ErrorState = NOK;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	36 c0       	rjmp	.+108    	; 0x29da <TIMER2_u8SetCompOutMode+0x19c>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    296e:	ea 81       	ldd	r30, Y+2	; 0x02
    2970:	fb 81       	ldd	r31, Y+3	; 0x03
    2972:	81 81       	ldd	r24, Z+1	; 0x01
    2974:	83 30       	cpi	r24, 0x03	; 3
    2976:	29 f0       	breq	.+10     	; 0x2982 <TIMER2_u8SetCompOutMode+0x144>
    2978:	ea 81       	ldd	r30, Y+2	; 0x02
    297a:	fb 81       	ldd	r31, Y+3	; 0x03
    297c:	81 81       	ldd	r24, Z+1	; 0x01
    297e:	81 30       	cpi	r24, 0x01	; 1
    2980:	61 f5       	brne	.+88     	; 0x29da <TIMER2_u8SetCompOutMode+0x19c>
		{
			switch(Copy_u8Mode)
    2982:	8c 81       	ldd	r24, Y+4	; 0x04
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	3e 83       	std	Y+6, r19	; 0x06
    298a:	2d 83       	std	Y+5, r18	; 0x05
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	84 30       	cpi	r24, 0x04	; 4
    2992:	91 05       	cpc	r25, r1
    2994:	81 f0       	breq	.+32     	; 0x29b6 <TIMER2_u8SetCompOutMode+0x178>
    2996:	2d 81       	ldd	r18, Y+5	; 0x05
    2998:	3e 81       	ldd	r19, Y+6	; 0x06
    299a:	25 30       	cpi	r18, 0x05	; 5
    299c:	31 05       	cpc	r19, r1
    299e:	99 f0       	breq	.+38     	; 0x29c6 <TIMER2_u8SetCompOutMode+0x188>
    29a0:	8d 81       	ldd	r24, Y+5	; 0x05
    29a2:	9e 81       	ldd	r25, Y+6	; 0x06
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	b9 f4       	brne	.+46     	; 0x29d6 <TIMER2_u8SetCompOutMode+0x198>
			{
			case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    29a8:	e5 e4       	ldi	r30, 0x45	; 69
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	a5 e4       	ldi	r26, 0x45	; 69
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	8c 91       	ld	r24, X
    29b2:	80 83       	st	Z, r24
    29b4:	12 c0       	rjmp	.+36     	; 0x29da <TIMER2_u8SetCompOutMode+0x19c>
			case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    29b6:	a5 e4       	ldi	r26, 0x45	; 69
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e5 e4       	ldi	r30, 0x45	; 69
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	80 62       	ori	r24, 0x20	; 32
    29c2:	8c 93       	st	X, r24
    29c4:	0a c0       	rjmp	.+20     	; 0x29da <TIMER2_u8SetCompOutMode+0x19c>
			case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    29c6:	a5 e4       	ldi	r26, 0x45	; 69
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	e5 e4       	ldi	r30, 0x45	; 69
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	80 63       	ori	r24, 0x30	; 48
    29d2:	8c 93       	st	X, r24
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <TIMER2_u8SetCompOutMode+0x19c>
			default: Local_u8ErrorState = NOK;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		/*Select the clock*/
		TCCR2 &= PRESCALER_MASK;
    29da:	a5 e4       	ldi	r26, 0x45	; 69
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	e5 e4       	ldi	r30, 0x45	; 69
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	88 7f       	andi	r24, 0xF8	; 248
    29e6:	8c 93       	st	X, r24
		TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    29e8:	a5 e4       	ldi	r26, 0x45	; 69
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	e5 e4       	ldi	r30, 0x45	; 69
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	90 81       	ld	r25, Z
    29f2:	ea 81       	ldd	r30, Y+2	; 0x02
    29f4:	fb 81       	ldd	r31, Y+3	; 0x03
    29f6:	80 81       	ld	r24, Z
    29f8:	89 2b       	or	r24, r25
    29fa:	8c 93       	st	X, r24
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <TIMER2_u8SetCompOutMode+0x1c4>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a04:	28 96       	adiw	r28, 0x08	; 8
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <TIMERS_u8IntEnable>:
 * @brief 					Function to enable any of timer interrupts.
 * @param Copy_u8TimerInt	Interrupt source wanted to be enabled.
 * @return					Error State.
 */
uint8 TIMERS_u8IntEnable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <TIMERS_u8IntEnable+0x6>
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <TIMERS_u8IntEnable+0x8>
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    2a24:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	28 2f       	mov	r18, r24
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	3c 83       	std	Y+4, r19	; 0x04
    2a2e:	2b 83       	std	Y+3, r18	; 0x03
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	9c 81       	ldd	r25, Y+4	; 0x04
    2a34:	83 30       	cpi	r24, 0x03	; 3
    2a36:	91 05       	cpc	r25, r1
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <TIMERS_u8IntEnable+0x26>
    2a3a:	42 c0       	rjmp	.+132    	; 0x2ac0 <TIMERS_u8IntEnable+0xaa>
    2a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a40:	24 30       	cpi	r18, 0x04	; 4
    2a42:	31 05       	cpc	r19, r1
    2a44:	7c f4       	brge	.+30     	; 0x2a64 <TIMERS_u8IntEnable+0x4e>
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	81 30       	cpi	r24, 0x01	; 1
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	41 f1       	breq	.+80     	; 0x2aa0 <TIMERS_u8IntEnable+0x8a>
    2a50:	2b 81       	ldd	r18, Y+3	; 0x03
    2a52:	3c 81       	ldd	r19, Y+4	; 0x04
    2a54:	22 30       	cpi	r18, 0x02	; 2
    2a56:	31 05       	cpc	r19, r1
    2a58:	5c f5       	brge	.+86     	; 0x2ab0 <TIMERS_u8IntEnable+0x9a>
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	b9 f0       	breq	.+46     	; 0x2a90 <TIMERS_u8IntEnable+0x7a>
    2a62:	56 c0       	rjmp	.+172    	; 0x2b10 <TIMERS_u8IntEnable+0xfa>
    2a64:	2b 81       	ldd	r18, Y+3	; 0x03
    2a66:	3c 81       	ldd	r19, Y+4	; 0x04
    2a68:	25 30       	cpi	r18, 0x05	; 5
    2a6a:	31 05       	cpc	r19, r1
    2a6c:	c9 f1       	breq	.+114    	; 0x2ae0 <TIMERS_u8IntEnable+0xca>
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	9c 81       	ldd	r25, Y+4	; 0x04
    2a72:	85 30       	cpi	r24, 0x05	; 5
    2a74:	91 05       	cpc	r25, r1
    2a76:	64 f1       	brlt	.+88     	; 0x2ad0 <TIMERS_u8IntEnable+0xba>
    2a78:	2b 81       	ldd	r18, Y+3	; 0x03
    2a7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a7c:	26 30       	cpi	r18, 0x06	; 6
    2a7e:	31 05       	cpc	r19, r1
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <TIMERS_u8IntEnable+0x6e>
    2a82:	3e c0       	rjmp	.+124    	; 0x2b00 <TIMERS_u8IntEnable+0xea>
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	9c 81       	ldd	r25, Y+4	; 0x04
    2a88:	87 30       	cpi	r24, 0x07	; 7
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	89 f1       	breq	.+98     	; 0x2af0 <TIMERS_u8IntEnable+0xda>
    2a8e:	40 c0       	rjmp	.+128    	; 0x2b10 <TIMERS_u8IntEnable+0xfa>
	{
	case TIMER0_OVF:	SET_BIT(TIMSK,TIMSK_TOIE0);	break;
    2a90:	a9 e5       	ldi	r26, 0x59	; 89
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e9 e5       	ldi	r30, 0x59	; 89
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	81 60       	ori	r24, 0x01	; 1
    2a9c:	8c 93       	st	X, r24
    2a9e:	3a c0       	rjmp	.+116    	; 0x2b14 <TIMERS_u8IntEnable+0xfe>
	case TIMER0_COMP:	SET_BIT(TIMSK,TIMSK_OCIE0);	break;
    2aa0:	a9 e5       	ldi	r26, 0x59	; 89
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e9 e5       	ldi	r30, 0x59	; 89
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	82 60       	ori	r24, 0x02	; 2
    2aac:	8c 93       	st	X, r24
    2aae:	32 c0       	rjmp	.+100    	; 0x2b14 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_OVF:	SET_BIT(TIMSK,TIMSK_TOIE1);	break;
    2ab0:	a9 e5       	ldi	r26, 0x59	; 89
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	e9 e5       	ldi	r30, 0x59	; 89
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	84 60       	ori	r24, 0x04	; 4
    2abc:	8c 93       	st	X, r24
    2abe:	2a c0       	rjmp	.+84     	; 0x2b14 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPA:	SET_BIT(TIMSK,TIMSK_OCIE1A);	break;
    2ac0:	a9 e5       	ldi	r26, 0x59	; 89
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e9 e5       	ldi	r30, 0x59	; 89
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	80 61       	ori	r24, 0x10	; 16
    2acc:	8c 93       	st	X, r24
    2ace:	22 c0       	rjmp	.+68     	; 0x2b14 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPB:	SET_BIT(TIMSK,TIMSK_OCIE1B);	break;
    2ad0:	a9 e5       	ldi	r26, 0x59	; 89
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e9 e5       	ldi	r30, 0x59	; 89
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	88 60       	ori	r24, 0x08	; 8
    2adc:	8c 93       	st	X, r24
    2ade:	1a c0       	rjmp	.+52     	; 0x2b14 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_CAPT:	SET_BIT(TIMSK,TIMSK_TICIE1);	break;
    2ae0:	a9 e5       	ldi	r26, 0x59	; 89
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e9 e5       	ldi	r30, 0x59	; 89
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	80 62       	ori	r24, 0x20	; 32
    2aec:	8c 93       	st	X, r24
    2aee:	12 c0       	rjmp	.+36     	; 0x2b14 <TIMERS_u8IntEnable+0xfe>
	case TIMER2_COMP:	SET_BIT(TIMSK,TIMSK_OCIE2); break;
    2af0:	a9 e5       	ldi	r26, 0x59	; 89
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e9 e5       	ldi	r30, 0x59	; 89
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	80 68       	ori	r24, 0x80	; 128
    2afc:	8c 93       	st	X, r24
    2afe:	0a c0       	rjmp	.+20     	; 0x2b14 <TIMERS_u8IntEnable+0xfe>
	case TIMER2_OVF:	SET_BIT(TIMSK,TIMSK_TOIE2);	break;
    2b00:	a9 e5       	ldi	r26, 0x59	; 89
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	e9 e5       	ldi	r30, 0x59	; 89
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	80 64       	ori	r24, 0x40	; 64
    2b0c:	8c 93       	st	X, r24
    2b0e:	02 c0       	rjmp	.+4      	; 0x2b14 <TIMERS_u8IntEnable+0xfe>
	default:Local_u8ErrorState = NOK;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	cf 91       	pop	r28
    2b20:	df 91       	pop	r29
    2b22:	08 95       	ret

00002b24 <TIMERS_u8IntDisable>:
 * @brief 					Function to disable any of timer interrupts.
 * @param Copy_u8TimerInt	Interrupt source wanted to be disabled.
 * @return					Error State.
 */
uint8 TIMERS_u8IntDisable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <TIMERS_u8IntDisable+0x6>
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <TIMERS_u8IntDisable+0x8>
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    2b32:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	3c 83       	std	Y+4, r19	; 0x04
    2b3c:	2b 83       	std	Y+3, r18	; 0x03
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	9c 81       	ldd	r25, Y+4	; 0x04
    2b42:	83 30       	cpi	r24, 0x03	; 3
    2b44:	91 05       	cpc	r25, r1
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <TIMERS_u8IntDisable+0x26>
    2b48:	42 c0       	rjmp	.+132    	; 0x2bce <TIMERS_u8IntDisable+0xaa>
    2b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b4e:	24 30       	cpi	r18, 0x04	; 4
    2b50:	31 05       	cpc	r19, r1
    2b52:	7c f4       	brge	.+30     	; 0x2b72 <TIMERS_u8IntDisable+0x4e>
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	9c 81       	ldd	r25, Y+4	; 0x04
    2b58:	81 30       	cpi	r24, 0x01	; 1
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	41 f1       	breq	.+80     	; 0x2bae <TIMERS_u8IntDisable+0x8a>
    2b5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b60:	3c 81       	ldd	r19, Y+4	; 0x04
    2b62:	22 30       	cpi	r18, 0x02	; 2
    2b64:	31 05       	cpc	r19, r1
    2b66:	5c f5       	brge	.+86     	; 0x2bbe <TIMERS_u8IntDisable+0x9a>
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	b9 f0       	breq	.+46     	; 0x2b9e <TIMERS_u8IntDisable+0x7a>
    2b70:	56 c0       	rjmp	.+172    	; 0x2c1e <TIMERS_u8IntDisable+0xfa>
    2b72:	2b 81       	ldd	r18, Y+3	; 0x03
    2b74:	3c 81       	ldd	r19, Y+4	; 0x04
    2b76:	25 30       	cpi	r18, 0x05	; 5
    2b78:	31 05       	cpc	r19, r1
    2b7a:	c9 f1       	breq	.+114    	; 0x2bee <TIMERS_u8IntDisable+0xca>
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b80:	85 30       	cpi	r24, 0x05	; 5
    2b82:	91 05       	cpc	r25, r1
    2b84:	64 f1       	brlt	.+88     	; 0x2bde <TIMERS_u8IntDisable+0xba>
    2b86:	2b 81       	ldd	r18, Y+3	; 0x03
    2b88:	3c 81       	ldd	r19, Y+4	; 0x04
    2b8a:	26 30       	cpi	r18, 0x06	; 6
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <TIMERS_u8IntDisable+0x6e>
    2b90:	3e c0       	rjmp	.+124    	; 0x2c0e <TIMERS_u8IntDisable+0xea>
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	9c 81       	ldd	r25, Y+4	; 0x04
    2b96:	87 30       	cpi	r24, 0x07	; 7
    2b98:	91 05       	cpc	r25, r1
    2b9a:	89 f1       	breq	.+98     	; 0x2bfe <TIMERS_u8IntDisable+0xda>
    2b9c:	40 c0       	rjmp	.+128    	; 0x2c1e <TIMERS_u8IntDisable+0xfa>
	{
	case TIMER0_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE0);	break;
    2b9e:	a9 e5       	ldi	r26, 0x59	; 89
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e9 e5       	ldi	r30, 0x59	; 89
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8e 7f       	andi	r24, 0xFE	; 254
    2baa:	8c 93       	st	X, r24
    2bac:	3a c0       	rjmp	.+116    	; 0x2c22 <TIMERS_u8IntDisable+0xfe>
	case TIMER0_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE0);	break;
    2bae:	a9 e5       	ldi	r26, 0x59	; 89
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	e9 e5       	ldi	r30, 0x59	; 89
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	8d 7f       	andi	r24, 0xFD	; 253
    2bba:	8c 93       	st	X, r24
    2bbc:	32 c0       	rjmp	.+100    	; 0x2c22 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE1);	break;
    2bbe:	a9 e5       	ldi	r26, 0x59	; 89
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e9 e5       	ldi	r30, 0x59	; 89
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	8b 7f       	andi	r24, 0xFB	; 251
    2bca:	8c 93       	st	X, r24
    2bcc:	2a c0       	rjmp	.+84     	; 0x2c22 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPA:	CLR_BIT(TIMSK,TIMSK_OCIE1A);	break;
    2bce:	a9 e5       	ldi	r26, 0x59	; 89
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	e9 e5       	ldi	r30, 0x59	; 89
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	8f 7e       	andi	r24, 0xEF	; 239
    2bda:	8c 93       	st	X, r24
    2bdc:	22 c0       	rjmp	.+68     	; 0x2c22 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPB:	CLR_BIT(TIMSK,TIMSK_OCIE1B);	break;
    2bde:	a9 e5       	ldi	r26, 0x59	; 89
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	e9 e5       	ldi	r30, 0x59	; 89
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	87 7f       	andi	r24, 0xF7	; 247
    2bea:	8c 93       	st	X, r24
    2bec:	1a c0       	rjmp	.+52     	; 0x2c22 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_CAPT:	CLR_BIT(TIMSK,TIMSK_TICIE1);	break;
    2bee:	a9 e5       	ldi	r26, 0x59	; 89
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	e9 e5       	ldi	r30, 0x59	; 89
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	8f 7d       	andi	r24, 0xDF	; 223
    2bfa:	8c 93       	st	X, r24
    2bfc:	12 c0       	rjmp	.+36     	; 0x2c22 <TIMERS_u8IntDisable+0xfe>
	case TIMER2_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE2); break;
    2bfe:	a9 e5       	ldi	r26, 0x59	; 89
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e9 e5       	ldi	r30, 0x59	; 89
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	8f 77       	andi	r24, 0x7F	; 127
    2c0a:	8c 93       	st	X, r24
    2c0c:	0a c0       	rjmp	.+20     	; 0x2c22 <TIMERS_u8IntDisable+0xfe>
	case TIMER2_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE2);	break;
    2c0e:	a9 e5       	ldi	r26, 0x59	; 89
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e9 e5       	ldi	r30, 0x59	; 89
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	8f 7b       	andi	r24, 0xBF	; 191
    2c1a:	8c 93       	st	X, r24
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <TIMERS_u8IntDisable+0xfe>
	default:Local_u8ErrorState = NOK;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <TIMERS_u8Disable>:
 * @brief				Function to disable a timer peripheral.
 * @param Copy_u8Timer	Timer wanted to be disabled.
 * @return				Error State.
 */
uint8 TIMERS_u8Disable(TIMERS_NUM Copy_u8Timer)
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <TIMERS_u8Disable+0x6>
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <TIMERS_u8Disable+0x8>
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2c40:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the timer*/
	switch(Copy_u8Timer)
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	3c 83       	std	Y+4, r19	; 0x04
    2c4a:	2b 83       	std	Y+3, r18	; 0x03
    2c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c50:	81 30       	cpi	r24, 0x01	; 1
    2c52:	91 05       	cpc	r25, r1
    2c54:	99 f0       	breq	.+38     	; 0x2c7c <TIMERS_u8Disable+0x4a>
    2c56:	2b 81       	ldd	r18, Y+3	; 0x03
    2c58:	3c 81       	ldd	r19, Y+4	; 0x04
    2c5a:	22 30       	cpi	r18, 0x02	; 2
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	c1 f0       	breq	.+48     	; 0x2c90 <TIMERS_u8Disable+0x5e>
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	9c 81       	ldd	r25, Y+4	; 0x04
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	f1 f4       	brne	.+60     	; 0x2ca4 <TIMERS_u8Disable+0x72>
	{
	case TIMER0: TIMERS_u8StateArr[TIMER0] = IDLE;	TCCR0 &= PRESCALER_MASK;	break;
    2c68:	10 92 8d 01 	sts	0x018D, r1
    2c6c:	a3 e5       	ldi	r26, 0x53	; 83
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	e3 e5       	ldi	r30, 0x53	; 83
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	88 7f       	andi	r24, 0xF8	; 248
    2c78:	8c 93       	st	X, r24
    2c7a:	16 c0       	rjmp	.+44     	; 0x2ca8 <TIMERS_u8Disable+0x76>
	case TIMER1: TIMERS_u8StateArr[TIMER1] = IDLE;	TCCR1B &= PRESCALER_MASK;	break;
    2c7c:	10 92 8e 01 	sts	0x018E, r1
    2c80:	ae e4       	ldi	r26, 0x4E	; 78
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	ee e4       	ldi	r30, 0x4E	; 78
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	88 7f       	andi	r24, 0xF8	; 248
    2c8c:	8c 93       	st	X, r24
    2c8e:	0c c0       	rjmp	.+24     	; 0x2ca8 <TIMERS_u8Disable+0x76>
	case TIMER2: TIMERS_u8StateArr[TIMER2] = IDLE;	TCCR2 &= PRESCALER_MASK;	break;
    2c90:	10 92 8f 01 	sts	0x018F, r1
    2c94:	a5 e4       	ldi	r26, 0x45	; 69
    2c96:	b0 e0       	ldi	r27, 0x00	; 0
    2c98:	e5 e4       	ldi	r30, 0x45	; 69
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	88 7f       	andi	r24, 0xF8	; 248
    2ca0:	8c 93       	st	X, r24
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <TIMERS_u8Disable+0x76>
	default:	Local_u8ErrorState = NOK;	break;
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	08 95       	ret

00002cb8 <TIMERS_u8SetCallBack>:
 * @param Copy_u8TimerIntSource	Interrupt source.
 * @param Copy_pvCallBackFunc	Pointer to call back function.
 * @return						Error State.
 */
uint8 TIMERS_u8SetCallBack(TIMERS_Int_Src_t Copy_u8TimerIntSource, void (* Copy_pvCallBackFunc)(void))
{
    2cb8:	df 93       	push	r29
    2cba:	cf 93       	push	r28
    2cbc:	00 d0       	rcall	.+0      	; 0x2cbe <TIMERS_u8SetCallBack+0x6>
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <TIMERS_u8SetCallBack+0x8>
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	8a 83       	std	Y+2, r24	; 0x02
    2cc6:	7c 83       	std	Y+4, r23	; 0x04
    2cc8:	6b 83       	std	Y+3, r22	; 0x03
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2cca:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer of function*/
	if(Copy_pvCallBackFunc != NULL)
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	69 f0       	breq	.+26     	; 0x2cee <TIMERS_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFuncArr[Copy_u8TimerIntSource] = Copy_pvCallBackFunc;
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	fc 01       	movw	r30, r24
    2ce0:	e0 57       	subi	r30, 0x70	; 112
    2ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce8:	91 83       	std	Z+1, r25	; 0x01
    2cea:	80 83       	st	Z, r24
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <TIMERS_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2cee:	82 e0       	ldi	r24, 0x02	; 2
    2cf0:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <TIMER0_voidSetCompValue>:
/**
 * @brief 				Function to set the output compare value of timer 0 (OCR0).
 * @param Copy_u8Value	Value of output compare.
 */
void TIMER0_voidSetCompValue(uint8 Copy_u8Value)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	0f 92       	push	r0
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 0*/
	OCR0 = Copy_u8Value;
    2d0e:	ec e5       	ldi	r30, 0x5C	; 92
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	80 83       	st	Z, r24
}
    2d16:	0f 90       	pop	r0
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <TIMER0_voidSetOvfValue>:
/**
 * @brief 				Function to set the overflow value (preload) of timer 0 (TCNT0).
 * @param Copy_u8Value	Value of preload.
 */
void TIMER0_voidSetOvfValue(uint8 Copy_u8Value)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	0f 92       	push	r0
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 0*/
	TCNT0 = Copy_u8Value;
    2d2a:	e2 e5       	ldi	r30, 0x52	; 82
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	80 83       	st	Z, r24
}
    2d32:	0f 90       	pop	r0
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <TIMER0_u8GetTimerValue>:
/**
 * @brief 	Function to get the timer (TCNT0) value.
 * @return	Timer value.
 */
uint8 TIMER0_u8GetTimerValue(void)
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 0*/
	return TCNT0;
    2d42:	e2 e5       	ldi	r30, 0x52	; 82
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
}
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <TIMER2_voidSetCompValue>:
/**
 * @brief 				Function to set the output compare value of timer 2 (OCR2).
 * @param Copy_u8Value	Value of output compare.
 */
void TIMER2_voidSetCompValue(uint8 Copy_u8Value)
{
    2d4e:	df 93       	push	r29
    2d50:	cf 93       	push	r28
    2d52:	0f 92       	push	r0
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 2*/
	OCR2 = Copy_u8Value;
    2d5a:	e3 e4       	ldi	r30, 0x43	; 67
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	80 83       	st	Z, r24
}
    2d62:	0f 90       	pop	r0
    2d64:	cf 91       	pop	r28
    2d66:	df 91       	pop	r29
    2d68:	08 95       	ret

00002d6a <TIMER2_voidSetOvfValue>:
/**
 * @brief 				Function to set the overflow value (preload) of timer 2 (TCNT2).
 * @param Copy_u8Value	Value of preload.
 */
void TIMER2_voidSetOvfValue(uint8 Copy_u8Value)
{
    2d6a:	df 93       	push	r29
    2d6c:	cf 93       	push	r28
    2d6e:	0f 92       	push	r0
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 2*/
	TCNT2 = Copy_u8Value;
    2d76:	e4 e4       	ldi	r30, 0x44	; 68
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	80 83       	st	Z, r24
}
    2d7e:	0f 90       	pop	r0
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <TIMER2_u8GetTimerValue>:
/**
 * @brief 	Function to get the timer (TCNT2) value.
 * @return	Timer value.
 */
uint8 TIMER2_u8GetTimerValue(void)
{
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 2*/
	return TCNT2;
    2d8e:	e4 e4       	ldi	r30, 0x44	; 68
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
}
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	08 95       	ret

00002d9a <TIMER1_voidSetCompValueChA>:
/**
 * @brief 				Function to set the output compare value of timer 1 channel A (OCR1A).
 * @param Copy_u16Value	Value of ouput compare channel A.
 */
void TIMER1_voidSetCompValueChA(uint16 Copy_u16Value)
{
    2d9a:	df 93       	push	r29
    2d9c:	cf 93       	push	r28
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <TIMER1_voidSetCompValueChA+0x6>
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	9a 83       	std	Y+2, r25	; 0x02
    2da6:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel A*/
	OCR1A = Copy_u16Value;
    2da8:	ea e4       	ldi	r30, 0x4A	; 74
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	80 83       	st	Z, r24
}
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <TIMER1_voidSetCompValueChB>:
/**
 * @brief 				Function to set the output compare value of timer 1 channel B (OCR1B).
 * @param Copy_u16Value	Value of ouput compare channel B.
 */
void TIMER1_voidSetCompValueChB(uint16 Copy_u16Value)
{
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <TIMER1_voidSetCompValueChB+0x6>
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	9a 83       	std	Y+2, r25	; 0x02
    2dca:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel B*/
	OCR1B = Copy_u16Value;
    2dcc:	e8 e4       	ldi	r30, 0x48	; 72
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	80 83       	st	Z, r24
}
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <TIMER1_voidSetOvfValue>:
/**
 * @brief 				Function to set the overflow value (preload) of timer 1 (TCNT1).
 * @param Copy_u16Value	Value of preload.
 */
void TIMER1_voidSetOvfValue(uint16 Copy_u16Value)
{
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <TIMER1_voidSetOvfValue+0x6>
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 1*/
	TCNT1 = Copy_u16Value;
    2df0:	ec e4       	ldi	r30, 0x4C	; 76
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	80 83       	st	Z, r24
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <TIMER1_voidSetInputCaptValue>:
/**
 * @brief 				Function to set a value into input capture register (ICR1).
 * @param Copy_u16Value	Value wanted to set.
 */
void TIMER1_voidSetInputCaptValue(uint16 Copy_u16Value)
{
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <TIMER1_voidSetInputCaptValue+0x6>
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
    2e10:	9a 83       	std	Y+2, r25	; 0x02
    2e12:	89 83       	std	Y+1, r24	; 0x01
	/*Set Input Capture Value of Timer 1*/
	ICR1 = Copy_u16Value;
    2e14:	e6 e4       	ldi	r30, 0x46	; 70
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	80 83       	st	Z, r24
}
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <TIMER1_u16GetTimerValue>:
/**
 * @brief	Function to get the timer (TCNT1) value.
 * @return	Timer value.
 */
uint16 TIMER1_u16GetTimerValue(void)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 1*/
	return TCNT1;
    2e32:	ec e4       	ldi	r30, 0x4C	; 76
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	91 81       	ldd	r25, Z+1	; 0x01
}
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <TIMER1_u16GetInputCaptValue>:
/**
 * @brief	Function to get the input capture (ICR1) value.
 * @return	Input capture value.
 */
uint16 TIMER1_u16GetInputCaptValue(void)
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
	/*Return Input Capture Register Value*/
	return ICR1;
    2e48:	e6 e4       	ldi	r30, 0x46	; 70
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	08 95       	ret

00002e56 <TIMER1_u8SetInputCaptTriggerSrc>:
 * @brief					Function to set the input capture trigger source.
 * @param Copy_u8TriggerSrc	Trigger source.
 * @return					Error State.
 */
uint8 TIMER1_u8SetInputCaptTriggerSrc(uint8 Copy_u8TriggerSrc)
{
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	00 d0       	rcall	.+0      	; 0x2e5c <TIMER1_u8SetInputCaptTriggerSrc+0x6>
    2e5c:	00 d0       	rcall	.+0      	; 0x2e5e <TIMER1_u8SetInputCaptTriggerSrc+0x8>
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2e64:	19 82       	std	Y+1, r1	; 0x01

	/*Set the trigger source selected*/
	switch(Copy_u8TriggerSrc)
    2e66:	8a 81       	ldd	r24, Y+2	; 0x02
    2e68:	28 2f       	mov	r18, r24
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	3c 83       	std	Y+4, r19	; 0x04
    2e6e:	2b 83       	std	Y+3, r18	; 0x03
    2e70:	8b 81       	ldd	r24, Y+3	; 0x03
    2e72:	9c 81       	ldd	r25, Y+4	; 0x04
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	31 f0       	breq	.+12     	; 0x2e84 <TIMER1_u8SetInputCaptTriggerSrc+0x2e>
    2e78:	2b 81       	ldd	r18, Y+3	; 0x03
    2e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e7c:	21 30       	cpi	r18, 0x01	; 1
    2e7e:	31 05       	cpc	r19, r1
    2e80:	49 f0       	breq	.+18     	; 0x2e94 <TIMER1_u8SetInputCaptTriggerSrc+0x3e>
    2e82:	10 c0       	rjmp	.+32     	; 0x2ea4 <TIMER1_u8SetInputCaptTriggerSrc+0x4e>
	{
	case TIMER1_u8ICU_RISING_EDGE:	SET_BIT(TCCR1B,TCCR1B_ICES1);	break;
    2e84:	ae e4       	ldi	r26, 0x4E	; 78
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	ee e4       	ldi	r30, 0x4E	; 78
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	80 64       	ori	r24, 0x40	; 64
    2e90:	8c 93       	st	X, r24
    2e92:	0a c0       	rjmp	.+20     	; 0x2ea8 <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	case TIMER1_u8ICU_FALLING_EDGE: CLR_BIT(TCCR1B,TCCR1B_ICES1);	break;
    2e94:	ae e4       	ldi	r26, 0x4E	; 78
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	ee e4       	ldi	r30, 0x4E	; 78
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	8f 7b       	andi	r24, 0xBF	; 191
    2ea0:	8c 93       	st	X, r24
    2ea2:	02 c0       	rjmp	.+4      	; 0x2ea8 <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	default: Local_u8ErrorState = NOK;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	cf 91       	pop	r28
    2eb4:	df 91       	pop	r29
    2eb6:	08 95       	ret

00002eb8 <WDT_voidEnable>:

/**
 * @brief Function to set the watchdog timer.
 */
void WDT_voidEnable(void)
{
    2eb8:	df 93       	push	r29
    2eba:	cf 93       	push	r28
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
    2ec0:	a1 e4       	ldi	r26, 0x41	; 65
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e1 e4       	ldi	r30, 0x41	; 65
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	88 60       	ori	r24, 0x08	; 8
    2ecc:	8c 93       	st	X, r24
}
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	08 95       	ret

00002ed4 <WDT_voidDisable>:
/**
 * @brief Function to reset the watchdog timer.
 */
void WDT_voidDisable(void)
{
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);
    2edc:	a1 e4       	ldi	r26, 0x41	; 65
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	e1 e4       	ldi	r30, 0x41	; 65
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	88 61       	ori	r24, 0x18	; 24
    2ee8:	8c 93       	st	X, r24
	WDTCR &= 0b11110111;
    2eea:	a1 e4       	ldi	r26, 0x41	; 65
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	e1 e4       	ldi	r30, 0x41	; 65
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	87 7f       	andi	r24, 0xF7	; 247
    2ef6:	8c 93       	st	X, r24
}
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <WDT_u8SetTime>:
 * @brief 						Function to set the watchdog timer prescaler.
 * @param Copy_u8WatchDogTime	Time that watchdog timer will delay with.
 * @return						Error State.
 */
uint8 WDT_u8SetTime(uint8 Copy_u8WatchDogTime)
{
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <WDT_u8SetTime+0x6>
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	8a 83       	std	Y+2, r24	; 0x02
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    2f0a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8WatchDogTime < 8u)
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	88 30       	cpi	r24, 0x08	; 8
    2f10:	80 f4       	brcc	.+32     	; 0x2f32 <WDT_u8SetTime+0x34>
	{
		WDTCR &= WDT_PRESCALER_MASK;
    2f12:	a1 e4       	ldi	r26, 0x41	; 65
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	e1 e4       	ldi	r30, 0x41	; 65
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 7f       	andi	r24, 0xF8	; 248
    2f1e:	8c 93       	st	X, r24
		WDTCR |= Copy_u8WatchDogTime;
    2f20:	a1 e4       	ldi	r26, 0x41	; 65
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e1 e4       	ldi	r30, 0x41	; 65
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	90 81       	ld	r25, Z
    2f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2c:	89 2b       	or	r24, r25
    2f2e:	8c 93       	st	X, r24
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <WDT_u8SetTime+0x38>
	}
	else
	{
		Local_u8ErrorState = NOK;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <__vector_11>:
/**
 * @brief Timer/Counter 0 OverFlow Event ISR.
 */
void __vector_11 (void) __attribute((signal));
void __vector_11 (void)
{
    2f42:	1f 92       	push	r1
    2f44:	0f 92       	push	r0
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	0f 92       	push	r0
    2f4a:	11 24       	eor	r1, r1
    2f4c:	2f 93       	push	r18
    2f4e:	3f 93       	push	r19
    2f50:	4f 93       	push	r20
    2f52:	5f 93       	push	r21
    2f54:	6f 93       	push	r22
    2f56:	7f 93       	push	r23
    2f58:	8f 93       	push	r24
    2f5a:	9f 93       	push	r25
    2f5c:	af 93       	push	r26
    2f5e:	bf 93       	push	r27
    2f60:	ef 93       	push	r30
    2f62:	ff 93       	push	r31
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_OVF] != NULL)
    2f6c:	80 91 90 01 	lds	r24, 0x0190
    2f70:	90 91 91 01 	lds	r25, 0x0191
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	29 f0       	breq	.+10     	; 0x2f82 <__vector_11+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_OVF]();
    2f78:	e0 91 90 01 	lds	r30, 0x0190
    2f7c:	f0 91 91 01 	lds	r31, 0x0191
    2f80:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	ff 91       	pop	r31
    2f88:	ef 91       	pop	r30
    2f8a:	bf 91       	pop	r27
    2f8c:	af 91       	pop	r26
    2f8e:	9f 91       	pop	r25
    2f90:	8f 91       	pop	r24
    2f92:	7f 91       	pop	r23
    2f94:	6f 91       	pop	r22
    2f96:	5f 91       	pop	r21
    2f98:	4f 91       	pop	r20
    2f9a:	3f 91       	pop	r19
    2f9c:	2f 91       	pop	r18
    2f9e:	0f 90       	pop	r0
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	0f 90       	pop	r0
    2fa4:	1f 90       	pop	r1
    2fa6:	18 95       	reti

00002fa8 <__vector_10>:
/**
 *@brief Timer/Counter 0 Compare Match Event ISR.
 */
void __vector_10 (void) __attribute((signal));
void __vector_10 (void)
{
    2fa8:	1f 92       	push	r1
    2faa:	0f 92       	push	r0
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	0f 92       	push	r0
    2fb0:	11 24       	eor	r1, r1
    2fb2:	2f 93       	push	r18
    2fb4:	3f 93       	push	r19
    2fb6:	4f 93       	push	r20
    2fb8:	5f 93       	push	r21
    2fba:	6f 93       	push	r22
    2fbc:	7f 93       	push	r23
    2fbe:	8f 93       	push	r24
    2fc0:	9f 93       	push	r25
    2fc2:	af 93       	push	r26
    2fc4:	bf 93       	push	r27
    2fc6:	ef 93       	push	r30
    2fc8:	ff 93       	push	r31
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_COMP] != NULL)
    2fd2:	80 91 92 01 	lds	r24, 0x0192
    2fd6:	90 91 93 01 	lds	r25, 0x0193
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	29 f0       	breq	.+10     	; 0x2fe8 <__vector_10+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_COMP]();
    2fde:	e0 91 92 01 	lds	r30, 0x0192
    2fe2:	f0 91 93 01 	lds	r31, 0x0193
    2fe6:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	ff 91       	pop	r31
    2fee:	ef 91       	pop	r30
    2ff0:	bf 91       	pop	r27
    2ff2:	af 91       	pop	r26
    2ff4:	9f 91       	pop	r25
    2ff6:	8f 91       	pop	r24
    2ff8:	7f 91       	pop	r23
    2ffa:	6f 91       	pop	r22
    2ffc:	5f 91       	pop	r21
    2ffe:	4f 91       	pop	r20
    3000:	3f 91       	pop	r19
    3002:	2f 91       	pop	r18
    3004:	0f 90       	pop	r0
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	0f 90       	pop	r0
    300a:	1f 90       	pop	r1
    300c:	18 95       	reti

0000300e <__vector_9>:
/**
 * @brief Timer/Counter 1 OverFlow Event ISR.
 */
void __vector_9 (void) __attribute((signal));
void __vector_9 (void)
{
    300e:	1f 92       	push	r1
    3010:	0f 92       	push	r0
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	0f 92       	push	r0
    3016:	11 24       	eor	r1, r1
    3018:	2f 93       	push	r18
    301a:	3f 93       	push	r19
    301c:	4f 93       	push	r20
    301e:	5f 93       	push	r21
    3020:	6f 93       	push	r22
    3022:	7f 93       	push	r23
    3024:	8f 93       	push	r24
    3026:	9f 93       	push	r25
    3028:	af 93       	push	r26
    302a:	bf 93       	push	r27
    302c:	ef 93       	push	r30
    302e:	ff 93       	push	r31
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_OVF] != NULL)
    3038:	80 91 94 01 	lds	r24, 0x0194
    303c:	90 91 95 01 	lds	r25, 0x0195
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	29 f0       	breq	.+10     	; 0x304e <__vector_9+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_OVF]();
    3044:	e0 91 94 01 	lds	r30, 0x0194
    3048:	f0 91 95 01 	lds	r31, 0x0195
    304c:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	ff 91       	pop	r31
    3054:	ef 91       	pop	r30
    3056:	bf 91       	pop	r27
    3058:	af 91       	pop	r26
    305a:	9f 91       	pop	r25
    305c:	8f 91       	pop	r24
    305e:	7f 91       	pop	r23
    3060:	6f 91       	pop	r22
    3062:	5f 91       	pop	r21
    3064:	4f 91       	pop	r20
    3066:	3f 91       	pop	r19
    3068:	2f 91       	pop	r18
    306a:	0f 90       	pop	r0
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	0f 90       	pop	r0
    3070:	1f 90       	pop	r1
    3072:	18 95       	reti

00003074 <__vector_8>:
/**
 * @brief Timer/Counter 1 Channel B Compare Match Event ISR.
 */
void __vector_8 (void) __attribute((signal));
void __vector_8 (void)
{
    3074:	1f 92       	push	r1
    3076:	0f 92       	push	r0
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	0f 92       	push	r0
    307c:	11 24       	eor	r1, r1
    307e:	2f 93       	push	r18
    3080:	3f 93       	push	r19
    3082:	4f 93       	push	r20
    3084:	5f 93       	push	r21
    3086:	6f 93       	push	r22
    3088:	7f 93       	push	r23
    308a:	8f 93       	push	r24
    308c:	9f 93       	push	r25
    308e:	af 93       	push	r26
    3090:	bf 93       	push	r27
    3092:	ef 93       	push	r30
    3094:	ff 93       	push	r31
    3096:	df 93       	push	r29
    3098:	cf 93       	push	r28
    309a:	cd b7       	in	r28, 0x3d	; 61
    309c:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPB] != NULL)
    309e:	80 91 98 01 	lds	r24, 0x0198
    30a2:	90 91 99 01 	lds	r25, 0x0199
    30a6:	00 97       	sbiw	r24, 0x00	; 0
    30a8:	29 f0       	breq	.+10     	; 0x30b4 <__vector_8+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPB]();
    30aa:	e0 91 98 01 	lds	r30, 0x0198
    30ae:	f0 91 99 01 	lds	r31, 0x0199
    30b2:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	ff 91       	pop	r31
    30ba:	ef 91       	pop	r30
    30bc:	bf 91       	pop	r27
    30be:	af 91       	pop	r26
    30c0:	9f 91       	pop	r25
    30c2:	8f 91       	pop	r24
    30c4:	7f 91       	pop	r23
    30c6:	6f 91       	pop	r22
    30c8:	5f 91       	pop	r21
    30ca:	4f 91       	pop	r20
    30cc:	3f 91       	pop	r19
    30ce:	2f 91       	pop	r18
    30d0:	0f 90       	pop	r0
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	0f 90       	pop	r0
    30d6:	1f 90       	pop	r1
    30d8:	18 95       	reti

000030da <__vector_7>:
/**
 * @brief Timer/Counter 1 Channel A Compare Match Event ISR.
 */
void __vector_7 (void) __attribute((signal));
void __vector_7 (void)
{
    30da:	1f 92       	push	r1
    30dc:	0f 92       	push	r0
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	0f 92       	push	r0
    30e2:	11 24       	eor	r1, r1
    30e4:	2f 93       	push	r18
    30e6:	3f 93       	push	r19
    30e8:	4f 93       	push	r20
    30ea:	5f 93       	push	r21
    30ec:	6f 93       	push	r22
    30ee:	7f 93       	push	r23
    30f0:	8f 93       	push	r24
    30f2:	9f 93       	push	r25
    30f4:	af 93       	push	r26
    30f6:	bf 93       	push	r27
    30f8:	ef 93       	push	r30
    30fa:	ff 93       	push	r31
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPA] != NULL)
    3104:	80 91 96 01 	lds	r24, 0x0196
    3108:	90 91 97 01 	lds	r25, 0x0197
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	29 f0       	breq	.+10     	; 0x311a <__vector_7+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPA]();
    3110:	e0 91 96 01 	lds	r30, 0x0196
    3114:	f0 91 97 01 	lds	r31, 0x0197
    3118:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	ff 91       	pop	r31
    3120:	ef 91       	pop	r30
    3122:	bf 91       	pop	r27
    3124:	af 91       	pop	r26
    3126:	9f 91       	pop	r25
    3128:	8f 91       	pop	r24
    312a:	7f 91       	pop	r23
    312c:	6f 91       	pop	r22
    312e:	5f 91       	pop	r21
    3130:	4f 91       	pop	r20
    3132:	3f 91       	pop	r19
    3134:	2f 91       	pop	r18
    3136:	0f 90       	pop	r0
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	0f 90       	pop	r0
    313c:	1f 90       	pop	r1
    313e:	18 95       	reti

00003140 <__vector_6>:
/**
 * @brief Timer/Counter 1 Input Capture Event ISR.
 */
void __vector_6 (void) __attribute((signal));
void __vector_6 (void)
{
    3140:	1f 92       	push	r1
    3142:	0f 92       	push	r0
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	0f 92       	push	r0
    3148:	11 24       	eor	r1, r1
    314a:	2f 93       	push	r18
    314c:	3f 93       	push	r19
    314e:	4f 93       	push	r20
    3150:	5f 93       	push	r21
    3152:	6f 93       	push	r22
    3154:	7f 93       	push	r23
    3156:	8f 93       	push	r24
    3158:	9f 93       	push	r25
    315a:	af 93       	push	r26
    315c:	bf 93       	push	r27
    315e:	ef 93       	push	r30
    3160:	ff 93       	push	r31
    3162:	df 93       	push	r29
    3164:	cf 93       	push	r28
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_CAPT] != NULL)
    316a:	80 91 9a 01 	lds	r24, 0x019A
    316e:	90 91 9b 01 	lds	r25, 0x019B
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	29 f0       	breq	.+10     	; 0x3180 <__vector_6+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_CAPT]();
    3176:	e0 91 9a 01 	lds	r30, 0x019A
    317a:	f0 91 9b 01 	lds	r31, 0x019B
    317e:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	ff 91       	pop	r31
    3186:	ef 91       	pop	r30
    3188:	bf 91       	pop	r27
    318a:	af 91       	pop	r26
    318c:	9f 91       	pop	r25
    318e:	8f 91       	pop	r24
    3190:	7f 91       	pop	r23
    3192:	6f 91       	pop	r22
    3194:	5f 91       	pop	r21
    3196:	4f 91       	pop	r20
    3198:	3f 91       	pop	r19
    319a:	2f 91       	pop	r18
    319c:	0f 90       	pop	r0
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	0f 90       	pop	r0
    31a2:	1f 90       	pop	r1
    31a4:	18 95       	reti

000031a6 <__vector_5>:
/**
 * @brief Timer/Counter 2 OverFlow Event ISR.
 */
void __vector_5 (void) __attribute((signal));
void __vector_5 (void)
{
    31a6:	1f 92       	push	r1
    31a8:	0f 92       	push	r0
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	0f 92       	push	r0
    31ae:	11 24       	eor	r1, r1
    31b0:	2f 93       	push	r18
    31b2:	3f 93       	push	r19
    31b4:	4f 93       	push	r20
    31b6:	5f 93       	push	r21
    31b8:	6f 93       	push	r22
    31ba:	7f 93       	push	r23
    31bc:	8f 93       	push	r24
    31be:	9f 93       	push	r25
    31c0:	af 93       	push	r26
    31c2:	bf 93       	push	r27
    31c4:	ef 93       	push	r30
    31c6:	ff 93       	push	r31
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_OVF] != NULL)
    31d0:	80 91 9c 01 	lds	r24, 0x019C
    31d4:	90 91 9d 01 	lds	r25, 0x019D
    31d8:	00 97       	sbiw	r24, 0x00	; 0
    31da:	29 f0       	breq	.+10     	; 0x31e6 <__vector_5+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_OVF]();
    31dc:	e0 91 9c 01 	lds	r30, 0x019C
    31e0:	f0 91 9d 01 	lds	r31, 0x019D
    31e4:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	ff 91       	pop	r31
    31ec:	ef 91       	pop	r30
    31ee:	bf 91       	pop	r27
    31f0:	af 91       	pop	r26
    31f2:	9f 91       	pop	r25
    31f4:	8f 91       	pop	r24
    31f6:	7f 91       	pop	r23
    31f8:	6f 91       	pop	r22
    31fa:	5f 91       	pop	r21
    31fc:	4f 91       	pop	r20
    31fe:	3f 91       	pop	r19
    3200:	2f 91       	pop	r18
    3202:	0f 90       	pop	r0
    3204:	0f be       	out	0x3f, r0	; 63
    3206:	0f 90       	pop	r0
    3208:	1f 90       	pop	r1
    320a:	18 95       	reti

0000320c <__vector_4>:
/**
 * @brief Timer/Counter 2 Compare Match Event ISR.
 */
void __vector_4 (void) __attribute((signal));
void __vector_4 (void)
{
    320c:	1f 92       	push	r1
    320e:	0f 92       	push	r0
    3210:	0f b6       	in	r0, 0x3f	; 63
    3212:	0f 92       	push	r0
    3214:	11 24       	eor	r1, r1
    3216:	2f 93       	push	r18
    3218:	3f 93       	push	r19
    321a:	4f 93       	push	r20
    321c:	5f 93       	push	r21
    321e:	6f 93       	push	r22
    3220:	7f 93       	push	r23
    3222:	8f 93       	push	r24
    3224:	9f 93       	push	r25
    3226:	af 93       	push	r26
    3228:	bf 93       	push	r27
    322a:	ef 93       	push	r30
    322c:	ff 93       	push	r31
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_COMP] != NULL)
    3236:	80 91 9e 01 	lds	r24, 0x019E
    323a:	90 91 9f 01 	lds	r25, 0x019F
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	29 f0       	breq	.+10     	; 0x324c <__vector_4+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_COMP]();
    3242:	e0 91 9e 01 	lds	r30, 0x019E
    3246:	f0 91 9f 01 	lds	r31, 0x019F
    324a:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	ff 91       	pop	r31
    3252:	ef 91       	pop	r30
    3254:	bf 91       	pop	r27
    3256:	af 91       	pop	r26
    3258:	9f 91       	pop	r25
    325a:	8f 91       	pop	r24
    325c:	7f 91       	pop	r23
    325e:	6f 91       	pop	r22
    3260:	5f 91       	pop	r21
    3262:	4f 91       	pop	r20
    3264:	3f 91       	pop	r19
    3266:	2f 91       	pop	r18
    3268:	0f 90       	pop	r0
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	0f 90       	pop	r0
    326e:	1f 90       	pop	r1
    3270:	18 95       	reti

00003272 <SPI_voidInit>:

/**
 * @brief Function to initialize the SPI peripheral with prebuild configurations.
 */
void SPI_voidInit(void)
{
    3272:	df 93       	push	r29
    3274:	cf 93       	push	r28
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
	/*Set the data order bit*/
#if SPI_u8DATA_TRANSCEIVE_ORDER == MSB_FIRST
	CLR_BIT(SPCR,SPCR_DORD);
    327a:	ad e2       	ldi	r26, 0x2D	; 45
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	ed e2       	ldi	r30, 0x2D	; 45
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	8f 7d       	andi	r24, 0xDF	; 223
    3286:	8c 93       	st	X, r24
#error Wrong SPI_u8DATA_TRANSCEIVE_ORDER Configuration Choise.
#endif

	/*Set the SPI node mode*/
#if SPI_u8MODE == MASTER
	SET_BIT(SPCR,SPCR_MSTR);
    3288:	ad e2       	ldi	r26, 0x2D	; 45
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	ed e2       	ldi	r30, 0x2D	; 45
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	80 61       	ori	r24, 0x10	; 16
    3294:	8c 93       	st	X, r24
#error Wrong SPI_u8MODE Configuration Choise.
#endif

	/*Set the SPI clock polarity*/
#if SPI_u8IDLE_STATE == LOW_VOLTAGE
	CLR_BIT(SPCR,SPCR_CPOL);
    3296:	ad e2       	ldi	r26, 0x2D	; 45
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	ed e2       	ldi	r30, 0x2D	; 45
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	87 7f       	andi	r24, 0xF7	; 247
    32a2:	8c 93       	st	X, r24
#error Wrong SPI_u8IDLE_STATE Configuration Choise.
#endif

	/*Set the SPI clock phase*/
#if SPI_u8MODE == MASTER
	SPCR &= CLOCK_PRESCALER_MASK;
    32a4:	ad e2       	ldi	r26, 0x2D	; 45
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	ed e2       	ldi	r30, 0x2D	; 45
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	8c 7f       	andi	r24, 0xFC	; 252
    32b0:	8c 93       	st	X, r24
	SPCR |= SPI_u8CLOCK_PRESCALER;
    32b2:	ad e2       	ldi	r26, 0x2D	; 45
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	ed e2       	ldi	r30, 0x2D	; 45
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	8c 93       	st	X, r24
	/*Set the SPI double clock rate speed bit*/
#if SPI_u8DOUBLE_SPEED == ENABLED
	SET_BIT(SPSR,SPSR_SPI2X);

#elif SPI_u8DOUBLE_SPEED == DISABLED
	CLR_BIT(SPSR,SPSR_SPI2X);
    32be:	ae e2       	ldi	r26, 0x2E	; 46
    32c0:	b0 e0       	ldi	r27, 0x00	; 0
    32c2:	ee e2       	ldi	r30, 0x2E	; 46
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	80 81       	ld	r24, Z
    32c8:	8e 7f       	andi	r24, 0xFE	; 254
    32ca:	8c 93       	st	X, r24
#endif

#endif

	/*Enable SPI Peripheral*/
	SET_BIT(SPCR,SPCR_SPE);
    32cc:	ad e2       	ldi	r26, 0x2D	; 45
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	ed e2       	ldi	r30, 0x2D	; 45
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	80 64       	ori	r24, 0x40	; 64
    32d8:	8c 93       	st	X, r24
}
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <SPI_u8Transceive>:
 * @brief 				Function to transfer and receive data with SPI peripheral.
 * @param Copy_u8Data	The Transmitting data.
 * @return				The Received Data.
 */
uint8 SPI_u8Transceive(uint8 Copy_u8Data)
{
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	0f 92       	push	r0
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	89 83       	std	Y+1, r24	; 0x01
	/*Set the transmitting data*/
	SPDR = Copy_u8Data;
    32ec:	ef e2       	ldi	r30, 0x2F	; 47
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	80 83       	st	Z, r24

	/*Polling until the data is transceived*/
	while((GET_BIT(SPSR,SPSR_SPIF)) == 0);
    32f4:	ee e2       	ldi	r30, 0x2E	; 46
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	88 23       	and	r24, r24
    32fc:	dc f7       	brge	.-10     	; 0x32f4 <SPI_u8Transceive+0x14>

	/*Return the received data*/
	return SPDR;
    32fe:	ef e2       	ldi	r30, 0x2F	; 47
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
}
    3304:	0f 90       	pop	r0
    3306:	cf 91       	pop	r28
    3308:	df 91       	pop	r29
    330a:	08 95       	ret

0000330c <PORT_voidInit>:

/**
 * @brief Function to initialize all DIO pins (direction and value).
 */
void PORT_voidInit(void)
{
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
	/*Assign directions into DDR registers*/
	DDRA = PORTA_DIR;
    3314:	ea e3       	ldi	r30, 0x3A	; 58
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
    331a:	e7 e3       	ldi	r30, 0x37	; 55
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	87 eb       	ldi	r24, 0xB7	; 183
    3320:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    3322:	e4 e3       	ldi	r30, 0x34	; 52
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	8f ef       	ldi	r24, 0xFF	; 255
    3328:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    332a:	e1 e3       	ldi	r30, 0x31	; 49
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	80 e8       	ldi	r24, 0x80	; 128
    3330:	80 83       	st	Z, r24

	/*Assign values into PORT registers*/
	PORTA = PORTA_INITIAL_VALUE;
    3332:	eb e3       	ldi	r30, 0x3B	; 59
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    3338:	e8 e3       	ldi	r30, 0x38	; 56
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	88 e0       	ldi	r24, 0x08	; 8
    333e:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VALUE;
    3340:	e5 e3       	ldi	r30, 0x35	; 53
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	8f ef       	ldi	r24, 0xFF	; 255
    3346:	80 83       	st	Z, r24
	PORTD = PORTD_INITIAL_VALUE;
    3348:	e2 e3       	ldi	r30, 0x32	; 50
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	8f e3       	ldi	r24, 0x3F	; 63
    334e:	80 83       	st	Z, r24
}
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	08 95       	ret

00003356 <GIE_voidEnable>:

/**
 * @brief Function to enable global interrupt.
 */
void GIE_voidEnable(void)
{
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
	/*Enable global interrupt with c code*/
	//SET_BIT(SREG,SREG_I);

	/*Enable global interrupt with inline assembly code*/
	__asm __volatile("SEI");
    335e:	78 94       	sei
}
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	08 95       	ret

00003366 <GIE_voidDisable>:

/**
 * @brief Function to disable global interrupt.
 */
void GIE_voidDisable(void)
{
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
	/*Disable global interrupt with c code*/
	//CLR_BIT(SREG,SREG_I);

	/*Disable global interrupt with inline assembly code*/
	__asm __volatile("CLI");
    336e:	f8 94       	cli
}
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	08 95       	ret

00003376 <DIO_u8SetPinDirection>:
 * @param Copy_u8Pin 		Pin number.
 * @param Copy_u8Direction 	The new direction wanted to set.
 * @return 					Error state.
 */
uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	28 97       	sbiw	r28, 0x08	; 8
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	8a 83       	std	Y+2, r24	; 0x02
    338c:	6b 83       	std	Y+3, r22	; 0x03
    338e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
    3390:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    3392:	8b 81       	ldd	r24, Y+3	; 0x03
    3394:	88 30       	cpi	r24, 0x08	; 8
    3396:	08 f0       	brcs	.+2      	; 0x339a <DIO_u8SetPinDirection+0x24>
    3398:	f4 c0       	rjmp	.+488    	; 0x3582 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    339a:	8c 81       	ldd	r24, Y+4	; 0x04
    339c:	81 30       	cpi	r24, 0x01	; 1
    339e:	09 f0       	breq	.+2      	; 0x33a2 <DIO_u8SetPinDirection+0x2c>
    33a0:	72 c0       	rjmp	.+228    	; 0x3486 <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    33a2:	8a 81       	ldd	r24, Y+2	; 0x02
    33a4:	28 2f       	mov	r18, r24
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	38 87       	std	Y+8, r19	; 0x08
    33aa:	2f 83       	std	Y+7, r18	; 0x07
    33ac:	8f 81       	ldd	r24, Y+7	; 0x07
    33ae:	98 85       	ldd	r25, Y+8	; 0x08
    33b0:	81 30       	cpi	r24, 0x01	; 1
    33b2:	91 05       	cpc	r25, r1
    33b4:	49 f1       	breq	.+82     	; 0x3408 <DIO_u8SetPinDirection+0x92>
    33b6:	2f 81       	ldd	r18, Y+7	; 0x07
    33b8:	38 85       	ldd	r19, Y+8	; 0x08
    33ba:	22 30       	cpi	r18, 0x02	; 2
    33bc:	31 05       	cpc	r19, r1
    33be:	2c f4       	brge	.+10     	; 0x33ca <DIO_u8SetPinDirection+0x54>
    33c0:	8f 81       	ldd	r24, Y+7	; 0x07
    33c2:	98 85       	ldd	r25, Y+8	; 0x08
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	61 f0       	breq	.+24     	; 0x33e0 <DIO_u8SetPinDirection+0x6a>
    33c8:	5b c0       	rjmp	.+182    	; 0x3480 <DIO_u8SetPinDirection+0x10a>
    33ca:	2f 81       	ldd	r18, Y+7	; 0x07
    33cc:	38 85       	ldd	r19, Y+8	; 0x08
    33ce:	22 30       	cpi	r18, 0x02	; 2
    33d0:	31 05       	cpc	r19, r1
    33d2:	71 f1       	breq	.+92     	; 0x3430 <DIO_u8SetPinDirection+0xba>
    33d4:	8f 81       	ldd	r24, Y+7	; 0x07
    33d6:	98 85       	ldd	r25, Y+8	; 0x08
    33d8:	83 30       	cpi	r24, 0x03	; 3
    33da:	91 05       	cpc	r25, r1
    33dc:	e9 f1       	breq	.+122    	; 0x3458 <DIO_u8SetPinDirection+0xe2>
    33de:	50 c0       	rjmp	.+160    	; 0x3480 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
    33e0:	aa e3       	ldi	r26, 0x3A	; 58
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	ea e3       	ldi	r30, 0x3A	; 58
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	80 81       	ld	r24, Z
    33ea:	48 2f       	mov	r20, r24
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	28 2f       	mov	r18, r24
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	02 2e       	mov	r0, r18
    33f8:	02 c0       	rjmp	.+4      	; 0x33fe <DIO_u8SetPinDirection+0x88>
    33fa:	88 0f       	add	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	0a 94       	dec	r0
    3400:	e2 f7       	brpl	.-8      	; 0x33fa <DIO_u8SetPinDirection+0x84>
    3402:	84 2b       	or	r24, r20
    3404:	8c 93       	st	X, r24
    3406:	bf c0       	rjmp	.+382    	; 0x3586 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
    3408:	a7 e3       	ldi	r26, 0x37	; 55
    340a:	b0 e0       	ldi	r27, 0x00	; 0
    340c:	e7 e3       	ldi	r30, 0x37	; 55
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	80 81       	ld	r24, Z
    3412:	48 2f       	mov	r20, r24
    3414:	8b 81       	ldd	r24, Y+3	; 0x03
    3416:	28 2f       	mov	r18, r24
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	02 2e       	mov	r0, r18
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <DIO_u8SetPinDirection+0xb0>
    3422:	88 0f       	add	r24, r24
    3424:	99 1f       	adc	r25, r25
    3426:	0a 94       	dec	r0
    3428:	e2 f7       	brpl	.-8      	; 0x3422 <DIO_u8SetPinDirection+0xac>
    342a:	84 2b       	or	r24, r20
    342c:	8c 93       	st	X, r24
    342e:	ab c0       	rjmp	.+342    	; 0x3586 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
    3430:	a4 e3       	ldi	r26, 0x34	; 52
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	e4 e3       	ldi	r30, 0x34	; 52
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	48 2f       	mov	r20, r24
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	28 2f       	mov	r18, r24
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	02 2e       	mov	r0, r18
    3448:	02 c0       	rjmp	.+4      	; 0x344e <DIO_u8SetPinDirection+0xd8>
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	0a 94       	dec	r0
    3450:	e2 f7       	brpl	.-8      	; 0x344a <DIO_u8SetPinDirection+0xd4>
    3452:	84 2b       	or	r24, r20
    3454:	8c 93       	st	X, r24
    3456:	97 c0       	rjmp	.+302    	; 0x3586 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
    3458:	a1 e3       	ldi	r26, 0x31	; 49
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	e1 e3       	ldi	r30, 0x31	; 49
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	48 2f       	mov	r20, r24
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	28 2f       	mov	r18, r24
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	02 2e       	mov	r0, r18
    3470:	02 c0       	rjmp	.+4      	; 0x3476 <DIO_u8SetPinDirection+0x100>
    3472:	88 0f       	add	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	0a 94       	dec	r0
    3478:	e2 f7       	brpl	.-8      	; 0x3472 <DIO_u8SetPinDirection+0xfc>
    347a:	84 2b       	or	r24, r20
    347c:	8c 93       	st	X, r24
    347e:	83 c0       	rjmp	.+262    	; 0x3586 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	89 83       	std	Y+1, r24	; 0x01
    3484:	80 c0       	rjmp	.+256    	; 0x3586 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
    3486:	8c 81       	ldd	r24, Y+4	; 0x04
    3488:	88 23       	and	r24, r24
    348a:	09 f0       	breq	.+2      	; 0x348e <DIO_u8SetPinDirection+0x118>
    348c:	77 c0       	rjmp	.+238    	; 0x357c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    348e:	8a 81       	ldd	r24, Y+2	; 0x02
    3490:	28 2f       	mov	r18, r24
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	3e 83       	std	Y+6, r19	; 0x06
    3496:	2d 83       	std	Y+5, r18	; 0x05
    3498:	8d 81       	ldd	r24, Y+5	; 0x05
    349a:	9e 81       	ldd	r25, Y+6	; 0x06
    349c:	81 30       	cpi	r24, 0x01	; 1
    349e:	91 05       	cpc	r25, r1
    34a0:	59 f1       	breq	.+86     	; 0x34f8 <DIO_u8SetPinDirection+0x182>
    34a2:	2d 81       	ldd	r18, Y+5	; 0x05
    34a4:	3e 81       	ldd	r19, Y+6	; 0x06
    34a6:	22 30       	cpi	r18, 0x02	; 2
    34a8:	31 05       	cpc	r19, r1
    34aa:	2c f4       	brge	.+10     	; 0x34b6 <DIO_u8SetPinDirection+0x140>
    34ac:	8d 81       	ldd	r24, Y+5	; 0x05
    34ae:	9e 81       	ldd	r25, Y+6	; 0x06
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	69 f0       	breq	.+26     	; 0x34ce <DIO_u8SetPinDirection+0x158>
    34b4:	60 c0       	rjmp	.+192    	; 0x3576 <DIO_u8SetPinDirection+0x200>
    34b6:	2d 81       	ldd	r18, Y+5	; 0x05
    34b8:	3e 81       	ldd	r19, Y+6	; 0x06
    34ba:	22 30       	cpi	r18, 0x02	; 2
    34bc:	31 05       	cpc	r19, r1
    34be:	89 f1       	breq	.+98     	; 0x3522 <DIO_u8SetPinDirection+0x1ac>
    34c0:	8d 81       	ldd	r24, Y+5	; 0x05
    34c2:	9e 81       	ldd	r25, Y+6	; 0x06
    34c4:	83 30       	cpi	r24, 0x03	; 3
    34c6:	91 05       	cpc	r25, r1
    34c8:	09 f4       	brne	.+2      	; 0x34cc <DIO_u8SetPinDirection+0x156>
    34ca:	40 c0       	rjmp	.+128    	; 0x354c <DIO_u8SetPinDirection+0x1d6>
    34cc:	54 c0       	rjmp	.+168    	; 0x3576 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
    34ce:	aa e3       	ldi	r26, 0x3A	; 58
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	ea e3       	ldi	r30, 0x3A	; 58
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	48 2f       	mov	r20, r24
    34da:	8b 81       	ldd	r24, Y+3	; 0x03
    34dc:	28 2f       	mov	r18, r24
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	02 2e       	mov	r0, r18
    34e6:	02 c0       	rjmp	.+4      	; 0x34ec <DIO_u8SetPinDirection+0x176>
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	0a 94       	dec	r0
    34ee:	e2 f7       	brpl	.-8      	; 0x34e8 <DIO_u8SetPinDirection+0x172>
    34f0:	80 95       	com	r24
    34f2:	84 23       	and	r24, r20
    34f4:	8c 93       	st	X, r24
    34f6:	47 c0       	rjmp	.+142    	; 0x3586 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
    34f8:	a7 e3       	ldi	r26, 0x37	; 55
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	e7 e3       	ldi	r30, 0x37	; 55
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	48 2f       	mov	r20, r24
    3504:	8b 81       	ldd	r24, Y+3	; 0x03
    3506:	28 2f       	mov	r18, r24
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	02 2e       	mov	r0, r18
    3510:	02 c0       	rjmp	.+4      	; 0x3516 <DIO_u8SetPinDirection+0x1a0>
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	0a 94       	dec	r0
    3518:	e2 f7       	brpl	.-8      	; 0x3512 <DIO_u8SetPinDirection+0x19c>
    351a:	80 95       	com	r24
    351c:	84 23       	and	r24, r20
    351e:	8c 93       	st	X, r24
    3520:	32 c0       	rjmp	.+100    	; 0x3586 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
    3522:	a4 e3       	ldi	r26, 0x34	; 52
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	e4 e3       	ldi	r30, 0x34	; 52
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	80 81       	ld	r24, Z
    352c:	48 2f       	mov	r20, r24
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	28 2f       	mov	r18, r24
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	02 2e       	mov	r0, r18
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <DIO_u8SetPinDirection+0x1ca>
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	0a 94       	dec	r0
    3542:	e2 f7       	brpl	.-8      	; 0x353c <DIO_u8SetPinDirection+0x1c6>
    3544:	80 95       	com	r24
    3546:	84 23       	and	r24, r20
    3548:	8c 93       	st	X, r24
    354a:	1d c0       	rjmp	.+58     	; 0x3586 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
    354c:	a1 e3       	ldi	r26, 0x31	; 49
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	e1 e3       	ldi	r30, 0x31	; 49
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	80 81       	ld	r24, Z
    3556:	48 2f       	mov	r20, r24
    3558:	8b 81       	ldd	r24, Y+3	; 0x03
    355a:	28 2f       	mov	r18, r24
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	02 2e       	mov	r0, r18
    3564:	02 c0       	rjmp	.+4      	; 0x356a <DIO_u8SetPinDirection+0x1f4>
    3566:	88 0f       	add	r24, r24
    3568:	99 1f       	adc	r25, r25
    356a:	0a 94       	dec	r0
    356c:	e2 f7       	brpl	.-8      	; 0x3566 <DIO_u8SetPinDirection+0x1f0>
    356e:	80 95       	com	r24
    3570:	84 23       	and	r24, r20
    3572:	8c 93       	st	X, r24
    3574:	08 c0       	rjmp	.+16     	; 0x3586 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	89 83       	std	Y+1, r24	; 0x01
    357a:	05 c0       	rjmp	.+10     	; 0x3586 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	89 83       	std	Y+1, r24	; 0x01
    3580:	02 c0       	rjmp	.+4      	; 0x3586 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
    3586:	89 81       	ldd	r24, Y+1	; 0x01
}
    3588:	28 96       	adiw	r28, 0x08	; 8
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	de bf       	out	0x3e, r29	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	cd bf       	out	0x3d, r28	; 61
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	08 95       	ret

0000359a <DIO_u8SetPinValue>:
 * @param Copy_u8Pin 	Pin number.
 * @param Copy_u8Value 	The new value wanted to set.
 * @return 				Error state.
 */
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	28 97       	sbiw	r28, 0x08	; 8
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	8a 83       	std	Y+2, r24	; 0x02
    35b0:	6b 83       	std	Y+3, r22	; 0x03
    35b2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    35b4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    35b6:	8b 81       	ldd	r24, Y+3	; 0x03
    35b8:	88 30       	cpi	r24, 0x08	; 8
    35ba:	08 f0       	brcs	.+2      	; 0x35be <DIO_u8SetPinValue+0x24>
    35bc:	f4 c0       	rjmp	.+488    	; 0x37a6 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    35be:	8c 81       	ldd	r24, Y+4	; 0x04
    35c0:	81 30       	cpi	r24, 0x01	; 1
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <DIO_u8SetPinValue+0x2c>
    35c4:	72 c0       	rjmp	.+228    	; 0x36aa <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    35c6:	8a 81       	ldd	r24, Y+2	; 0x02
    35c8:	28 2f       	mov	r18, r24
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	38 87       	std	Y+8, r19	; 0x08
    35ce:	2f 83       	std	Y+7, r18	; 0x07
    35d0:	8f 81       	ldd	r24, Y+7	; 0x07
    35d2:	98 85       	ldd	r25, Y+8	; 0x08
    35d4:	81 30       	cpi	r24, 0x01	; 1
    35d6:	91 05       	cpc	r25, r1
    35d8:	49 f1       	breq	.+82     	; 0x362c <DIO_u8SetPinValue+0x92>
    35da:	2f 81       	ldd	r18, Y+7	; 0x07
    35dc:	38 85       	ldd	r19, Y+8	; 0x08
    35de:	22 30       	cpi	r18, 0x02	; 2
    35e0:	31 05       	cpc	r19, r1
    35e2:	2c f4       	brge	.+10     	; 0x35ee <DIO_u8SetPinValue+0x54>
    35e4:	8f 81       	ldd	r24, Y+7	; 0x07
    35e6:	98 85       	ldd	r25, Y+8	; 0x08
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	61 f0       	breq	.+24     	; 0x3604 <DIO_u8SetPinValue+0x6a>
    35ec:	5b c0       	rjmp	.+182    	; 0x36a4 <DIO_u8SetPinValue+0x10a>
    35ee:	2f 81       	ldd	r18, Y+7	; 0x07
    35f0:	38 85       	ldd	r19, Y+8	; 0x08
    35f2:	22 30       	cpi	r18, 0x02	; 2
    35f4:	31 05       	cpc	r19, r1
    35f6:	71 f1       	breq	.+92     	; 0x3654 <DIO_u8SetPinValue+0xba>
    35f8:	8f 81       	ldd	r24, Y+7	; 0x07
    35fa:	98 85       	ldd	r25, Y+8	; 0x08
    35fc:	83 30       	cpi	r24, 0x03	; 3
    35fe:	91 05       	cpc	r25, r1
    3600:	e9 f1       	breq	.+122    	; 0x367c <DIO_u8SetPinValue+0xe2>
    3602:	50 c0       	rjmp	.+160    	; 0x36a4 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
    3604:	ab e3       	ldi	r26, 0x3B	; 59
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	eb e3       	ldi	r30, 0x3B	; 59
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	80 81       	ld	r24, Z
    360e:	48 2f       	mov	r20, r24
    3610:	8b 81       	ldd	r24, Y+3	; 0x03
    3612:	28 2f       	mov	r18, r24
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	02 2e       	mov	r0, r18
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <DIO_u8SetPinValue+0x88>
    361e:	88 0f       	add	r24, r24
    3620:	99 1f       	adc	r25, r25
    3622:	0a 94       	dec	r0
    3624:	e2 f7       	brpl	.-8      	; 0x361e <DIO_u8SetPinValue+0x84>
    3626:	84 2b       	or	r24, r20
    3628:	8c 93       	st	X, r24
    362a:	bf c0       	rjmp	.+382    	; 0x37aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
    362c:	a8 e3       	ldi	r26, 0x38	; 56
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	e8 e3       	ldi	r30, 0x38	; 56
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	48 2f       	mov	r20, r24
    3638:	8b 81       	ldd	r24, Y+3	; 0x03
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	02 2e       	mov	r0, r18
    3644:	02 c0       	rjmp	.+4      	; 0x364a <DIO_u8SetPinValue+0xb0>
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	0a 94       	dec	r0
    364c:	e2 f7       	brpl	.-8      	; 0x3646 <DIO_u8SetPinValue+0xac>
    364e:	84 2b       	or	r24, r20
    3650:	8c 93       	st	X, r24
    3652:	ab c0       	rjmp	.+342    	; 0x37aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
    3654:	a5 e3       	ldi	r26, 0x35	; 53
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	e5 e3       	ldi	r30, 0x35	; 53
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	48 2f       	mov	r20, r24
    3660:	8b 81       	ldd	r24, Y+3	; 0x03
    3662:	28 2f       	mov	r18, r24
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	02 2e       	mov	r0, r18
    366c:	02 c0       	rjmp	.+4      	; 0x3672 <DIO_u8SetPinValue+0xd8>
    366e:	88 0f       	add	r24, r24
    3670:	99 1f       	adc	r25, r25
    3672:	0a 94       	dec	r0
    3674:	e2 f7       	brpl	.-8      	; 0x366e <DIO_u8SetPinValue+0xd4>
    3676:	84 2b       	or	r24, r20
    3678:	8c 93       	st	X, r24
    367a:	97 c0       	rjmp	.+302    	; 0x37aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
    367c:	a2 e3       	ldi	r26, 0x32	; 50
    367e:	b0 e0       	ldi	r27, 0x00	; 0
    3680:	e2 e3       	ldi	r30, 0x32	; 50
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	48 2f       	mov	r20, r24
    3688:	8b 81       	ldd	r24, Y+3	; 0x03
    368a:	28 2f       	mov	r18, r24
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	02 2e       	mov	r0, r18
    3694:	02 c0       	rjmp	.+4      	; 0x369a <DIO_u8SetPinValue+0x100>
    3696:	88 0f       	add	r24, r24
    3698:	99 1f       	adc	r25, r25
    369a:	0a 94       	dec	r0
    369c:	e2 f7       	brpl	.-8      	; 0x3696 <DIO_u8SetPinValue+0xfc>
    369e:	84 2b       	or	r24, r20
    36a0:	8c 93       	st	X, r24
    36a2:	83 c0       	rjmp	.+262    	; 0x37aa <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	89 83       	std	Y+1, r24	; 0x01
    36a8:	80 c0       	rjmp	.+256    	; 0x37aa <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    36aa:	8c 81       	ldd	r24, Y+4	; 0x04
    36ac:	88 23       	and	r24, r24
    36ae:	09 f0       	breq	.+2      	; 0x36b2 <DIO_u8SetPinValue+0x118>
    36b0:	77 c0       	rjmp	.+238    	; 0x37a0 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	28 2f       	mov	r18, r24
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	3e 83       	std	Y+6, r19	; 0x06
    36ba:	2d 83       	std	Y+5, r18	; 0x05
    36bc:	8d 81       	ldd	r24, Y+5	; 0x05
    36be:	9e 81       	ldd	r25, Y+6	; 0x06
    36c0:	81 30       	cpi	r24, 0x01	; 1
    36c2:	91 05       	cpc	r25, r1
    36c4:	59 f1       	breq	.+86     	; 0x371c <DIO_u8SetPinValue+0x182>
    36c6:	2d 81       	ldd	r18, Y+5	; 0x05
    36c8:	3e 81       	ldd	r19, Y+6	; 0x06
    36ca:	22 30       	cpi	r18, 0x02	; 2
    36cc:	31 05       	cpc	r19, r1
    36ce:	2c f4       	brge	.+10     	; 0x36da <DIO_u8SetPinValue+0x140>
    36d0:	8d 81       	ldd	r24, Y+5	; 0x05
    36d2:	9e 81       	ldd	r25, Y+6	; 0x06
    36d4:	00 97       	sbiw	r24, 0x00	; 0
    36d6:	69 f0       	breq	.+26     	; 0x36f2 <DIO_u8SetPinValue+0x158>
    36d8:	60 c0       	rjmp	.+192    	; 0x379a <DIO_u8SetPinValue+0x200>
    36da:	2d 81       	ldd	r18, Y+5	; 0x05
    36dc:	3e 81       	ldd	r19, Y+6	; 0x06
    36de:	22 30       	cpi	r18, 0x02	; 2
    36e0:	31 05       	cpc	r19, r1
    36e2:	89 f1       	breq	.+98     	; 0x3746 <DIO_u8SetPinValue+0x1ac>
    36e4:	8d 81       	ldd	r24, Y+5	; 0x05
    36e6:	9e 81       	ldd	r25, Y+6	; 0x06
    36e8:	83 30       	cpi	r24, 0x03	; 3
    36ea:	91 05       	cpc	r25, r1
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <DIO_u8SetPinValue+0x156>
    36ee:	40 c0       	rjmp	.+128    	; 0x3770 <DIO_u8SetPinValue+0x1d6>
    36f0:	54 c0       	rjmp	.+168    	; 0x379a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
    36f2:	ab e3       	ldi	r26, 0x3B	; 59
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	eb e3       	ldi	r30, 0x3B	; 59
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	48 2f       	mov	r20, r24
    36fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3700:	28 2f       	mov	r18, r24
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	02 2e       	mov	r0, r18
    370a:	02 c0       	rjmp	.+4      	; 0x3710 <DIO_u8SetPinValue+0x176>
    370c:	88 0f       	add	r24, r24
    370e:	99 1f       	adc	r25, r25
    3710:	0a 94       	dec	r0
    3712:	e2 f7       	brpl	.-8      	; 0x370c <DIO_u8SetPinValue+0x172>
    3714:	80 95       	com	r24
    3716:	84 23       	and	r24, r20
    3718:	8c 93       	st	X, r24
    371a:	47 c0       	rjmp	.+142    	; 0x37aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
    371c:	a8 e3       	ldi	r26, 0x38	; 56
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	e8 e3       	ldi	r30, 0x38	; 56
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	80 81       	ld	r24, Z
    3726:	48 2f       	mov	r20, r24
    3728:	8b 81       	ldd	r24, Y+3	; 0x03
    372a:	28 2f       	mov	r18, r24
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	02 2e       	mov	r0, r18
    3734:	02 c0       	rjmp	.+4      	; 0x373a <DIO_u8SetPinValue+0x1a0>
    3736:	88 0f       	add	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	0a 94       	dec	r0
    373c:	e2 f7       	brpl	.-8      	; 0x3736 <DIO_u8SetPinValue+0x19c>
    373e:	80 95       	com	r24
    3740:	84 23       	and	r24, r20
    3742:	8c 93       	st	X, r24
    3744:	32 c0       	rjmp	.+100    	; 0x37aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
    3746:	a5 e3       	ldi	r26, 0x35	; 53
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	e5 e3       	ldi	r30, 0x35	; 53
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 81       	ld	r24, Z
    3750:	48 2f       	mov	r20, r24
    3752:	8b 81       	ldd	r24, Y+3	; 0x03
    3754:	28 2f       	mov	r18, r24
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	02 2e       	mov	r0, r18
    375e:	02 c0       	rjmp	.+4      	; 0x3764 <DIO_u8SetPinValue+0x1ca>
    3760:	88 0f       	add	r24, r24
    3762:	99 1f       	adc	r25, r25
    3764:	0a 94       	dec	r0
    3766:	e2 f7       	brpl	.-8      	; 0x3760 <DIO_u8SetPinValue+0x1c6>
    3768:	80 95       	com	r24
    376a:	84 23       	and	r24, r20
    376c:	8c 93       	st	X, r24
    376e:	1d c0       	rjmp	.+58     	; 0x37aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
    3770:	a2 e3       	ldi	r26, 0x32	; 50
    3772:	b0 e0       	ldi	r27, 0x00	; 0
    3774:	e2 e3       	ldi	r30, 0x32	; 50
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	80 81       	ld	r24, Z
    377a:	48 2f       	mov	r20, r24
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	28 2f       	mov	r18, r24
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	02 2e       	mov	r0, r18
    3788:	02 c0       	rjmp	.+4      	; 0x378e <DIO_u8SetPinValue+0x1f4>
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	0a 94       	dec	r0
    3790:	e2 f7       	brpl	.-8      	; 0x378a <DIO_u8SetPinValue+0x1f0>
    3792:	80 95       	com	r24
    3794:	84 23       	and	r24, r20
    3796:	8c 93       	st	X, r24
    3798:	08 c0       	rjmp	.+16     	; 0x37aa <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	89 83       	std	Y+1, r24	; 0x01
    379e:	05 c0       	rjmp	.+10     	; 0x37aa <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    37ac:	28 96       	adiw	r28, 0x08	; 8
    37ae:	0f b6       	in	r0, 0x3f	; 63
    37b0:	f8 94       	cli
    37b2:	de bf       	out	0x3e, r29	; 62
    37b4:	0f be       	out	0x3f, r0	; 63
    37b6:	cd bf       	out	0x3d, r28	; 61
    37b8:	cf 91       	pop	r28
    37ba:	df 91       	pop	r29
    37bc:	08 95       	ret

000037be <DIO_u8TogglePinValue>:
 * @param Copy_u8Port 	Port number on which the pin is found.
 * @param Copy_u8Pin 	Pin number.
 * @return 				Error state.
 */
uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    37be:	df 93       	push	r29
    37c0:	cf 93       	push	r28
    37c2:	00 d0       	rcall	.+0      	; 0x37c4 <DIO_u8TogglePinValue+0x6>
    37c4:	00 d0       	rcall	.+0      	; 0x37c6 <DIO_u8TogglePinValue+0x8>
    37c6:	0f 92       	push	r0
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	8a 83       	std	Y+2, r24	; 0x02
    37ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    37d0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    37d2:	8b 81       	ldd	r24, Y+3	; 0x03
    37d4:	88 30       	cpi	r24, 0x08	; 8
    37d6:	08 f0       	brcs	.+2      	; 0x37da <DIO_u8TogglePinValue+0x1c>
    37d8:	72 c0       	rjmp	.+228    	; 0x38be <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    37da:	8a 81       	ldd	r24, Y+2	; 0x02
    37dc:	28 2f       	mov	r18, r24
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	3d 83       	std	Y+5, r19	; 0x05
    37e2:	2c 83       	std	Y+4, r18	; 0x04
    37e4:	8c 81       	ldd	r24, Y+4	; 0x04
    37e6:	9d 81       	ldd	r25, Y+5	; 0x05
    37e8:	81 30       	cpi	r24, 0x01	; 1
    37ea:	91 05       	cpc	r25, r1
    37ec:	49 f1       	breq	.+82     	; 0x3840 <DIO_u8TogglePinValue+0x82>
    37ee:	2c 81       	ldd	r18, Y+4	; 0x04
    37f0:	3d 81       	ldd	r19, Y+5	; 0x05
    37f2:	22 30       	cpi	r18, 0x02	; 2
    37f4:	31 05       	cpc	r19, r1
    37f6:	2c f4       	brge	.+10     	; 0x3802 <DIO_u8TogglePinValue+0x44>
    37f8:	8c 81       	ldd	r24, Y+4	; 0x04
    37fa:	9d 81       	ldd	r25, Y+5	; 0x05
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	61 f0       	breq	.+24     	; 0x3818 <DIO_u8TogglePinValue+0x5a>
    3800:	5b c0       	rjmp	.+182    	; 0x38b8 <DIO_u8TogglePinValue+0xfa>
    3802:	2c 81       	ldd	r18, Y+4	; 0x04
    3804:	3d 81       	ldd	r19, Y+5	; 0x05
    3806:	22 30       	cpi	r18, 0x02	; 2
    3808:	31 05       	cpc	r19, r1
    380a:	71 f1       	breq	.+92     	; 0x3868 <DIO_u8TogglePinValue+0xaa>
    380c:	8c 81       	ldd	r24, Y+4	; 0x04
    380e:	9d 81       	ldd	r25, Y+5	; 0x05
    3810:	83 30       	cpi	r24, 0x03	; 3
    3812:	91 05       	cpc	r25, r1
    3814:	e9 f1       	breq	.+122    	; 0x3890 <DIO_u8TogglePinValue+0xd2>
    3816:	50 c0       	rjmp	.+160    	; 0x38b8 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
    3818:	ab e3       	ldi	r26, 0x3B	; 59
    381a:	b0 e0       	ldi	r27, 0x00	; 0
    381c:	eb e3       	ldi	r30, 0x3B	; 59
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	48 2f       	mov	r20, r24
    3824:	8b 81       	ldd	r24, Y+3	; 0x03
    3826:	28 2f       	mov	r18, r24
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	02 2e       	mov	r0, r18
    3830:	02 c0       	rjmp	.+4      	; 0x3836 <DIO_u8TogglePinValue+0x78>
    3832:	88 0f       	add	r24, r24
    3834:	99 1f       	adc	r25, r25
    3836:	0a 94       	dec	r0
    3838:	e2 f7       	brpl	.-8      	; 0x3832 <DIO_u8TogglePinValue+0x74>
    383a:	84 27       	eor	r24, r20
    383c:	8c 93       	st	X, r24
    383e:	41 c0       	rjmp	.+130    	; 0x38c2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
    3840:	a8 e3       	ldi	r26, 0x38	; 56
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	e8 e3       	ldi	r30, 0x38	; 56
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	48 2f       	mov	r20, r24
    384c:	8b 81       	ldd	r24, Y+3	; 0x03
    384e:	28 2f       	mov	r18, r24
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	02 2e       	mov	r0, r18
    3858:	02 c0       	rjmp	.+4      	; 0x385e <DIO_u8TogglePinValue+0xa0>
    385a:	88 0f       	add	r24, r24
    385c:	99 1f       	adc	r25, r25
    385e:	0a 94       	dec	r0
    3860:	e2 f7       	brpl	.-8      	; 0x385a <DIO_u8TogglePinValue+0x9c>
    3862:	84 27       	eor	r24, r20
    3864:	8c 93       	st	X, r24
    3866:	2d c0       	rjmp	.+90     	; 0x38c2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
    3868:	a5 e3       	ldi	r26, 0x35	; 53
    386a:	b0 e0       	ldi	r27, 0x00	; 0
    386c:	e5 e3       	ldi	r30, 0x35	; 53
    386e:	f0 e0       	ldi	r31, 0x00	; 0
    3870:	80 81       	ld	r24, Z
    3872:	48 2f       	mov	r20, r24
    3874:	8b 81       	ldd	r24, Y+3	; 0x03
    3876:	28 2f       	mov	r18, r24
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	02 2e       	mov	r0, r18
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <DIO_u8TogglePinValue+0xc8>
    3882:	88 0f       	add	r24, r24
    3884:	99 1f       	adc	r25, r25
    3886:	0a 94       	dec	r0
    3888:	e2 f7       	brpl	.-8      	; 0x3882 <DIO_u8TogglePinValue+0xc4>
    388a:	84 27       	eor	r24, r20
    388c:	8c 93       	st	X, r24
    388e:	19 c0       	rjmp	.+50     	; 0x38c2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
    3890:	a2 e3       	ldi	r26, 0x32	; 50
    3892:	b0 e0       	ldi	r27, 0x00	; 0
    3894:	e2 e3       	ldi	r30, 0x32	; 50
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	80 81       	ld	r24, Z
    389a:	48 2f       	mov	r20, r24
    389c:	8b 81       	ldd	r24, Y+3	; 0x03
    389e:	28 2f       	mov	r18, r24
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	02 2e       	mov	r0, r18
    38a8:	02 c0       	rjmp	.+4      	; 0x38ae <DIO_u8TogglePinValue+0xf0>
    38aa:	88 0f       	add	r24, r24
    38ac:	99 1f       	adc	r25, r25
    38ae:	0a 94       	dec	r0
    38b0:	e2 f7       	brpl	.-8      	; 0x38aa <DIO_u8TogglePinValue+0xec>
    38b2:	84 27       	eor	r24, r20
    38b4:	8c 93       	st	X, r24
    38b6:	05 c0       	rjmp	.+10     	; 0x38c2 <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	89 83       	std	Y+1, r24	; 0x01
    38bc:	02 c0       	rjmp	.+4      	; 0x38c2 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    38c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	08 95       	ret

000038d4 <DIO_u8GetPinValue>:
 * @param Copy_u8Pin 	Pin number.
 * @param Copy_pu8Value Pointer to return the value of the pin.
 * @return 				Error state.
 */
uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
    38d4:	df 93       	push	r29
    38d6:	cf 93       	push	r28
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
    38dc:	27 97       	sbiw	r28, 0x07	; 7
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	f8 94       	cli
    38e2:	de bf       	out	0x3e, r29	; 62
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	cd bf       	out	0x3d, r28	; 61
    38e8:	8a 83       	std	Y+2, r24	; 0x02
    38ea:	6b 83       	std	Y+3, r22	; 0x03
    38ec:	5d 83       	std	Y+5, r21	; 0x05
    38ee:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    38f0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    38f2:	8b 81       	ldd	r24, Y+3	; 0x03
    38f4:	88 30       	cpi	r24, 0x08	; 8
    38f6:	08 f0       	brcs	.+2      	; 0x38fa <DIO_u8GetPinValue+0x26>
    38f8:	74 c0       	rjmp	.+232    	; 0x39e2 <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    38fa:	8a 81       	ldd	r24, Y+2	; 0x02
    38fc:	28 2f       	mov	r18, r24
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	3f 83       	std	Y+7, r19	; 0x07
    3902:	2e 83       	std	Y+6, r18	; 0x06
    3904:	4e 81       	ldd	r20, Y+6	; 0x06
    3906:	5f 81       	ldd	r21, Y+7	; 0x07
    3908:	41 30       	cpi	r20, 0x01	; 1
    390a:	51 05       	cpc	r21, r1
    390c:	59 f1       	breq	.+86     	; 0x3964 <DIO_u8GetPinValue+0x90>
    390e:	8e 81       	ldd	r24, Y+6	; 0x06
    3910:	9f 81       	ldd	r25, Y+7	; 0x07
    3912:	82 30       	cpi	r24, 0x02	; 2
    3914:	91 05       	cpc	r25, r1
    3916:	34 f4       	brge	.+12     	; 0x3924 <DIO_u8GetPinValue+0x50>
    3918:	2e 81       	ldd	r18, Y+6	; 0x06
    391a:	3f 81       	ldd	r19, Y+7	; 0x07
    391c:	21 15       	cp	r18, r1
    391e:	31 05       	cpc	r19, r1
    3920:	69 f0       	breq	.+26     	; 0x393c <DIO_u8GetPinValue+0x68>
    3922:	5c c0       	rjmp	.+184    	; 0x39dc <DIO_u8GetPinValue+0x108>
    3924:	4e 81       	ldd	r20, Y+6	; 0x06
    3926:	5f 81       	ldd	r21, Y+7	; 0x07
    3928:	42 30       	cpi	r20, 0x02	; 2
    392a:	51 05       	cpc	r21, r1
    392c:	79 f1       	breq	.+94     	; 0x398c <DIO_u8GetPinValue+0xb8>
    392e:	8e 81       	ldd	r24, Y+6	; 0x06
    3930:	9f 81       	ldd	r25, Y+7	; 0x07
    3932:	83 30       	cpi	r24, 0x03	; 3
    3934:	91 05       	cpc	r25, r1
    3936:	09 f4       	brne	.+2      	; 0x393a <DIO_u8GetPinValue+0x66>
    3938:	3d c0       	rjmp	.+122    	; 0x39b4 <DIO_u8GetPinValue+0xe0>
    393a:	50 c0       	rjmp	.+160    	; 0x39dc <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
    393c:	e9 e3       	ldi	r30, 0x39	; 57
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	80 81       	ld	r24, Z
    3942:	28 2f       	mov	r18, r24
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	8b 81       	ldd	r24, Y+3	; 0x03
    3948:	88 2f       	mov	r24, r24
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	a9 01       	movw	r20, r18
    394e:	02 c0       	rjmp	.+4      	; 0x3954 <DIO_u8GetPinValue+0x80>
    3950:	55 95       	asr	r21
    3952:	47 95       	ror	r20
    3954:	8a 95       	dec	r24
    3956:	e2 f7       	brpl	.-8      	; 0x3950 <DIO_u8GetPinValue+0x7c>
    3958:	ca 01       	movw	r24, r20
    395a:	81 70       	andi	r24, 0x01	; 1
    395c:	ec 81       	ldd	r30, Y+4	; 0x04
    395e:	fd 81       	ldd	r31, Y+5	; 0x05
    3960:	80 83       	st	Z, r24
    3962:	41 c0       	rjmp	.+130    	; 0x39e6 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
    3964:	e6 e3       	ldi	r30, 0x36	; 54
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	80 81       	ld	r24, Z
    396a:	28 2f       	mov	r18, r24
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	8b 81       	ldd	r24, Y+3	; 0x03
    3970:	88 2f       	mov	r24, r24
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	a9 01       	movw	r20, r18
    3976:	02 c0       	rjmp	.+4      	; 0x397c <DIO_u8GetPinValue+0xa8>
    3978:	55 95       	asr	r21
    397a:	47 95       	ror	r20
    397c:	8a 95       	dec	r24
    397e:	e2 f7       	brpl	.-8      	; 0x3978 <DIO_u8GetPinValue+0xa4>
    3980:	ca 01       	movw	r24, r20
    3982:	81 70       	andi	r24, 0x01	; 1
    3984:	ec 81       	ldd	r30, Y+4	; 0x04
    3986:	fd 81       	ldd	r31, Y+5	; 0x05
    3988:	80 83       	st	Z, r24
    398a:	2d c0       	rjmp	.+90     	; 0x39e6 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
    398c:	e3 e3       	ldi	r30, 0x33	; 51
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	28 2f       	mov	r18, r24
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	8b 81       	ldd	r24, Y+3	; 0x03
    3998:	88 2f       	mov	r24, r24
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	a9 01       	movw	r20, r18
    399e:	02 c0       	rjmp	.+4      	; 0x39a4 <DIO_u8GetPinValue+0xd0>
    39a0:	55 95       	asr	r21
    39a2:	47 95       	ror	r20
    39a4:	8a 95       	dec	r24
    39a6:	e2 f7       	brpl	.-8      	; 0x39a0 <DIO_u8GetPinValue+0xcc>
    39a8:	ca 01       	movw	r24, r20
    39aa:	81 70       	andi	r24, 0x01	; 1
    39ac:	ec 81       	ldd	r30, Y+4	; 0x04
    39ae:	fd 81       	ldd	r31, Y+5	; 0x05
    39b0:	80 83       	st	Z, r24
    39b2:	19 c0       	rjmp	.+50     	; 0x39e6 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
    39b4:	e0 e3       	ldi	r30, 0x30	; 48
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	80 81       	ld	r24, Z
    39ba:	28 2f       	mov	r18, r24
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	8b 81       	ldd	r24, Y+3	; 0x03
    39c0:	88 2f       	mov	r24, r24
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	a9 01       	movw	r20, r18
    39c6:	02 c0       	rjmp	.+4      	; 0x39cc <DIO_u8GetPinValue+0xf8>
    39c8:	55 95       	asr	r21
    39ca:	47 95       	ror	r20
    39cc:	8a 95       	dec	r24
    39ce:	e2 f7       	brpl	.-8      	; 0x39c8 <DIO_u8GetPinValue+0xf4>
    39d0:	ca 01       	movw	r24, r20
    39d2:	81 70       	andi	r24, 0x01	; 1
    39d4:	ec 81       	ldd	r30, Y+4	; 0x04
    39d6:	fd 81       	ldd	r31, Y+5	; 0x05
    39d8:	80 83       	st	Z, r24
    39da:	05 c0       	rjmp	.+10     	; 0x39e6 <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	89 83       	std	Y+1, r24	; 0x01
    39e0:	02 c0       	rjmp	.+4      	; 0x39e6 <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    39e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    39e8:	27 96       	adiw	r28, 0x07	; 7
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61
    39f4:	cf 91       	pop	r28
    39f6:	df 91       	pop	r29
    39f8:	08 95       	ret

000039fa <DIO_u8SetPortDirection>:
 * @param Copy_u8Port		Port number.
 * @param Copy_u8Direction	Character to represent port Direction.
 * @return					Error state.
 */
uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    39fa:	df 93       	push	r29
    39fc:	cf 93       	push	r28
    39fe:	00 d0       	rcall	.+0      	; 0x3a00 <DIO_u8SetPortDirection+0x6>
    3a00:	00 d0       	rcall	.+0      	; 0x3a02 <DIO_u8SetPortDirection+0x8>
    3a02:	0f 92       	push	r0
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
    3a08:	8a 83       	std	Y+2, r24	; 0x02
    3a0a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    3a0c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	28 2f       	mov	r18, r24
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	3d 83       	std	Y+5, r19	; 0x05
    3a16:	2c 83       	std	Y+4, r18	; 0x04
    3a18:	8c 81       	ldd	r24, Y+4	; 0x04
    3a1a:	9d 81       	ldd	r25, Y+5	; 0x05
    3a1c:	81 30       	cpi	r24, 0x01	; 1
    3a1e:	91 05       	cpc	r25, r1
    3a20:	d1 f0       	breq	.+52     	; 0x3a56 <DIO_u8SetPortDirection+0x5c>
    3a22:	2c 81       	ldd	r18, Y+4	; 0x04
    3a24:	3d 81       	ldd	r19, Y+5	; 0x05
    3a26:	22 30       	cpi	r18, 0x02	; 2
    3a28:	31 05       	cpc	r19, r1
    3a2a:	2c f4       	brge	.+10     	; 0x3a36 <DIO_u8SetPortDirection+0x3c>
    3a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a30:	00 97       	sbiw	r24, 0x00	; 0
    3a32:	61 f0       	breq	.+24     	; 0x3a4c <DIO_u8SetPortDirection+0x52>
    3a34:	1f c0       	rjmp	.+62     	; 0x3a74 <DIO_u8SetPortDirection+0x7a>
    3a36:	2c 81       	ldd	r18, Y+4	; 0x04
    3a38:	3d 81       	ldd	r19, Y+5	; 0x05
    3a3a:	22 30       	cpi	r18, 0x02	; 2
    3a3c:	31 05       	cpc	r19, r1
    3a3e:	81 f0       	breq	.+32     	; 0x3a60 <DIO_u8SetPortDirection+0x66>
    3a40:	8c 81       	ldd	r24, Y+4	; 0x04
    3a42:	9d 81       	ldd	r25, Y+5	; 0x05
    3a44:	83 30       	cpi	r24, 0x03	; 3
    3a46:	91 05       	cpc	r25, r1
    3a48:	81 f0       	breq	.+32     	; 0x3a6a <DIO_u8SetPortDirection+0x70>
    3a4a:	14 c0       	rjmp	.+40     	; 0x3a74 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
    3a4c:	ea e3       	ldi	r30, 0x3A	; 58
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	8b 81       	ldd	r24, Y+3	; 0x03
    3a52:	80 83       	st	Z, r24
    3a54:	11 c0       	rjmp	.+34     	; 0x3a78 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
    3a56:	e7 e3       	ldi	r30, 0x37	; 55
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5c:	80 83       	st	Z, r24
    3a5e:	0c c0       	rjmp	.+24     	; 0x3a78 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
    3a60:	e4 e3       	ldi	r30, 0x34	; 52
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	8b 81       	ldd	r24, Y+3	; 0x03
    3a66:	80 83       	st	Z, r24
    3a68:	07 c0       	rjmp	.+14     	; 0x3a78 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
    3a6a:	e1 e3       	ldi	r30, 0x31	; 49
    3a6c:	f0 e0       	ldi	r31, 0x00	; 0
    3a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a70:	80 83       	st	Z, r24
    3a72:	02 c0       	rjmp	.+4      	; 0x3a78 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	cf 91       	pop	r28
    3a86:	df 91       	pop	r29
    3a88:	08 95       	ret

00003a8a <DIO_u8SetPortValue>:
 * @param Copy_u8Port		Port number.
 * @param Copy_u8Direction	Character to represent port value.
 * @return					Error state.
 */
uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    3a8a:	df 93       	push	r29
    3a8c:	cf 93       	push	r28
    3a8e:	00 d0       	rcall	.+0      	; 0x3a90 <DIO_u8SetPortValue+0x6>
    3a90:	00 d0       	rcall	.+0      	; 0x3a92 <DIO_u8SetPortValue+0x8>
    3a92:	0f 92       	push	r0
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
    3a98:	8a 83       	std	Y+2, r24	; 0x02
    3a9a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    3a9c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    3a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa0:	28 2f       	mov	r18, r24
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	3d 83       	std	Y+5, r19	; 0x05
    3aa6:	2c 83       	std	Y+4, r18	; 0x04
    3aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    3aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    3aac:	81 30       	cpi	r24, 0x01	; 1
    3aae:	91 05       	cpc	r25, r1
    3ab0:	d1 f0       	breq	.+52     	; 0x3ae6 <DIO_u8SetPortValue+0x5c>
    3ab2:	2c 81       	ldd	r18, Y+4	; 0x04
    3ab4:	3d 81       	ldd	r19, Y+5	; 0x05
    3ab6:	22 30       	cpi	r18, 0x02	; 2
    3ab8:	31 05       	cpc	r19, r1
    3aba:	2c f4       	brge	.+10     	; 0x3ac6 <DIO_u8SetPortValue+0x3c>
    3abc:	8c 81       	ldd	r24, Y+4	; 0x04
    3abe:	9d 81       	ldd	r25, Y+5	; 0x05
    3ac0:	00 97       	sbiw	r24, 0x00	; 0
    3ac2:	61 f0       	breq	.+24     	; 0x3adc <DIO_u8SetPortValue+0x52>
    3ac4:	1f c0       	rjmp	.+62     	; 0x3b04 <DIO_u8SetPortValue+0x7a>
    3ac6:	2c 81       	ldd	r18, Y+4	; 0x04
    3ac8:	3d 81       	ldd	r19, Y+5	; 0x05
    3aca:	22 30       	cpi	r18, 0x02	; 2
    3acc:	31 05       	cpc	r19, r1
    3ace:	81 f0       	breq	.+32     	; 0x3af0 <DIO_u8SetPortValue+0x66>
    3ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ad4:	83 30       	cpi	r24, 0x03	; 3
    3ad6:	91 05       	cpc	r25, r1
    3ad8:	81 f0       	breq	.+32     	; 0x3afa <DIO_u8SetPortValue+0x70>
    3ada:	14 c0       	rjmp	.+40     	; 0x3b04 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
    3adc:	eb e3       	ldi	r30, 0x3B	; 59
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae2:	80 83       	st	Z, r24
    3ae4:	11 c0       	rjmp	.+34     	; 0x3b08 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
    3ae6:	e8 e3       	ldi	r30, 0x38	; 56
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	8b 81       	ldd	r24, Y+3	; 0x03
    3aec:	80 83       	st	Z, r24
    3aee:	0c c0       	rjmp	.+24     	; 0x3b08 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
    3af0:	e5 e3       	ldi	r30, 0x35	; 53
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	8b 81       	ldd	r24, Y+3	; 0x03
    3af6:	80 83       	st	Z, r24
    3af8:	07 c0       	rjmp	.+14     	; 0x3b08 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
    3afa:	e2 e3       	ldi	r30, 0x32	; 50
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	8b 81       	ldd	r24, Y+3	; 0x03
    3b00:	80 83       	st	Z, r24
    3b02:	02 c0       	rjmp	.+4      	; 0x3b08 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3b08:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	0f 90       	pop	r0
    3b14:	cf 91       	pop	r28
    3b16:	df 91       	pop	r29
    3b18:	08 95       	ret

00003b1a <ADC_voidInit>:

/**
 * @brief Function to initialize ADC with prebuild configuration.
 */
void ADC_voidInit(void)
{
    3b1a:	df 93       	push	r29
    3b1c:	cf 93       	push	r28
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
#if	ADC_u8REF_VOLT == AREF_REF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif ADC_u8REF_VOLT == AVCC_REF
	SET_BIT(ADMUX,ADMUX_REFS0);
    3b22:	a7 e2       	ldi	r26, 0x27	; 39
    3b24:	b0 e0       	ldi	r27, 0x00	; 0
    3b26:	e7 e2       	ldi	r30, 0x27	; 39
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	80 81       	ld	r24, Z
    3b2c:	80 64       	ori	r24, 0x40	; 64
    3b2e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    3b30:	a7 e2       	ldi	r26, 0x27	; 39
    3b32:	b0 e0       	ldi	r27, 0x00	; 0
    3b34:	e7 e2       	ldi	r30, 0x27	; 39
    3b36:	f0 e0       	ldi	r31, 0x00	; 0
    3b38:	80 81       	ld	r24, Z
    3b3a:	8f 77       	andi	r24, 0x7F	; 127
    3b3c:	8c 93       	st	X, r24
	/*Left Adjust Result Selection*/
#if	ADC_u8RESOLUTION == EIGHT_BITS
	SET_BIT(ADMUX,ADMUX_ADLAR);

#elif ADC_u8RESOLUTION == TEN_BITS
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    3b3e:	a7 e2       	ldi	r26, 0x27	; 39
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	e7 e2       	ldi	r30, 0x27	; 39
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	8f 7d       	andi	r24, 0xDF	; 223
    3b4a:	8c 93       	st	X, r24
#error Wrong ADC_u8RESOLUTION configuration option

#endif

	/*Prescaler Selection*/
	ADCSRA = ADCSRA & PRESCALER_MASK;
    3b4c:	a6 e2       	ldi	r26, 0x26	; 38
    3b4e:	b0 e0       	ldi	r27, 0x00	; 0
    3b50:	e6 e2       	ldi	r30, 0x26	; 38
    3b52:	f0 e0       	ldi	r31, 0x00	; 0
    3b54:	80 81       	ld	r24, Z
    3b56:	88 7f       	andi	r24, 0xF8	; 248
    3b58:	8c 93       	st	X, r24
	ADCSRA = ADCSRA | ADC_u8PRESCALER_VALUE;
    3b5a:	a6 e2       	ldi	r26, 0x26	; 38
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	e6 e2       	ldi	r30, 0x26	; 38
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	80 81       	ld	r24, Z
    3b64:	87 60       	ori	r24, 0x07	; 7
    3b66:	8c 93       	st	X, r24

	/*Enable the ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    3b68:	a6 e2       	ldi	r26, 0x26	; 38
    3b6a:	b0 e0       	ldi	r27, 0x00	; 0
    3b6c:	e6 e2       	ldi	r30, 0x26	; 38
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	80 81       	ld	r24, Z
    3b72:	80 68       	ori	r24, 0x80	; 128
    3b74:	8c 93       	st	X, r24
}
    3b76:	cf 91       	pop	r28
    3b78:	df 91       	pop	r29
    3b7a:	08 95       	ret

00003b7c <ADC_u8StartConversionSynch>:
 * @param Copy_u8Channel The number of channel you want to read.
 * @param Copy_pu16Result This pointer return the reading of the channel selected.
 * @return Error State of the function.
 */
uint8 ADC_u8StartConversionSynch(uint8 Copy_u8Channel, uint16 *Copy_pu16Result)
{
    3b7c:	df 93       	push	r29
    3b7e:	cf 93       	push	r28
    3b80:	cd b7       	in	r28, 0x3d	; 61
    3b82:	de b7       	in	r29, 0x3e	; 62
    3b84:	28 97       	sbiw	r28, 0x08	; 8
    3b86:	0f b6       	in	r0, 0x3f	; 63
    3b88:	f8 94       	cli
    3b8a:	de bf       	out	0x3e, r29	; 62
    3b8c:	0f be       	out	0x3f, r0	; 63
    3b8e:	cd bf       	out	0x3d, r28	; 61
    3b90:	8e 83       	std	Y+6, r24	; 0x06
    3b92:	78 87       	std	Y+8, r23	; 0x08
    3b94:	6f 83       	std	Y+7, r22	; 0x07
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    3b96:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeoutCounter = 0u;
    3b98:	19 82       	std	Y+1, r1	; 0x01
    3b9a:	1a 82       	std	Y+2, r1	; 0x02
    3b9c:	1b 82       	std	Y+3, r1	; 0x03
    3b9e:	1c 82       	std	Y+4, r1	; 0x04

	/*Validate Copy_pu16Rsult*/
	if(Copy_pu16Result != NULL)
    3ba0:	8f 81       	ldd	r24, Y+7	; 0x07
    3ba2:	98 85       	ldd	r25, Y+8	; 0x08
    3ba4:	00 97       	sbiw	r24, 0x00	; 0
    3ba6:	09 f4       	brne	.+2      	; 0x3baa <ADC_u8StartConversionSynch+0x2e>
    3ba8:	65 c0       	rjmp	.+202    	; 0x3c74 <ADC_u8StartConversionSynch+0xf8>
	{
		if(ADC_u8BusyFlag == IDLE)
    3baa:	80 91 a4 01 	lds	r24, 0x01A4
    3bae:	88 23       	and	r24, r24
    3bb0:	09 f0       	breq	.+2      	; 0x3bb4 <ADC_u8StartConversionSynch+0x38>
    3bb2:	5d c0       	rjmp	.+186    	; 0x3c6e <ADC_u8StartConversionSynch+0xf2>
		{
			/*Inform others that adc is busy*/
			ADC_u8BusyFlag = BUSY;
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	80 93 a4 01 	sts	0x01A4, r24

			/*Set the required channel*/
			ADMUX = ADMUX & CHANNEL_MASK;
    3bba:	a7 e2       	ldi	r26, 0x27	; 39
    3bbc:	b0 e0       	ldi	r27, 0x00	; 0
    3bbe:	e7 e2       	ldi	r30, 0x27	; 39
    3bc0:	f0 e0       	ldi	r31, 0x00	; 0
    3bc2:	80 81       	ld	r24, Z
    3bc4:	80 7e       	andi	r24, 0xE0	; 224
    3bc6:	8c 93       	st	X, r24
			ADMUX = ADMUX | Copy_u8Channel;
    3bc8:	a7 e2       	ldi	r26, 0x27	; 39
    3bca:	b0 e0       	ldi	r27, 0x00	; 0
    3bcc:	e7 e2       	ldi	r30, 0x27	; 39
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	90 81       	ld	r25, Z
    3bd2:	8e 81       	ldd	r24, Y+6	; 0x06
    3bd4:	89 2b       	or	r24, r25
    3bd6:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    3bd8:	a6 e2       	ldi	r26, 0x26	; 38
    3bda:	b0 e0       	ldi	r27, 0x00	; 0
    3bdc:	e6 e2       	ldi	r30, 0x26	; 38
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	80 64       	ori	r24, 0x40	; 64
    3be4:	8c 93       	st	X, r24
    3be6:	0b c0       	rjmp	.+22     	; 0x3bfe <ADC_u8StartConversionSynch+0x82>

			/*Polling until the interrupt flag rise*/
			while((GET_BIT(ADCSRA,ADCSRA_ADIF) == 0) && (Local_u32TimeoutCounter < ADC_u32TIMEOUT))
			{
				Local_u32TimeoutCounter++;
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	9a 81       	ldd	r25, Y+2	; 0x02
    3bec:	ab 81       	ldd	r26, Y+3	; 0x03
    3bee:	bc 81       	ldd	r27, Y+4	; 0x04
    3bf0:	01 96       	adiw	r24, 0x01	; 1
    3bf2:	a1 1d       	adc	r26, r1
    3bf4:	b1 1d       	adc	r27, r1
    3bf6:	89 83       	std	Y+1, r24	; 0x01
    3bf8:	9a 83       	std	Y+2, r25	; 0x02
    3bfa:	ab 83       	std	Y+3, r26	; 0x03
    3bfc:	bc 83       	std	Y+4, r27	; 0x04

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);

			/*Polling until the interrupt flag rise*/
			while((GET_BIT(ADCSRA,ADCSRA_ADIF) == 0) && (Local_u32TimeoutCounter < ADC_u32TIMEOUT))
    3bfe:	e6 e2       	ldi	r30, 0x26	; 38
    3c00:	f0 e0       	ldi	r31, 0x00	; 0
    3c02:	80 81       	ld	r24, Z
    3c04:	82 95       	swap	r24
    3c06:	8f 70       	andi	r24, 0x0F	; 15
    3c08:	88 2f       	mov	r24, r24
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	81 70       	andi	r24, 0x01	; 1
    3c0e:	90 70       	andi	r25, 0x00	; 0
    3c10:	00 97       	sbiw	r24, 0x00	; 0
    3c12:	61 f4       	brne	.+24     	; 0x3c2c <ADC_u8StartConversionSynch+0xb0>
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	9a 81       	ldd	r25, Y+2	; 0x02
    3c18:	ab 81       	ldd	r26, Y+3	; 0x03
    3c1a:	bc 81       	ldd	r27, Y+4	; 0x04
    3c1c:	80 3a       	cpi	r24, 0xA0	; 160
    3c1e:	26 e8       	ldi	r18, 0x86	; 134
    3c20:	92 07       	cpc	r25, r18
    3c22:	21 e0       	ldi	r18, 0x01	; 1
    3c24:	a2 07       	cpc	r26, r18
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	b2 07       	cpc	r27, r18
    3c2a:	f0 f2       	brcs	.-68     	; 0x3be8 <ADC_u8StartConversionSynch+0x6c>
			{
				Local_u32TimeoutCounter++;
			}

			/*Check why the loop has been broken*/
			if(Local_u32TimeoutCounter == ADC_u32TIMEOUT)
    3c2c:	89 81       	ldd	r24, Y+1	; 0x01
    3c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c30:	ab 81       	ldd	r26, Y+3	; 0x03
    3c32:	bc 81       	ldd	r27, Y+4	; 0x04
    3c34:	80 3a       	cpi	r24, 0xA0	; 160
    3c36:	26 e8       	ldi	r18, 0x86	; 134
    3c38:	92 07       	cpc	r25, r18
    3c3a:	21 e0       	ldi	r18, 0x01	; 1
    3c3c:	a2 07       	cpc	r26, r18
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	b2 07       	cpc	r27, r18
    3c42:	19 f4       	brne	.+6      	; 0x3c4a <ADC_u8StartConversionSynch+0xce>
			{
				/*Loop is broken because the conversion exceed timeout counter*/
				Local_u8ErrorState = TIMEOUT_ERR;
    3c44:	83 e0       	ldi	r24, 0x03	; 3
    3c46:	8d 83       	std	Y+5, r24	; 0x05
    3c48:	0f c0       	rjmp	.+30     	; 0x3c68 <ADC_u8StartConversionSynch+0xec>
			else
			{
				/*Loop is broken because the conversion has been done*/

				/*Clear the conversion complete flag flag*/
				SET_BIT(ADCSRA,ADCSRA_ADIF);
    3c4a:	a6 e2       	ldi	r26, 0x26	; 38
    3c4c:	b0 e0       	ldi	r27, 0x00	; 0
    3c4e:	e6 e2       	ldi	r30, 0x26	; 38
    3c50:	f0 e0       	ldi	r31, 0x00	; 0
    3c52:	80 81       	ld	r24, Z
    3c54:	80 61       	ori	r24, 0x10	; 16
    3c56:	8c 93       	st	X, r24
				/*Return the data*/
#if ADC_u8RESOLUTION == EIGHT_BITS
				*Copy_pu16Result = ADCH;

#elif ADC_u8RESOLUTION == TEN_BITS
				*Copy_pu16Result = ADC;
    3c58:	e4 e2       	ldi	r30, 0x24	; 36
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	91 81       	ldd	r25, Z+1	; 0x01
    3c60:	ef 81       	ldd	r30, Y+7	; 0x07
    3c62:	f8 85       	ldd	r31, Y+8	; 0x08
    3c64:	91 83       	std	Z+1, r25	; 0x01
    3c66:	80 83       	st	Z, r24
#endif
			}

			/*Inform others that ADC is idle now*/
			ADC_u8BusyFlag = IDLE;
    3c68:	10 92 a4 01 	sts	0x01A4, r1
    3c6c:	05 c0       	rjmp	.+10     	; 0x3c78 <ADC_u8StartConversionSynch+0xfc>
		}
		else
		{
			/*ADC is busy now*/
			Local_u8ErrorState = BUSY_STATE_ERR;
    3c6e:	84 e0       	ldi	r24, 0x04	; 4
    3c70:	8d 83       	std	Y+5, r24	; 0x05
    3c72:	02 c0       	rjmp	.+4      	; 0x3c78 <ADC_u8StartConversionSynch+0xfc>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3c74:	82 e0       	ldi	r24, 0x02	; 2
    3c76:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    3c78:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3c7a:	28 96       	adiw	r28, 0x08	; 8
    3c7c:	0f b6       	in	r0, 0x3f	; 63
    3c7e:	f8 94       	cli
    3c80:	de bf       	out	0x3e, r29	; 62
    3c82:	0f be       	out	0x3f, r0	; 63
    3c84:	cd bf       	out	0x3d, r28	; 61
    3c86:	cf 91       	pop	r28
    3c88:	df 91       	pop	r29
    3c8a:	08 95       	ret

00003c8c <ADC_u8StartConversionAsynch>:
 * @param Copy_pu16Result This pointer return the reading of the channel selected.
 * @param Copy_pvNotificationFunc This pointer set call back the notification function from the application layer.
 * @return Error State of the function.
 */
uint8 ADC_u8StartConversionAsynch(uint8 Copy_u8Channel, uint16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
    3c8c:	df 93       	push	r29
    3c8e:	cf 93       	push	r28
    3c90:	00 d0       	rcall	.+0      	; 0x3c92 <ADC_u8StartConversionAsynch+0x6>
    3c92:	00 d0       	rcall	.+0      	; 0x3c94 <ADC_u8StartConversionAsynch+0x8>
    3c94:	00 d0       	rcall	.+0      	; 0x3c96 <ADC_u8StartConversionAsynch+0xa>
    3c96:	cd b7       	in	r28, 0x3d	; 61
    3c98:	de b7       	in	r29, 0x3e	; 62
    3c9a:	8a 83       	std	Y+2, r24	; 0x02
    3c9c:	7c 83       	std	Y+4, r23	; 0x04
    3c9e:	6b 83       	std	Y+3, r22	; 0x03
    3ca0:	5e 83       	std	Y+6, r21	; 0x06
    3ca2:	4d 83       	std	Y+5, r20	; 0x05

	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    3ca4:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Copy_pu16Rsult*/
	if((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
    3ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	d1 f1       	breq	.+116    	; 0x3d22 <ADC_u8StartConversionAsynch+0x96>
    3cae:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	b1 f1       	breq	.+108    	; 0x3d22 <ADC_u8StartConversionAsynch+0x96>
	{
		/*Check if ADC is busy or idle*/
		if(ADC_u8BusyFlag == IDLE)
    3cb6:	80 91 a4 01 	lds	r24, 0x01A4
    3cba:	88 23       	and	r24, r24
    3cbc:	79 f5       	brne	.+94     	; 0x3d1c <ADC_u8StartConversionAsynch+0x90>
		{
			/*Inform others that ADC is busy now*/
			ADC_u8BusyFlag = BUSY;
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	80 93 a4 01 	sts	0x01A4, r24

			/*Inform ISR the interrupt source*/
			ADC_u8IntSource = SINGLE_CONV_ASYNCH;
    3cc4:	10 92 a8 01 	sts	0x01A8, r1

			/*Initialize the result pointer globally*/
			ADC_pu16ConversionResult = Copy_pu16Result;
    3cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cca:	9c 81       	ldd	r25, Y+4	; 0x04
    3ccc:	90 93 a3 01 	sts	0x01A3, r25
    3cd0:	80 93 a2 01 	sts	0x01A2, r24

			/*Initialize the notification function globally*/
			ADC_pvNotificationFunc = Copy_pvNotificationFunc;
    3cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd8:	90 93 a1 01 	sts	0x01A1, r25
    3cdc:	80 93 a0 01 	sts	0x01A0, r24

			/*Set the required channel*/
			ADMUX = ADMUX & CHANNEL_MASK;
    3ce0:	a7 e2       	ldi	r26, 0x27	; 39
    3ce2:	b0 e0       	ldi	r27, 0x00	; 0
    3ce4:	e7 e2       	ldi	r30, 0x27	; 39
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	80 81       	ld	r24, Z
    3cea:	80 7e       	andi	r24, 0xE0	; 224
    3cec:	8c 93       	st	X, r24
			ADMUX = ADMUX | Copy_u8Channel;
    3cee:	a7 e2       	ldi	r26, 0x27	; 39
    3cf0:	b0 e0       	ldi	r27, 0x00	; 0
    3cf2:	e7 e2       	ldi	r30, 0x27	; 39
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	90 81       	ld	r25, Z
    3cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfa:	89 2b       	or	r24, r25
    3cfc:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    3cfe:	a6 e2       	ldi	r26, 0x26	; 38
    3d00:	b0 e0       	ldi	r27, 0x00	; 0
    3d02:	e6 e2       	ldi	r30, 0x26	; 38
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	80 81       	ld	r24, Z
    3d08:	80 64       	ori	r24, 0x40	; 64
    3d0a:	8c 93       	st	X, r24

			/*Enable ADC Conversion Complete Interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    3d0c:	a6 e2       	ldi	r26, 0x26	; 38
    3d0e:	b0 e0       	ldi	r27, 0x00	; 0
    3d10:	e6 e2       	ldi	r30, 0x26	; 38
    3d12:	f0 e0       	ldi	r31, 0x00	; 0
    3d14:	80 81       	ld	r24, Z
    3d16:	88 60       	ori	r24, 0x08	; 8
    3d18:	8c 93       	st	X, r24
    3d1a:	05 c0       	rjmp	.+10     	; 0x3d26 <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			/*ADC is busy now*/
			Local_u8ErrorState = BUSY_STATE_ERR;
    3d1c:	84 e0       	ldi	r24, 0x04	; 4
    3d1e:	89 83       	std	Y+1, r24	; 0x01
    3d20:	02 c0       	rjmp	.+4      	; 0x3d26 <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3d22:	82 e0       	ldi	r24, 0x02	; 2
    3d24:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d28:	26 96       	adiw	r28, 0x06	; 6
    3d2a:	0f b6       	in	r0, 0x3f	; 63
    3d2c:	f8 94       	cli
    3d2e:	de bf       	out	0x3e, r29	; 62
    3d30:	0f be       	out	0x3f, r0	; 63
    3d32:	cd bf       	out	0x3d, r28	; 61
    3d34:	cf 91       	pop	r28
    3d36:	df 91       	pop	r29
    3d38:	08 95       	ret

00003d3a <ADC_u8StartChainConversionAsynch>:
 * @brief Function to get the reading of a series of channels.
 * @param Copy_pstChain Pointer to struct which carry the chain data.
 * @return Error State of the function.
 */
uint8 ADC_u8StartChainConversionAsynch(ADC_ChainConv_t *Copy_pstChain)
{
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	00 d0       	rcall	.+0      	; 0x3d40 <ADC_u8StartChainConversionAsynch+0x6>
    3d40:	0f 92       	push	r0
    3d42:	cd b7       	in	r28, 0x3d	; 61
    3d44:	de b7       	in	r29, 0x3e	; 62
    3d46:	9b 83       	std	Y+3, r25	; 0x03
    3d48:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    3d4a:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers*/
	if((Copy_pstChain != NULL) && (Copy_pstChain -> ChainArr != NULL) && (Copy_pstChain -> NotificationFunc != NULL) && (Copy_pstChain -> ResultArr != NULL))
    3d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d50:	00 97       	sbiw	r24, 0x00	; 0
    3d52:	09 f4       	brne	.+2      	; 0x3d56 <ADC_u8StartChainConversionAsynch+0x1c>
    3d54:	54 c0       	rjmp	.+168    	; 0x3dfe <ADC_u8StartChainConversionAsynch+0xc4>
    3d56:	ea 81       	ldd	r30, Y+2	; 0x02
    3d58:	fb 81       	ldd	r31, Y+3	; 0x03
    3d5a:	80 81       	ld	r24, Z
    3d5c:	91 81       	ldd	r25, Z+1	; 0x01
    3d5e:	00 97       	sbiw	r24, 0x00	; 0
    3d60:	09 f4       	brne	.+2      	; 0x3d64 <ADC_u8StartChainConversionAsynch+0x2a>
    3d62:	4d c0       	rjmp	.+154    	; 0x3dfe <ADC_u8StartChainConversionAsynch+0xc4>
    3d64:	ea 81       	ldd	r30, Y+2	; 0x02
    3d66:	fb 81       	ldd	r31, Y+3	; 0x03
    3d68:	84 81       	ldd	r24, Z+4	; 0x04
    3d6a:	95 81       	ldd	r25, Z+5	; 0x05
    3d6c:	00 97       	sbiw	r24, 0x00	; 0
    3d6e:	09 f4       	brne	.+2      	; 0x3d72 <ADC_u8StartChainConversionAsynch+0x38>
    3d70:	46 c0       	rjmp	.+140    	; 0x3dfe <ADC_u8StartChainConversionAsynch+0xc4>
    3d72:	ea 81       	ldd	r30, Y+2	; 0x02
    3d74:	fb 81       	ldd	r31, Y+3	; 0x03
    3d76:	82 81       	ldd	r24, Z+2	; 0x02
    3d78:	93 81       	ldd	r25, Z+3	; 0x03
    3d7a:	00 97       	sbiw	r24, 0x00	; 0
    3d7c:	09 f4       	brne	.+2      	; 0x3d80 <ADC_u8StartChainConversionAsynch+0x46>
    3d7e:	3f c0       	rjmp	.+126    	; 0x3dfe <ADC_u8StartChainConversionAsynch+0xc4>
	{
		/*Check if ADC is busy or not*/
		if(ADC_u8BusyFlag == IDLE)
    3d80:	80 91 a4 01 	lds	r24, 0x01A4
    3d84:	88 23       	and	r24, r24
    3d86:	c9 f5       	brne	.+114    	; 0x3dfa <ADC_u8StartChainConversionAsynch+0xc0>
		{
			/*Inform others that ADC is busy now*/
			ADC_u8BusyFlag = BUSY;
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	80 93 a4 01 	sts	0x01A4, r24

			/*Inform the ISR the interrupt source*/
			ADC_u8IntSource = CHAIN_CONV_ASYNCH;
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	80 93 a8 01 	sts	0x01A8, r24

			/*Initialize the global chain data*/
			ADC_pstChainData = Copy_pstChain;
    3d94:	8a 81       	ldd	r24, Y+2	; 0x02
    3d96:	9b 81       	ldd	r25, Y+3	; 0x03
    3d98:	90 93 a6 01 	sts	0x01A6, r25
    3d9c:	80 93 a5 01 	sts	0x01A5, r24
			ADC_u8ChainChannelCounter = 0u;
    3da0:	10 92 a7 01 	sts	0x01A7, r1

			/*Set the first channel*/
			ADMUX &= CHANNEL_MASK;
    3da4:	a7 e2       	ldi	r26, 0x27	; 39
    3da6:	b0 e0       	ldi	r27, 0x00	; 0
    3da8:	e7 e2       	ldi	r30, 0x27	; 39
    3daa:	f0 e0       	ldi	r31, 0x00	; 0
    3dac:	80 81       	ld	r24, Z
    3dae:	80 7e       	andi	r24, 0xE0	; 224
    3db0:	8c 93       	st	X, r24
			ADMUX |= ADC_pstChainData -> ChainArr[ADC_u8ChainChannelCounter];
    3db2:	a7 e2       	ldi	r26, 0x27	; 39
    3db4:	b0 e0       	ldi	r27, 0x00	; 0
    3db6:	e7 e2       	ldi	r30, 0x27	; 39
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	40 81       	ld	r20, Z
    3dbc:	e0 91 a5 01 	lds	r30, 0x01A5
    3dc0:	f0 91 a6 01 	lds	r31, 0x01A6
    3dc4:	20 81       	ld	r18, Z
    3dc6:	31 81       	ldd	r19, Z+1	; 0x01
    3dc8:	80 91 a7 01 	lds	r24, 0x01A7
    3dcc:	88 2f       	mov	r24, r24
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	f9 01       	movw	r30, r18
    3dd2:	e8 0f       	add	r30, r24
    3dd4:	f9 1f       	adc	r31, r25
    3dd6:	80 81       	ld	r24, Z
    3dd8:	84 2b       	or	r24, r20
    3dda:	8c 93       	st	X, r24

			/*Start the conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    3ddc:	a6 e2       	ldi	r26, 0x26	; 38
    3dde:	b0 e0       	ldi	r27, 0x00	; 0
    3de0:	e6 e2       	ldi	r30, 0x26	; 38
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	80 81       	ld	r24, Z
    3de6:	80 64       	ori	r24, 0x40	; 64
    3de8:	8c 93       	st	X, r24

			/*Enable the ADC conversion complete interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    3dea:	a6 e2       	ldi	r26, 0x26	; 38
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
    3dee:	e6 e2       	ldi	r30, 0x26	; 38
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	80 81       	ld	r24, Z
    3df4:	88 60       	ori	r24, 0x08	; 8
    3df6:	8c 93       	st	X, r24
    3df8:	02 c0       	rjmp	.+4      	; 0x3dfe <ADC_u8StartChainConversionAsynch+0xc4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    3dfa:	84 e0       	ldi	r24, 0x04	; 4
    3dfc:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e00:	0f 90       	pop	r0
    3e02:	0f 90       	pop	r0
    3e04:	0f 90       	pop	r0
    3e06:	cf 91       	pop	r28
    3e08:	df 91       	pop	r29
    3e0a:	08 95       	ret

00003e0c <__vector_16>:
/**
 * @brief ADC Conversion Complete ISR.
 */
void __vector_16 (void) __attribute((signal));
void __vector_16 (void)
{
    3e0c:	1f 92       	push	r1
    3e0e:	0f 92       	push	r0
    3e10:	0f b6       	in	r0, 0x3f	; 63
    3e12:	0f 92       	push	r0
    3e14:	11 24       	eor	r1, r1
    3e16:	2f 93       	push	r18
    3e18:	3f 93       	push	r19
    3e1a:	4f 93       	push	r20
    3e1c:	5f 93       	push	r21
    3e1e:	6f 93       	push	r22
    3e20:	7f 93       	push	r23
    3e22:	8f 93       	push	r24
    3e24:	9f 93       	push	r25
    3e26:	af 93       	push	r26
    3e28:	bf 93       	push	r27
    3e2a:	ef 93       	push	r30
    3e2c:	ff 93       	push	r31
    3e2e:	df 93       	push	r29
    3e30:	cf 93       	push	r28
    3e32:	cd b7       	in	r28, 0x3d	; 61
    3e34:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8IntSource == SINGLE_CONV_ASYNCH)
    3e36:	80 91 a8 01 	lds	r24, 0x01A8
    3e3a:	88 23       	and	r24, r24
    3e3c:	39 f5       	brne	.+78     	; 0x3e8c <__vector_16+0x80>
	{
		if(ADC_pu16ConversionResult != NULL)
    3e3e:	80 91 a2 01 	lds	r24, 0x01A2
    3e42:	90 91 a3 01 	lds	r25, 0x01A3
    3e46:	00 97       	sbiw	r24, 0x00	; 0
    3e48:	09 f4       	brne	.+2      	; 0x3e4c <__vector_16+0x40>
    3e4a:	8d c0       	rjmp	.+282    	; 0x3f66 <__vector_16+0x15a>
			/*Return the data*/
#if ADC_u8RESOLUTION == EIGHT_BITS
			*ADC_pu16ConversionResult = ADCH;

#elif ADC_u8RESOLUTION == TEN_BITS
			*ADC_pu16ConversionResult = ADC;
    3e4c:	a0 91 a2 01 	lds	r26, 0x01A2
    3e50:	b0 91 a3 01 	lds	r27, 0x01A3
    3e54:	e4 e2       	ldi	r30, 0x24	; 36
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	80 81       	ld	r24, Z
    3e5a:	91 81       	ldd	r25, Z+1	; 0x01
    3e5c:	8d 93       	st	X+, r24
    3e5e:	9c 93       	st	X, r25
#endif

			/*Disable ADC Conversion Complete Interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    3e60:	a6 e2       	ldi	r26, 0x26	; 38
    3e62:	b0 e0       	ldi	r27, 0x00	; 0
    3e64:	e6 e2       	ldi	r30, 0x26	; 38
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	80 81       	ld	r24, Z
    3e6a:	87 7f       	andi	r24, 0xF7	; 247
    3e6c:	8c 93       	st	X, r24

			/*Inform others that ADC is idle now*/
			ADC_u8BusyFlag = IDLE;
    3e6e:	10 92 a4 01 	sts	0x01A4, r1

			/*Invoke the application notification function*/
			if(ADC_pvNotificationFunc != NULL)
    3e72:	80 91 a0 01 	lds	r24, 0x01A0
    3e76:	90 91 a1 01 	lds	r25, 0x01A1
    3e7a:	00 97       	sbiw	r24, 0x00	; 0
    3e7c:	09 f4       	brne	.+2      	; 0x3e80 <__vector_16+0x74>
    3e7e:	73 c0       	rjmp	.+230    	; 0x3f66 <__vector_16+0x15a>
			{
				ADC_pvNotificationFunc();
    3e80:	e0 91 a0 01 	lds	r30, 0x01A0
    3e84:	f0 91 a1 01 	lds	r31, 0x01A1
    3e88:	09 95       	icall
    3e8a:	6d c0       	rjmp	.+218    	; 0x3f66 <__vector_16+0x15a>
		else
		{
			/*Result pointer is assigned to NULL*/
		}
	}
	else if(ADC_u8IntSource == CHAIN_CONV_ASYNCH)
    3e8c:	80 91 a8 01 	lds	r24, 0x01A8
    3e90:	81 30       	cpi	r24, 0x01	; 1
    3e92:	09 f0       	breq	.+2      	; 0x3e96 <__vector_16+0x8a>
    3e94:	68 c0       	rjmp	.+208    	; 0x3f66 <__vector_16+0x15a>
	{
		if(ADC_pstChainData != NULL)
    3e96:	80 91 a5 01 	lds	r24, 0x01A5
    3e9a:	90 91 a6 01 	lds	r25, 0x01A6
    3e9e:	00 97       	sbiw	r24, 0x00	; 0
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <__vector_16+0x98>
    3ea2:	61 c0       	rjmp	.+194    	; 0x3f66 <__vector_16+0x15a>
			/*Return the channel result*/
#if ADC_u8RESOLUTION == EIGHT_BITS
			ADC_pstChainData -> ResultArr[ADC_u8ChainChannelCounter] = ADCH;

#elif ADC_u8RESOLUTION == TEN_BITS
			ADC_pstChainData -> ResultArr[ADC_u8ChainChannelCounter] = ADC;
    3ea4:	e0 91 a5 01 	lds	r30, 0x01A5
    3ea8:	f0 91 a6 01 	lds	r31, 0x01A6
    3eac:	22 81       	ldd	r18, Z+2	; 0x02
    3eae:	33 81       	ldd	r19, Z+3	; 0x03
    3eb0:	80 91 a7 01 	lds	r24, 0x01A7
    3eb4:	88 2f       	mov	r24, r24
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	88 0f       	add	r24, r24
    3eba:	99 1f       	adc	r25, r25
    3ebc:	d9 01       	movw	r26, r18
    3ebe:	a8 0f       	add	r26, r24
    3ec0:	b9 1f       	adc	r27, r25
    3ec2:	e4 e2       	ldi	r30, 0x24	; 36
    3ec4:	f0 e0       	ldi	r31, 0x00	; 0
    3ec6:	80 81       	ld	r24, Z
    3ec8:	91 81       	ldd	r25, Z+1	; 0x01
    3eca:	11 96       	adiw	r26, 0x01	; 1
    3ecc:	9c 93       	st	X, r25
    3ece:	8e 93       	st	-X, r24
#endif

			/*Increment the counter*/
			ADC_u8ChainChannelCounter++;
    3ed0:	80 91 a7 01 	lds	r24, 0x01A7
    3ed4:	8f 5f       	subi	r24, 0xFF	; 255
    3ed6:	80 93 a7 01 	sts	0x01A7, r24

			if(ADC_u8ChainChannelCounter < ADC_pstChainData -> ChainSize)	//Chain is not finished yet.
    3eda:	e0 91 a5 01 	lds	r30, 0x01A5
    3ede:	f0 91 a6 01 	lds	r31, 0x01A6
    3ee2:	96 81       	ldd	r25, Z+6	; 0x06
    3ee4:	80 91 a7 01 	lds	r24, 0x01A7
    3ee8:	89 17       	cp	r24, r25
    3eea:	20 f5       	brcc	.+72     	; 0x3f34 <__vector_16+0x128>
			{
				/*Set the next channel*/
				ADMUX &= CHANNEL_MASK;
    3eec:	a7 e2       	ldi	r26, 0x27	; 39
    3eee:	b0 e0       	ldi	r27, 0x00	; 0
    3ef0:	e7 e2       	ldi	r30, 0x27	; 39
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0
    3ef4:	80 81       	ld	r24, Z
    3ef6:	80 7e       	andi	r24, 0xE0	; 224
    3ef8:	8c 93       	st	X, r24
				ADMUX |= ADC_pstChainData -> ChainArr[ADC_u8ChainChannelCounter];
    3efa:	a7 e2       	ldi	r26, 0x27	; 39
    3efc:	b0 e0       	ldi	r27, 0x00	; 0
    3efe:	e7 e2       	ldi	r30, 0x27	; 39
    3f00:	f0 e0       	ldi	r31, 0x00	; 0
    3f02:	40 81       	ld	r20, Z
    3f04:	e0 91 a5 01 	lds	r30, 0x01A5
    3f08:	f0 91 a6 01 	lds	r31, 0x01A6
    3f0c:	20 81       	ld	r18, Z
    3f0e:	31 81       	ldd	r19, Z+1	; 0x01
    3f10:	80 91 a7 01 	lds	r24, 0x01A7
    3f14:	88 2f       	mov	r24, r24
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	f9 01       	movw	r30, r18
    3f1a:	e8 0f       	add	r30, r24
    3f1c:	f9 1f       	adc	r31, r25
    3f1e:	80 81       	ld	r24, Z
    3f20:	84 2b       	or	r24, r20
    3f22:	8c 93       	st	X, r24

				/*Start the next Conversion*/
				SET_BIT(ADCSRA,ADCSRA_ADSC);
    3f24:	a6 e2       	ldi	r26, 0x26	; 38
    3f26:	b0 e0       	ldi	r27, 0x00	; 0
    3f28:	e6 e2       	ldi	r30, 0x26	; 38
    3f2a:	f0 e0       	ldi	r31, 0x00	; 0
    3f2c:	80 81       	ld	r24, Z
    3f2e:	80 64       	ori	r24, 0x40	; 64
    3f30:	8c 93       	st	X, r24
    3f32:	19 c0       	rjmp	.+50     	; 0x3f66 <__vector_16+0x15a>
			}
			else 															//Chain is finished.
			{
				/*Disable ADC Conversion Complete Interrupt*/
				CLR_BIT(ADCSRA,ADCSRA_ADIE);
    3f34:	a6 e2       	ldi	r26, 0x26	; 38
    3f36:	b0 e0       	ldi	r27, 0x00	; 0
    3f38:	e6 e2       	ldi	r30, 0x26	; 38
    3f3a:	f0 e0       	ldi	r31, 0x00	; 0
    3f3c:	80 81       	ld	r24, Z
    3f3e:	87 7f       	andi	r24, 0xF7	; 247
    3f40:	8c 93       	st	X, r24

				/*Inform others that ADC is idle now*/
				ADC_u8BusyFlag = IDLE;
    3f42:	10 92 a4 01 	sts	0x01A4, r1

				/*Invoke the application notification function*/
				if(ADC_pstChainData -> NotificationFunc != NULL)
    3f46:	e0 91 a5 01 	lds	r30, 0x01A5
    3f4a:	f0 91 a6 01 	lds	r31, 0x01A6
    3f4e:	84 81       	ldd	r24, Z+4	; 0x04
    3f50:	95 81       	ldd	r25, Z+5	; 0x05
    3f52:	00 97       	sbiw	r24, 0x00	; 0
    3f54:	41 f0       	breq	.+16     	; 0x3f66 <__vector_16+0x15a>
				{
					ADC_pstChainData -> NotificationFunc();
    3f56:	e0 91 a5 01 	lds	r30, 0x01A5
    3f5a:	f0 91 a6 01 	lds	r31, 0x01A6
    3f5e:	04 80       	ldd	r0, Z+4	; 0x04
    3f60:	f5 81       	ldd	r31, Z+5	; 0x05
    3f62:	e0 2d       	mov	r30, r0
    3f64:	09 95       	icall
					/*Notification pointer is assigned to NULL*/
				}
			}
		}
	}
}
    3f66:	cf 91       	pop	r28
    3f68:	df 91       	pop	r29
    3f6a:	ff 91       	pop	r31
    3f6c:	ef 91       	pop	r30
    3f6e:	bf 91       	pop	r27
    3f70:	af 91       	pop	r26
    3f72:	9f 91       	pop	r25
    3f74:	8f 91       	pop	r24
    3f76:	7f 91       	pop	r23
    3f78:	6f 91       	pop	r22
    3f7a:	5f 91       	pop	r21
    3f7c:	4f 91       	pop	r20
    3f7e:	3f 91       	pop	r19
    3f80:	2f 91       	pop	r18
    3f82:	0f 90       	pop	r0
    3f84:	0f be       	out	0x3f, r0	; 63
    3f86:	0f 90       	pop	r0
    3f88:	1f 90       	pop	r1
    3f8a:	18 95       	reti

00003f8c <ULTSONIC_u8MeasureDistance>:
 * @param Copy_pstUltsonicData 	Pointer to struct that carry the ultrasonic data.
 * @param Copy_pu16Distance 	Pointer to return the distance in CM.
 * @return 						Error State.
 */
uint8 ULTSONIC_u8MeasureDistance(const ULTSONIC_t *Copy_pstUltsonicData, uint16 *Copy_pu16Distance)
{
    3f8c:	df 93       	push	r29
    3f8e:	cf 93       	push	r28
    3f90:	cd b7       	in	r28, 0x3d	; 61
    3f92:	de b7       	in	r29, 0x3e	; 62
    3f94:	aa 97       	sbiw	r28, 0x2a	; 42
    3f96:	0f b6       	in	r0, 0x3f	; 63
    3f98:	f8 94       	cli
    3f9a:	de bf       	out	0x3e, r29	; 62
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	cd bf       	out	0x3d, r28	; 61
    3fa0:	98 a7       	std	Y+40, r25	; 0x28
    3fa2:	8f a3       	std	Y+39, r24	; 0x27
    3fa4:	7a a7       	std	Y+42, r23	; 0x2a
    3fa6:	69 a7       	std	Y+41, r22	; 0x29
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3fa8:	1a a2       	std	Y+34, r1	; 0x22
	uint8 Local_u8ErrorFounder = OK;
    3faa:	19 a2       	std	Y+33, r1	; 0x21
	uint32 Local_u32EchoTime = 0u;
    3fac:	1d 8e       	std	Y+29, r1	; 0x1d
    3fae:	1e 8e       	std	Y+30, r1	; 0x1e
    3fb0:	1f 8e       	std	Y+31, r1	; 0x1f
    3fb2:	18 a2       	std	Y+32, r1	; 0x20
	uint32 Local_u32TimeoutCounter = 0u;
    3fb4:	19 8e       	std	Y+25, r1	; 0x19
    3fb6:	1a 8e       	std	Y+26, r1	; 0x1a
    3fb8:	1b 8e       	std	Y+27, r1	; 0x1b
    3fba:	1c 8e       	std	Y+28, r1	; 0x1c

	/*Initialize timer 1*/
	TIMER1_CFG_t Local_stTimer1Cfg;
	Local_stTimer1Cfg.ClkSelect = TIMER1_u8SYS_CLK_BY_8;
    3fbc:	82 e0       	ldi	r24, 0x02	; 2
    3fbe:	8b a3       	std	Y+35, r24	; 0x23
	Local_stTimer1Cfg.WGM = NORMAL_16_BITS;
    3fc0:	1c a2       	std	Y+36, r1	; 0x24
	Local_stTimer1Cfg.OCAMode = OC_DISCONNECTED;
    3fc2:	1d a2       	std	Y+37, r1	; 0x25
	Local_stTimer1Cfg.OCBMode = OC_DISCONNECTED;
    3fc4:	1e a2       	std	Y+38, r1	; 0x26
	Local_u8ErrorFounder = TIMER1_u8Init(&Local_stTimer1Cfg);
    3fc6:	ce 01       	movw	r24, r28
    3fc8:	83 96       	adiw	r24, 0x23	; 35
    3fca:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <TIMER1_u8Init>
    3fce:	89 a3       	std	Y+33, r24	; 0x21

	if(Local_u8ErrorFounder == OK)
    3fd0:	89 a1       	ldd	r24, Y+33	; 0x21
    3fd2:	88 23       	and	r24, r24
    3fd4:	09 f0       	breq	.+2      	; 0x3fd8 <ULTSONIC_u8MeasureDistance+0x4c>
    3fd6:	bb c1       	rjmp	.+886    	; 0x434e <ULTSONIC_u8MeasureDistance+0x3c2>
	{
		/*Initialize and Enable Capture Unit and Overflow Interrupts of timer 1*/
		TIMERS_u8SetCallBack(TIMER1_OVF, ULTSONIC_voidOvfISR);
    3fd8:	24 ee       	ldi	r18, 0xE4	; 228
    3fda:	31 e2       	ldi	r19, 0x21	; 33
    3fdc:	82 e0       	ldi	r24, 0x02	; 2
    3fde:	b9 01       	movw	r22, r18
    3fe0:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <TIMERS_u8SetCallBack>
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_RISING_EDGE);
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <TIMER1_u8SetInputCaptTriggerSrc>
		TIMERS_u8SetCallBack(TIMER1_CAPT, ULTSONIC_voidCaptureISR);
    3fea:	23 eb       	ldi	r18, 0xB3	; 179
    3fec:	31 e2       	ldi	r19, 0x21	; 33
    3fee:	85 e0       	ldi	r24, 0x05	; 5
    3ff0:	b9 01       	movw	r22, r18
    3ff2:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <TIMERS_u8SetCallBack>
		TIMERS_u8IntEnable(TIMER1_CAPT);
    3ff6:	85 e0       	ldi	r24, 0x05	; 5
    3ff8:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <TIMERS_u8IntEnable>

		/*Trigger the ultrasonic to return its echo*/
		DIO_u8SetPinValue(Copy_pstUltsonicData -> TrigPort, Copy_pstUltsonicData -> TrigPin, DIO_u8PIN_HIGH);
    3ffc:	ef a1       	ldd	r30, Y+39	; 0x27
    3ffe:	f8 a5       	ldd	r31, Y+40	; 0x28
    4000:	80 81       	ld	r24, Z
    4002:	ef a1       	ldd	r30, Y+39	; 0x27
    4004:	f8 a5       	ldd	r31, Y+40	; 0x28
    4006:	91 81       	ldd	r25, Z+1	; 0x01
    4008:	69 2f       	mov	r22, r25
    400a:	41 e0       	ldi	r20, 0x01	; 1
    400c:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
    4010:	80 e0       	ldi	r24, 0x00	; 0
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	a8 ec       	ldi	r26, 0xC8	; 200
    4016:	b2 e4       	ldi	r27, 0x42	; 66
    4018:	8d 8b       	std	Y+21, r24	; 0x15
    401a:	9e 8b       	std	Y+22, r25	; 0x16
    401c:	af 8b       	std	Y+23, r26	; 0x17
    401e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4020:	6d 89       	ldd	r22, Y+21	; 0x15
    4022:	7e 89       	ldd	r23, Y+22	; 0x16
    4024:	8f 89       	ldd	r24, Y+23	; 0x17
    4026:	98 8d       	ldd	r25, Y+24	; 0x18
    4028:	2b ea       	ldi	r18, 0xAB	; 171
    402a:	3a ea       	ldi	r19, 0xAA	; 170
    402c:	4a e2       	ldi	r20, 0x2A	; 42
    402e:	50 e4       	ldi	r21, 0x40	; 64
    4030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	89 8b       	std	Y+17, r24	; 0x11
    403a:	9a 8b       	std	Y+18, r25	; 0x12
    403c:	ab 8b       	std	Y+19, r26	; 0x13
    403e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4040:	69 89       	ldd	r22, Y+17	; 0x11
    4042:	7a 89       	ldd	r23, Y+18	; 0x12
    4044:	8b 89       	ldd	r24, Y+19	; 0x13
    4046:	9c 89       	ldd	r25, Y+20	; 0x14
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	40 e8       	ldi	r20, 0x80	; 128
    404e:	5f e3       	ldi	r21, 0x3F	; 63
    4050:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4054:	88 23       	and	r24, r24
    4056:	1c f4       	brge	.+6      	; 0x405e <ULTSONIC_u8MeasureDistance+0xd2>
		__ticks = 1;
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	88 8b       	std	Y+16, r24	; 0x10
    405c:	91 c0       	rjmp	.+290    	; 0x4180 <ULTSONIC_u8MeasureDistance+0x1f4>
	else if (__tmp > 255)
    405e:	69 89       	ldd	r22, Y+17	; 0x11
    4060:	7a 89       	ldd	r23, Y+18	; 0x12
    4062:	8b 89       	ldd	r24, Y+19	; 0x13
    4064:	9c 89       	ldd	r25, Y+20	; 0x14
    4066:	20 e0       	ldi	r18, 0x00	; 0
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	4f e7       	ldi	r20, 0x7F	; 127
    406c:	53 e4       	ldi	r21, 0x43	; 67
    406e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4072:	18 16       	cp	r1, r24
    4074:	0c f0       	brlt	.+2      	; 0x4078 <ULTSONIC_u8MeasureDistance+0xec>
    4076:	7b c0       	rjmp	.+246    	; 0x416e <ULTSONIC_u8MeasureDistance+0x1e2>
	{
		_delay_ms(__us / 1000.0);
    4078:	6d 89       	ldd	r22, Y+21	; 0x15
    407a:	7e 89       	ldd	r23, Y+22	; 0x16
    407c:	8f 89       	ldd	r24, Y+23	; 0x17
    407e:	98 8d       	ldd	r25, Y+24	; 0x18
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	4a e7       	ldi	r20, 0x7A	; 122
    4086:	54 e4       	ldi	r21, 0x44	; 68
    4088:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	8c 87       	std	Y+12, r24	; 0x0c
    4092:	9d 87       	std	Y+13, r25	; 0x0d
    4094:	ae 87       	std	Y+14, r26	; 0x0e
    4096:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4098:	6c 85       	ldd	r22, Y+12	; 0x0c
    409a:	7d 85       	ldd	r23, Y+13	; 0x0d
    409c:	8e 85       	ldd	r24, Y+14	; 0x0e
    409e:	9f 85       	ldd	r25, Y+15	; 0x0f
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	4a ef       	ldi	r20, 0xFA	; 250
    40a6:	54 e4       	ldi	r21, 0x44	; 68
    40a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	88 87       	std	Y+8, r24	; 0x08
    40b2:	99 87       	std	Y+9, r25	; 0x09
    40b4:	aa 87       	std	Y+10, r26	; 0x0a
    40b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    40b8:	68 85       	ldd	r22, Y+8	; 0x08
    40ba:	79 85       	ldd	r23, Y+9	; 0x09
    40bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    40be:	9b 85       	ldd	r25, Y+11	; 0x0b
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	40 e8       	ldi	r20, 0x80	; 128
    40c6:	5f e3       	ldi	r21, 0x3F	; 63
    40c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40cc:	88 23       	and	r24, r24
    40ce:	2c f4       	brge	.+10     	; 0x40da <ULTSONIC_u8MeasureDistance+0x14e>
		__ticks = 1;
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	9f 83       	std	Y+7, r25	; 0x07
    40d6:	8e 83       	std	Y+6, r24	; 0x06
    40d8:	3f c0       	rjmp	.+126    	; 0x4158 <ULTSONIC_u8MeasureDistance+0x1cc>
	else if (__tmp > 65535)
    40da:	68 85       	ldd	r22, Y+8	; 0x08
    40dc:	79 85       	ldd	r23, Y+9	; 0x09
    40de:	8a 85       	ldd	r24, Y+10	; 0x0a
    40e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	3f ef       	ldi	r19, 0xFF	; 255
    40e6:	4f e7       	ldi	r20, 0x7F	; 127
    40e8:	57 e4       	ldi	r21, 0x47	; 71
    40ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40ee:	18 16       	cp	r1, r24
    40f0:	4c f5       	brge	.+82     	; 0x4144 <ULTSONIC_u8MeasureDistance+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    40f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    40f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    40f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	40 e2       	ldi	r20, 0x20	; 32
    4100:	51 e4       	ldi	r21, 0x41	; 65
    4102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	bc 01       	movw	r22, r24
    410c:	cd 01       	movw	r24, r26
    410e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	9f 83       	std	Y+7, r25	; 0x07
    4118:	8e 83       	std	Y+6, r24	; 0x06
    411a:	0f c0       	rjmp	.+30     	; 0x413a <ULTSONIC_u8MeasureDistance+0x1ae>
    411c:	88 ec       	ldi	r24, 0xC8	; 200
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	9d 83       	std	Y+5, r25	; 0x05
    4122:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4124:	8c 81       	ldd	r24, Y+4	; 0x04
    4126:	9d 81       	ldd	r25, Y+5	; 0x05
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	f1 f7       	brne	.-4      	; 0x4128 <ULTSONIC_u8MeasureDistance+0x19c>
    412c:	9d 83       	std	Y+5, r25	; 0x05
    412e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4130:	8e 81       	ldd	r24, Y+6	; 0x06
    4132:	9f 81       	ldd	r25, Y+7	; 0x07
    4134:	01 97       	sbiw	r24, 0x01	; 1
    4136:	9f 83       	std	Y+7, r25	; 0x07
    4138:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    413a:	8e 81       	ldd	r24, Y+6	; 0x06
    413c:	9f 81       	ldd	r25, Y+7	; 0x07
    413e:	00 97       	sbiw	r24, 0x00	; 0
    4140:	69 f7       	brne	.-38     	; 0x411c <ULTSONIC_u8MeasureDistance+0x190>
    4142:	24 c0       	rjmp	.+72     	; 0x418c <ULTSONIC_u8MeasureDistance+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4144:	68 85       	ldd	r22, Y+8	; 0x08
    4146:	79 85       	ldd	r23, Y+9	; 0x09
    4148:	8a 85       	ldd	r24, Y+10	; 0x0a
    414a:	9b 85       	ldd	r25, Y+11	; 0x0b
    414c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	9f 83       	std	Y+7, r25	; 0x07
    4156:	8e 83       	std	Y+6, r24	; 0x06
    4158:	8e 81       	ldd	r24, Y+6	; 0x06
    415a:	9f 81       	ldd	r25, Y+7	; 0x07
    415c:	9b 83       	std	Y+3, r25	; 0x03
    415e:	8a 83       	std	Y+2, r24	; 0x02
    4160:	8a 81       	ldd	r24, Y+2	; 0x02
    4162:	9b 81       	ldd	r25, Y+3	; 0x03
    4164:	01 97       	sbiw	r24, 0x01	; 1
    4166:	f1 f7       	brne	.-4      	; 0x4164 <ULTSONIC_u8MeasureDistance+0x1d8>
    4168:	9b 83       	std	Y+3, r25	; 0x03
    416a:	8a 83       	std	Y+2, r24	; 0x02
    416c:	0f c0       	rjmp	.+30     	; 0x418c <ULTSONIC_u8MeasureDistance+0x200>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    416e:	69 89       	ldd	r22, Y+17	; 0x11
    4170:	7a 89       	ldd	r23, Y+18	; 0x12
    4172:	8b 89       	ldd	r24, Y+19	; 0x13
    4174:	9c 89       	ldd	r25, Y+20	; 0x14
    4176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    417a:	dc 01       	movw	r26, r24
    417c:	cb 01       	movw	r24, r22
    417e:	88 8b       	std	Y+16, r24	; 0x10
    4180:	88 89       	ldd	r24, Y+16	; 0x10
    4182:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4184:	89 81       	ldd	r24, Y+1	; 0x01
    4186:	8a 95       	dec	r24
    4188:	f1 f7       	brne	.-4      	; 0x4186 <ULTSONIC_u8MeasureDistance+0x1fa>
    418a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		DIO_u8SetPinValue(Copy_pstUltsonicData -> TrigPort, Copy_pstUltsonicData -> TrigPin, DIO_u8PIN_LOW);
    418c:	ef a1       	ldd	r30, Y+39	; 0x27
    418e:	f8 a5       	ldd	r31, Y+40	; 0x28
    4190:	80 81       	ld	r24, Z
    4192:	ef a1       	ldd	r30, Y+39	; 0x27
    4194:	f8 a5       	ldd	r31, Y+40	; 0x28
    4196:	91 81       	ldd	r25, Z+1	; 0x01
    4198:	69 2f       	mov	r22, r25
    419a:	40 e0       	ldi	r20, 0x00	; 0
    419c:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
    41a0:	0b c0       	rjmp	.+22     	; 0x41b8 <ULTSONIC_u8MeasureDistance+0x22c>

		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    41a2:	89 8d       	ldd	r24, Y+25	; 0x19
    41a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    41a6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    41a8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    41aa:	01 96       	adiw	r24, 0x01	; 1
    41ac:	a1 1d       	adc	r26, r1
    41ae:	b1 1d       	adc	r27, r1
    41b0:	89 8f       	std	Y+25, r24	; 0x19
    41b2:	9a 8f       	std	Y+26, r25	; 0x1a
    41b4:	ab 8f       	std	Y+27, r26	; 0x1b
    41b6:	bc 8f       	std	Y+28, r27	; 0x1c
		DIO_u8SetPinValue(Copy_pstUltsonicData -> TrigPort, Copy_pstUltsonicData -> TrigPin, DIO_u8PIN_HIGH);
		_delay_us(100);
		DIO_u8SetPinValue(Copy_pstUltsonicData -> TrigPort, Copy_pstUltsonicData -> TrigPin, DIO_u8PIN_LOW);

		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
    41b8:	80 91 a9 01 	lds	r24, 0x01A9
    41bc:	90 91 aa 01 	lds	r25, 0x01AA
    41c0:	00 97       	sbiw	r24, 0x00	; 0
    41c2:	31 f0       	breq	.+12     	; 0x41d0 <ULTSONIC_u8MeasureDistance+0x244>
    41c4:	80 91 ab 01 	lds	r24, 0x01AB
    41c8:	90 91 ac 01 	lds	r25, 0x01AC
    41cc:	00 97       	sbiw	r24, 0x00	; 0
    41ce:	61 f4       	brne	.+24     	; 0x41e8 <ULTSONIC_u8MeasureDistance+0x25c>
    41d0:	89 8d       	ldd	r24, Y+25	; 0x19
    41d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    41d4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    41d6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    41d8:	80 3e       	cpi	r24, 0xE0	; 224
    41da:	23 e9       	ldi	r18, 0x93	; 147
    41dc:	92 07       	cpc	r25, r18
    41de:	24 e0       	ldi	r18, 0x04	; 4
    41e0:	a2 07       	cpc	r26, r18
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	b2 07       	cpc	r27, r18
    41e6:	e8 f2       	brcs	.-70     	; 0x41a2 <ULTSONIC_u8MeasureDistance+0x216>
		{
			Local_u32TimeoutCounter++;
		}

		/*Disable timer 1 and overflow interrupt of it*/
		TIMERS_u8IntDisable(TIMER1_OVF);
    41e8:	82 e0       	ldi	r24, 0x02	; 2
    41ea:	0e 94 92 15 	call	0x2b24	; 0x2b24 <TIMERS_u8IntDisable>
		TIMERS_u8IntDisable(TIMER1_CAPT);
    41ee:	85 e0       	ldi	r24, 0x05	; 5
    41f0:	0e 94 92 15 	call	0x2b24	; 0x2b24 <TIMERS_u8IntDisable>
		TIMERS_u8Disable(TIMER1);
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	0e 94 19 16 	call	0x2c32	; 0x2c32 <TIMERS_u8Disable>

		/*Check if there was overflow interrupts or not*/
		if(ULTSONIC_u16EchoOvfCounter == 0u)
    41fa:	80 91 af 01 	lds	r24, 0x01AF
    41fe:	90 91 b0 01 	lds	r25, 0x01B0
    4202:	00 97       	sbiw	r24, 0x00	; 0
    4204:	a1 f4       	brne	.+40     	; 0x422e <ULTSONIC_u8MeasureDistance+0x2a2>
		{
			/*Calculate Echo Time in microseconds*/
			Local_u32EchoTime = ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1;
    4206:	20 91 ab 01 	lds	r18, 0x01AB
    420a:	30 91 ac 01 	lds	r19, 0x01AC
    420e:	80 91 a9 01 	lds	r24, 0x01A9
    4212:	90 91 aa 01 	lds	r25, 0x01AA
    4216:	a9 01       	movw	r20, r18
    4218:	48 1b       	sub	r20, r24
    421a:	59 0b       	sbc	r21, r25
    421c:	ca 01       	movw	r24, r20
    421e:	cc 01       	movw	r24, r24
    4220:	a0 e0       	ldi	r26, 0x00	; 0
    4222:	b0 e0       	ldi	r27, 0x00	; 0
    4224:	8d 8f       	std	Y+29, r24	; 0x1d
    4226:	9e 8f       	std	Y+30, r25	; 0x1e
    4228:	af 8f       	std	Y+31, r26	; 0x1f
    422a:	b8 a3       	std	Y+32, r27	; 0x20
    422c:	59 c0       	rjmp	.+178    	; 0x42e0 <ULTSONIC_u8MeasureDistance+0x354>
		}
		else
		{
			/*Calculate Echo Time in microseconds*/
			if(ULTSONIC_u16Capture2 >= ULTSONIC_u16Capture1)
    422e:	20 91 ab 01 	lds	r18, 0x01AB
    4232:	30 91 ac 01 	lds	r19, 0x01AC
    4236:	80 91 a9 01 	lds	r24, 0x01A9
    423a:	90 91 aa 01 	lds	r25, 0x01AA
    423e:	28 17       	cp	r18, r24
    4240:	39 07       	cpc	r19, r25
    4242:	10 f1       	brcs	.+68     	; 0x4288 <ULTSONIC_u8MeasureDistance+0x2fc>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    4244:	20 91 ab 01 	lds	r18, 0x01AB
    4248:	30 91 ac 01 	lds	r19, 0x01AC
    424c:	80 91 a9 01 	lds	r24, 0x01A9
    4250:	90 91 aa 01 	lds	r25, 0x01AA
    4254:	a9 01       	movw	r20, r18
    4256:	48 1b       	sub	r20, r24
    4258:	59 0b       	sbc	r21, r25
    425a:	ca 01       	movw	r24, r20
    425c:	9c 01       	movw	r18, r24
    425e:	40 e0       	ldi	r20, 0x00	; 0
    4260:	50 e0       	ldi	r21, 0x00	; 0
    4262:	80 91 af 01 	lds	r24, 0x01AF
    4266:	90 91 b0 01 	lds	r25, 0x01B0
    426a:	cc 01       	movw	r24, r24
    426c:	a0 e0       	ldi	r26, 0x00	; 0
    426e:	b0 e0       	ldi	r27, 0x00	; 0
    4270:	dc 01       	movw	r26, r24
    4272:	99 27       	eor	r25, r25
    4274:	88 27       	eor	r24, r24
    4276:	82 0f       	add	r24, r18
    4278:	93 1f       	adc	r25, r19
    427a:	a4 1f       	adc	r26, r20
    427c:	b5 1f       	adc	r27, r21
    427e:	8d 8f       	std	Y+29, r24	; 0x1d
    4280:	9e 8f       	std	Y+30, r25	; 0x1e
    4282:	af 8f       	std	Y+31, r26	; 0x1f
    4284:	b8 a3       	std	Y+32, r27	; 0x20
    4286:	2c c0       	rjmp	.+88     	; 0x42e0 <ULTSONIC_u8MeasureDistance+0x354>
			}
			else if(ULTSONIC_u16Capture2 < ULTSONIC_u16Capture1)
    4288:	20 91 ab 01 	lds	r18, 0x01AB
    428c:	30 91 ac 01 	lds	r19, 0x01AC
    4290:	80 91 a9 01 	lds	r24, 0x01A9
    4294:	90 91 aa 01 	lds	r25, 0x01AA
    4298:	28 17       	cp	r18, r24
    429a:	39 07       	cpc	r19, r25
    429c:	08 f5       	brcc	.+66     	; 0x42e0 <ULTSONIC_u8MeasureDistance+0x354>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture1 - ULTSONIC_u16Capture2) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    429e:	20 91 a9 01 	lds	r18, 0x01A9
    42a2:	30 91 aa 01 	lds	r19, 0x01AA
    42a6:	80 91 ab 01 	lds	r24, 0x01AB
    42aa:	90 91 ac 01 	lds	r25, 0x01AC
    42ae:	a9 01       	movw	r20, r18
    42b0:	48 1b       	sub	r20, r24
    42b2:	59 0b       	sbc	r21, r25
    42b4:	ca 01       	movw	r24, r20
    42b6:	9c 01       	movw	r18, r24
    42b8:	40 e0       	ldi	r20, 0x00	; 0
    42ba:	50 e0       	ldi	r21, 0x00	; 0
    42bc:	80 91 af 01 	lds	r24, 0x01AF
    42c0:	90 91 b0 01 	lds	r25, 0x01B0
    42c4:	cc 01       	movw	r24, r24
    42c6:	a0 e0       	ldi	r26, 0x00	; 0
    42c8:	b0 e0       	ldi	r27, 0x00	; 0
    42ca:	dc 01       	movw	r26, r24
    42cc:	99 27       	eor	r25, r25
    42ce:	88 27       	eor	r24, r24
    42d0:	82 0f       	add	r24, r18
    42d2:	93 1f       	adc	r25, r19
    42d4:	a4 1f       	adc	r26, r20
    42d6:	b5 1f       	adc	r27, r21
    42d8:	8d 8f       	std	Y+29, r24	; 0x1d
    42da:	9e 8f       	std	Y+30, r25	; 0x1e
    42dc:	af 8f       	std	Y+31, r26	; 0x1f
    42de:	b8 a3       	std	Y+32, r27	; 0x20
			}
		}

		/*Measure Distance using Echo Time*/
		*Copy_pu16Distance = (((f32) Local_u32EchoTime / 2.0) * (34.0 / 1000.0));
    42e0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    42e2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    42e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42e6:	98 a1       	ldd	r25, Y+32	; 0x20
    42e8:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    42ec:	dc 01       	movw	r26, r24
    42ee:	cb 01       	movw	r24, r22
    42f0:	bc 01       	movw	r22, r24
    42f2:	cd 01       	movw	r24, r26
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	40 e0       	ldi	r20, 0x00	; 0
    42fa:	50 e4       	ldi	r21, 0x40	; 64
    42fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4300:	dc 01       	movw	r26, r24
    4302:	cb 01       	movw	r24, r22
    4304:	bc 01       	movw	r22, r24
    4306:	cd 01       	movw	r24, r26
    4308:	26 e9       	ldi	r18, 0x96	; 150
    430a:	33 e4       	ldi	r19, 0x43	; 67
    430c:	4b e0       	ldi	r20, 0x0B	; 11
    430e:	5d e3       	ldi	r21, 0x3D	; 61
    4310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	bc 01       	movw	r22, r24
    431a:	cd 01       	movw	r24, r26
    431c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4320:	dc 01       	movw	r26, r24
    4322:	cb 01       	movw	r24, r22
    4324:	e9 a5       	ldd	r30, Y+41	; 0x29
    4326:	fa a5       	ldd	r31, Y+42	; 0x2a
    4328:	91 83       	std	Z+1, r25	; 0x01
    432a:	80 83       	st	Z, r24

		/*Reset the global variables*/
		ULTSONIC_u16Capture1 = 0u;
    432c:	10 92 aa 01 	sts	0x01AA, r1
    4330:	10 92 a9 01 	sts	0x01A9, r1
		ULTSONIC_u16Capture2 = 0u;
    4334:	10 92 ac 01 	sts	0x01AC, r1
    4338:	10 92 ab 01 	sts	0x01AB, r1
		ULTSONIC_u16OvfCounter = 0u;
    433c:	10 92 ae 01 	sts	0x01AE, r1
    4340:	10 92 ad 01 	sts	0x01AD, r1
		ULTSONIC_u16EchoOvfCounter = 0u;
    4344:	10 92 b0 01 	sts	0x01B0, r1
    4348:	10 92 af 01 	sts	0x01AF, r1
    434c:	02 c0       	rjmp	.+4      	; 0x4352 <ULTSONIC_u8MeasureDistance+0x3c6>
	}
	else
	{
		Local_u8ErrorState = NOK;
    434e:	81 e0       	ldi	r24, 0x01	; 1
    4350:	8a a3       	std	Y+34, r24	; 0x22
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    4352:	8a a1       	ldd	r24, Y+34	; 0x22
}
    4354:	aa 96       	adiw	r28, 0x2a	; 42
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	f8 94       	cli
    435a:	de bf       	out	0x3e, r29	; 62
    435c:	0f be       	out	0x3f, r0	; 63
    435e:	cd bf       	out	0x3d, r28	; 61
    4360:	cf 91       	pop	r28
    4362:	df 91       	pop	r29
    4364:	08 95       	ret

00004366 <ULTSONIC_voidCaptureISR>:

/**
 * @brief Function to be set as input capture ISR.
 */
static void ULTSONIC_voidCaptureISR(void)
{
    4366:	df 93       	push	r29
    4368:	cf 93       	push	r28
    436a:	cd b7       	in	r28, 0x3d	; 61
    436c:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8Counter = 0u;

	Local_u8Counter++;
    436e:	80 91 b1 01 	lds	r24, 0x01B1
    4372:	8f 5f       	subi	r24, 0xFF	; 255
    4374:	80 93 b1 01 	sts	0x01B1, r24

	if(Local_u8Counter == 1u)
    4378:	80 91 b1 01 	lds	r24, 0x01B1
    437c:	81 30       	cpi	r24, 0x01	; 1
    437e:	69 f4       	brne	.+26     	; 0x439a <ULTSONIC_voidCaptureISR+0x34>
	{
		/*Enable Overflow interrupt of timer1*/
		TIMERS_u8IntEnable(TIMER1_OVF);
    4380:	82 e0       	ldi	r24, 0x02	; 2
    4382:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <TIMERS_u8IntEnable>
		ULTSONIC_u16Capture1 = TIMER1_u16GetInputCaptValue();
    4386:	0e 94 20 17 	call	0x2e40	; 0x2e40 <TIMER1_u16GetInputCaptValue>
    438a:	90 93 aa 01 	sts	0x01AA, r25
    438e:	80 93 a9 01 	sts	0x01A9, r24
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_FALLING_EDGE);
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <TIMER1_u8SetInputCaptTriggerSrc>
    4398:	14 c0       	rjmp	.+40     	; 0x43c2 <ULTSONIC_voidCaptureISR+0x5c>
	}
	else if(Local_u8Counter == 2u)
    439a:	80 91 b1 01 	lds	r24, 0x01B1
    439e:	82 30       	cpi	r24, 0x02	; 2
    43a0:	81 f4       	brne	.+32     	; 0x43c2 <ULTSONIC_voidCaptureISR+0x5c>
	{
		ULTSONIC_u16Capture2 = TIMER1_u16GetInputCaptValue();
    43a2:	0e 94 20 17 	call	0x2e40	; 0x2e40 <TIMER1_u16GetInputCaptValue>
    43a6:	90 93 ac 01 	sts	0x01AC, r25
    43aa:	80 93 ab 01 	sts	0x01AB, r24
		ULTSONIC_u16EchoOvfCounter = ULTSONIC_u16OvfCounter;
    43ae:	80 91 ad 01 	lds	r24, 0x01AD
    43b2:	90 91 ae 01 	lds	r25, 0x01AE
    43b6:	90 93 b0 01 	sts	0x01B0, r25
    43ba:	80 93 af 01 	sts	0x01AF, r24
		Local_u8Counter = 0;
    43be:	10 92 b1 01 	sts	0x01B1, r1
	}
}
    43c2:	cf 91       	pop	r28
    43c4:	df 91       	pop	r29
    43c6:	08 95       	ret

000043c8 <ULTSONIC_voidOvfISR>:

/**
 * @brief Function to be set as overflow ISR.
 */
static void ULTSONIC_voidOvfISR(void)
{
    43c8:	df 93       	push	r29
    43ca:	cf 93       	push	r28
    43cc:	cd b7       	in	r28, 0x3d	; 61
    43ce:	de b7       	in	r29, 0x3e	; 62
	ULTSONIC_u16OvfCounter++;
    43d0:	80 91 ad 01 	lds	r24, 0x01AD
    43d4:	90 91 ae 01 	lds	r25, 0x01AE
    43d8:	01 96       	adiw	r24, 0x01	; 1
    43da:	90 93 ae 01 	sts	0x01AE, r25
    43de:	80 93 ad 01 	sts	0x01AD, r24
}
    43e2:	cf 91       	pop	r28
    43e4:	df 91       	pop	r29
    43e6:	08 95       	ret

000043e8 <MOTOR_u8RotateCW>:
 * @brief 					Function to rotate the motor in clock wise.
 * @param Copy_pstMotorInfo	Pointer to struct of the motor information.
 * @return					Error state.
 */
uint8 MOTOR_u8RotateCW(const MOTOR_t *Copy_pstMotorInfo)
{
    43e8:	df 93       	push	r29
    43ea:	cf 93       	push	r28
    43ec:	00 d0       	rcall	.+0      	; 0x43ee <MOTOR_u8RotateCW+0x6>
    43ee:	0f 92       	push	r0
    43f0:	cd b7       	in	r28, 0x3d	; 61
    43f2:	de b7       	in	r29, 0x3e	; 62
    43f4:	9b 83       	std	Y+3, r25	; 0x03
    43f6:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    43f8:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pstMotorInfo != NULL)
    43fa:	8a 81       	ldd	r24, Y+2	; 0x02
    43fc:	9b 81       	ldd	r25, Y+3	; 0x03
    43fe:	00 97       	sbiw	r24, 0x00	; 0
    4400:	a9 f0       	breq	.+42     	; 0x442c <MOTOR_u8RotateCW+0x44>
	{
		/*Set pin 1 as low, pin 2 as high*/
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin1, DIO_u8PIN_LOW);
    4402:	ea 81       	ldd	r30, Y+2	; 0x02
    4404:	fb 81       	ldd	r31, Y+3	; 0x03
    4406:	80 81       	ld	r24, Z
    4408:	ea 81       	ldd	r30, Y+2	; 0x02
    440a:	fb 81       	ldd	r31, Y+3	; 0x03
    440c:	91 81       	ldd	r25, Z+1	; 0x01
    440e:	69 2f       	mov	r22, r25
    4410:	40 e0       	ldi	r20, 0x00	; 0
    4412:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin2, DIO_u8PIN_HIGH);
    4416:	ea 81       	ldd	r30, Y+2	; 0x02
    4418:	fb 81       	ldd	r31, Y+3	; 0x03
    441a:	80 81       	ld	r24, Z
    441c:	ea 81       	ldd	r30, Y+2	; 0x02
    441e:	fb 81       	ldd	r31, Y+3	; 0x03
    4420:	92 81       	ldd	r25, Z+2	; 0x02
    4422:	69 2f       	mov	r22, r25
    4424:	41 e0       	ldi	r20, 0x01	; 1
    4426:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
    442a:	02 c0       	rjmp	.+4      	; 0x4430 <MOTOR_u8RotateCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    442c:	82 e0       	ldi	r24, 0x02	; 2
    442e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    4430:	89 81       	ldd	r24, Y+1	; 0x01
}
    4432:	0f 90       	pop	r0
    4434:	0f 90       	pop	r0
    4436:	0f 90       	pop	r0
    4438:	cf 91       	pop	r28
    443a:	df 91       	pop	r29
    443c:	08 95       	ret

0000443e <MOTOR_u8RotateCCW>:
 * @brief				 	Function to rotate the motor in counter clock wise.
 * @param Copy_pstMotorInfo	Pointer to struct of the motor information.
 * @return					Error state.
 */
uint8 MOTOR_u8RotateCCW(const MOTOR_t *Copy_pstMotorInfo)
{
    443e:	df 93       	push	r29
    4440:	cf 93       	push	r28
    4442:	00 d0       	rcall	.+0      	; 0x4444 <MOTOR_u8RotateCCW+0x6>
    4444:	0f 92       	push	r0
    4446:	cd b7       	in	r28, 0x3d	; 61
    4448:	de b7       	in	r29, 0x3e	; 62
    444a:	9b 83       	std	Y+3, r25	; 0x03
    444c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    444e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pstMotorInfo != NULL)
    4450:	8a 81       	ldd	r24, Y+2	; 0x02
    4452:	9b 81       	ldd	r25, Y+3	; 0x03
    4454:	00 97       	sbiw	r24, 0x00	; 0
    4456:	a9 f0       	breq	.+42     	; 0x4482 <MOTOR_u8RotateCCW+0x44>
	{
		/*Set pin 2 as low, pin 1 as high*/
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin2, DIO_u8PIN_LOW);
    4458:	ea 81       	ldd	r30, Y+2	; 0x02
    445a:	fb 81       	ldd	r31, Y+3	; 0x03
    445c:	80 81       	ld	r24, Z
    445e:	ea 81       	ldd	r30, Y+2	; 0x02
    4460:	fb 81       	ldd	r31, Y+3	; 0x03
    4462:	92 81       	ldd	r25, Z+2	; 0x02
    4464:	69 2f       	mov	r22, r25
    4466:	40 e0       	ldi	r20, 0x00	; 0
    4468:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin1, DIO_u8PIN_HIGH);
    446c:	ea 81       	ldd	r30, Y+2	; 0x02
    446e:	fb 81       	ldd	r31, Y+3	; 0x03
    4470:	80 81       	ld	r24, Z
    4472:	ea 81       	ldd	r30, Y+2	; 0x02
    4474:	fb 81       	ldd	r31, Y+3	; 0x03
    4476:	91 81       	ldd	r25, Z+1	; 0x01
    4478:	69 2f       	mov	r22, r25
    447a:	41 e0       	ldi	r20, 0x01	; 1
    447c:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
    4480:	02 c0       	rjmp	.+4      	; 0x4486 <MOTOR_u8RotateCCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    4482:	82 e0       	ldi	r24, 0x02	; 2
    4484:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    4486:	89 81       	ldd	r24, Y+1	; 0x01
}
    4488:	0f 90       	pop	r0
    448a:	0f 90       	pop	r0
    448c:	0f 90       	pop	r0
    448e:	cf 91       	pop	r28
    4490:	df 91       	pop	r29
    4492:	08 95       	ret

00004494 <MOTOR_u8Stop>:
 * @brief 					Function to stop the motor.
 * @param Copy_pstMotorInfo	Pointer to struct of the motor information.
 * @return					Error state.
 */
uint8 MOTOR_u8Stop(const MOTOR_t *Copy_pstMotorInfo)
{
    4494:	df 93       	push	r29
    4496:	cf 93       	push	r28
    4498:	00 d0       	rcall	.+0      	; 0x449a <MOTOR_u8Stop+0x6>
    449a:	0f 92       	push	r0
    449c:	cd b7       	in	r28, 0x3d	; 61
    449e:	de b7       	in	r29, 0x3e	; 62
    44a0:	9b 83       	std	Y+3, r25	; 0x03
    44a2:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    44a4:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pstMotorInfo != NULL)
    44a6:	8a 81       	ldd	r24, Y+2	; 0x02
    44a8:	9b 81       	ldd	r25, Y+3	; 0x03
    44aa:	00 97       	sbiw	r24, 0x00	; 0
    44ac:	a9 f0       	breq	.+42     	; 0x44d8 <MOTOR_u8Stop+0x44>
	{
		/*Set pin 1 and 2 as low*/
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin2, DIO_u8PIN_LOW);
    44ae:	ea 81       	ldd	r30, Y+2	; 0x02
    44b0:	fb 81       	ldd	r31, Y+3	; 0x03
    44b2:	80 81       	ld	r24, Z
    44b4:	ea 81       	ldd	r30, Y+2	; 0x02
    44b6:	fb 81       	ldd	r31, Y+3	; 0x03
    44b8:	92 81       	ldd	r25, Z+2	; 0x02
    44ba:	69 2f       	mov	r22, r25
    44bc:	40 e0       	ldi	r20, 0x00	; 0
    44be:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin1, DIO_u8PIN_LOW);
    44c2:	ea 81       	ldd	r30, Y+2	; 0x02
    44c4:	fb 81       	ldd	r31, Y+3	; 0x03
    44c6:	80 81       	ld	r24, Z
    44c8:	ea 81       	ldd	r30, Y+2	; 0x02
    44ca:	fb 81       	ldd	r31, Y+3	; 0x03
    44cc:	91 81       	ldd	r25, Z+1	; 0x01
    44ce:	69 2f       	mov	r22, r25
    44d0:	40 e0       	ldi	r20, 0x00	; 0
    44d2:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
    44d6:	02 c0       	rjmp	.+4      	; 0x44dc <MOTOR_u8Stop+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    44d8:	82 e0       	ldi	r24, 0x02	; 2
    44da:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    44dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    44de:	0f 90       	pop	r0
    44e0:	0f 90       	pop	r0
    44e2:	0f 90       	pop	r0
    44e4:	cf 91       	pop	r28
    44e6:	df 91       	pop	r29
    44e8:	08 95       	ret

000044ea <MCP2515_voidChipSelect>:
 * @param Copy_u8State the state of the bus.
 *
 * @return void.
 */
static void MCP2515_voidChipSelect(uint8 Copy_u8State)
{
    44ea:	df 93       	push	r29
    44ec:	cf 93       	push	r28
    44ee:	0f 92       	push	r0
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
    44f4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == SLAVE_CHOOSE)
    44f6:	89 81       	ldd	r24, Y+1	; 0x01
    44f8:	81 30       	cpi	r24, 0x01	; 1
    44fa:	31 f4       	brne	.+12     	; 0x4508 <MCP2515_voidChipSelect+0x1e>
	{
		DIO_u8SetPinValue(MCP2515_u8Slave_SELECT_PORT, MCP2515_u8Slave_SELECT_PIN, DIO_u8PIN_LOW);
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	64 e0       	ldi	r22, 0x04	; 4
    4500:	40 e0       	ldi	r20, 0x00	; 0
    4502:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
    4506:	08 c0       	rjmp	.+16     	; 0x4518 <MCP2515_voidChipSelect+0x2e>
	}
	else if(Copy_u8State == SLAVE_RELEASE)
    4508:	89 81       	ldd	r24, Y+1	; 0x01
    450a:	88 23       	and	r24, r24
    450c:	29 f4       	brne	.+10     	; 0x4518 <MCP2515_voidChipSelect+0x2e>
	{
		DIO_u8SetPinValue(MCP2515_u8Slave_SELECT_PORT, MCP2515_u8Slave_SELECT_PIN, DIO_u8PIN_HIGH);
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	64 e0       	ldi	r22, 0x04	; 4
    4512:	41 e0       	ldi	r20, 0x01	; 1
    4514:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
	}
}
    4518:	0f 90       	pop	r0
    451a:	cf 91       	pop	r28
    451c:	df 91       	pop	r29
    451e:	08 95       	ret

00004520 <MCP2515_u8ReadRegister>:

uint8 MCP2515_u8ReadRegister(uint8 Copy_u8Address)
{
    4520:	df 93       	push	r29
    4522:	cf 93       	push	r28
    4524:	00 d0       	rcall	.+0      	; 0x4526 <MCP2515_u8ReadRegister+0x6>
    4526:	cd b7       	in	r28, 0x3d	; 61
    4528:	de b7       	in	r29, 0x3e	; 62
    452a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ReadValue;

	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_READ);
    4532:	83 e0       	ldi	r24, 0x03	; 3
    4534:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Address);
    4538:	8a 81       	ldd	r24, Y+2	; 0x02
    453a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>

	Local_u8ReadValue = SPI_u8Transceive(0);
    453e:	80 e0       	ldi	r24, 0x00	; 0
    4540:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
    4544:	89 83       	std	Y+1, r24	; 0x01

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4546:	80 e0       	ldi	r24, 0x00	; 0
    4548:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	return Local_u8ReadValue;
    454c:	89 81       	ldd	r24, Y+1	; 0x01
}
    454e:	0f 90       	pop	r0
    4550:	0f 90       	pop	r0
    4552:	cf 91       	pop	r28
    4554:	df 91       	pop	r29
    4556:	08 95       	ret

00004558 <MCP2515_voidWriteRegister>:

void MCP2515_voidWriteRegister(uint8 Copy_u8Address, uint8 Copy_u8Value)
{
    4558:	df 93       	push	r29
    455a:	cf 93       	push	r28
    455c:	00 d0       	rcall	.+0      	; 0x455e <MCP2515_voidWriteRegister+0x6>
    455e:	cd b7       	in	r28, 0x3d	; 61
    4560:	de b7       	in	r29, 0x3e	; 62
    4562:	89 83       	std	Y+1, r24	; 0x01
    4564:	6a 83       	std	Y+2, r22	; 0x02
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_WRITE);
    456c:	82 e0       	ldi	r24, 0x02	; 2
    456e:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Address);
    4572:	89 81       	ldd	r24, Y+1	; 0x01
    4574:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Value);
    4578:	8a 81       	ldd	r24, Y+2	; 0x02
    457a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    457e:	80 e0       	ldi	r24, 0x00	; 0
    4580:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>
}
    4584:	0f 90       	pop	r0
    4586:	0f 90       	pop	r0
    4588:	cf 91       	pop	r28
    458a:	df 91       	pop	r29
    458c:	08 95       	ret

0000458e <MCP2515_voidSetBitTiming>:

void MCP2515_voidSetBitTiming(uint8 Copy_u8CNF1Value, uint8 Copy_u8CNF2Value, uint8 Copy_u8CNF3Value)
{
    458e:	df 93       	push	r29
    4590:	cf 93       	push	r28
    4592:	00 d0       	rcall	.+0      	; 0x4594 <MCP2515_voidSetBitTiming+0x6>
    4594:	0f 92       	push	r0
    4596:	cd b7       	in	r28, 0x3d	; 61
    4598:	de b7       	in	r29, 0x3e	; 62
    459a:	89 83       	std	Y+1, r24	; 0x01
    459c:	6a 83       	std	Y+2, r22	; 0x02
    459e:	4b 83       	std	Y+3, r20	; 0x03
	MCP2515_voidWriteRegister(CNF1, Copy_u8CNF1Value);
    45a0:	8a e2       	ldi	r24, 0x2A	; 42
    45a2:	69 81       	ldd	r22, Y+1	; 0x01
    45a4:	0e 94 ac 22 	call	0x4558	; 0x4558 <MCP2515_voidWriteRegister>
	MCP2515_voidWriteRegister(CNF2, Copy_u8CNF2Value);
    45a8:	89 e2       	ldi	r24, 0x29	; 41
    45aa:	6a 81       	ldd	r22, Y+2	; 0x02
    45ac:	0e 94 ac 22 	call	0x4558	; 0x4558 <MCP2515_voidWriteRegister>
	MCP2515_voidWriteRegister(CNF3, Copy_u8CNF3Value);
    45b0:	88 e2       	ldi	r24, 0x28	; 40
    45b2:	6b 81       	ldd	r22, Y+3	; 0x03
    45b4:	0e 94 ac 22 	call	0x4558	; 0x4558 <MCP2515_voidWriteRegister>
}
    45b8:	0f 90       	pop	r0
    45ba:	0f 90       	pop	r0
    45bc:	0f 90       	pop	r0
    45be:	cf 91       	pop	r28
    45c0:	df 91       	pop	r29
    45c2:	08 95       	ret

000045c4 <MCP2515_voidReset>:

void MCP2515_voidReset(void)
{
    45c4:	df 93       	push	r29
    45c6:	cf 93       	push	r28
    45c8:	cd b7       	in	r28, 0x3d	; 61
    45ca:	de b7       	in	r29, 0x3e	; 62
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_RESET);
    45d2:	80 ec       	ldi	r24, 0xC0	; 192
    45d4:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    45d8:	80 e0       	ldi	r24, 0x00	; 0
    45da:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>
}
    45de:	cf 91       	pop	r28
    45e0:	df 91       	pop	r29
    45e2:	08 95       	ret

000045e4 <MCP2515_voidChangeBits>:

void MCP2515_voidChangeBits(uint8 Copy_u8RegAddress, uint8 Copy_u8Mask, uint8 Copy_u8Value)
{
    45e4:	df 93       	push	r29
    45e6:	cf 93       	push	r28
    45e8:	00 d0       	rcall	.+0      	; 0x45ea <MCP2515_voidChangeBits+0x6>
    45ea:	0f 92       	push	r0
    45ec:	cd b7       	in	r28, 0x3d	; 61
    45ee:	de b7       	in	r29, 0x3e	; 62
    45f0:	89 83       	std	Y+1, r24	; 0x01
    45f2:	6a 83       	std	Y+2, r22	; 0x02
    45f4:	4b 83       	std	Y+3, r20	; 0x03
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_BIT_MODIFY);
    45fc:	85 e0       	ldi	r24, 0x05	; 5
    45fe:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8RegAddress);
    4602:	89 81       	ldd	r24, Y+1	; 0x01
    4604:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Mask);
    4608:	8a 81       	ldd	r24, Y+2	; 0x02
    460a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Value);
    460e:	8b 81       	ldd	r24, Y+3	; 0x03
    4610:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4614:	80 e0       	ldi	r24, 0x00	; 0
    4616:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>
}
    461a:	0f 90       	pop	r0
    461c:	0f 90       	pop	r0
    461e:	0f 90       	pop	r0
    4620:	cf 91       	pop	r28
    4622:	df 91       	pop	r29
    4624:	08 95       	ret

00004626 <MCP2515_voidSetMode>:

void MCP2515_voidSetMode(uint8 Copy_u8Mode)
{
    4626:	df 93       	push	r29
    4628:	cf 93       	push	r28
    462a:	0f 92       	push	r0
    462c:	cd b7       	in	r28, 0x3d	; 61
    462e:	de b7       	in	r29, 0x3e	; 62
    4630:	89 83       	std	Y+1, r24	; 0x01
	MCP2515_voidChangeBits(CANCTRL, 0xE0, Copy_u8Mode << 5);
    4632:	89 81       	ldd	r24, Y+1	; 0x01
    4634:	98 2f       	mov	r25, r24
    4636:	92 95       	swap	r25
    4638:	99 0f       	add	r25, r25
    463a:	90 7e       	andi	r25, 0xE0	; 224
    463c:	8f e0       	ldi	r24, 0x0F	; 15
    463e:	60 ee       	ldi	r22, 0xE0	; 224
    4640:	49 2f       	mov	r20, r25
    4642:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <MCP2515_voidChangeBits>
	while((MCP2515_u8ReadRegister(CANSTAT) >> 5) != Copy_u8Mode);
    4646:	8e e0       	ldi	r24, 0x0E	; 14
    4648:	0e 94 90 22 	call	0x4520	; 0x4520 <MCP2515_u8ReadRegister>
    464c:	98 2f       	mov	r25, r24
    464e:	92 95       	swap	r25
    4650:	96 95       	lsr	r25
    4652:	97 70       	andi	r25, 0x07	; 7
    4654:	89 81       	ldd	r24, Y+1	; 0x01
    4656:	98 17       	cp	r25, r24
    4658:	b1 f7       	brne	.-20     	; 0x4646 <MCP2515_voidSetMode+0x20>
}
    465a:	0f 90       	pop	r0
    465c:	cf 91       	pop	r28
    465e:	df 91       	pop	r29
    4660:	08 95       	ret

00004662 <MCP2515_voidInit>:

void MCP2515_voidInit(void)
{
    4662:	df 93       	push	r29
    4664:	cf 93       	push	r28
    4666:	cd b7       	in	r28, 0x3d	; 61
    4668:	de b7       	in	r29, 0x3e	; 62
	SPI_voidInit();
    466a:	0e 94 39 19 	call	0x3272	; 0x3272 <SPI_voidInit>
//	SPI_VidMasterInit();

	MCP2515_voidReset();
    466e:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <MCP2515_voidReset>

	/*Enter configuration mode and enable CLKOUT with no prescaler*/
	MCP2515_voidWriteRegister(CANCTRL, 0x84);
    4672:	8f e0       	ldi	r24, 0x0F	; 15
    4674:	64 e8       	ldi	r22, 0x84	; 132
    4676:	0e 94 ac 22 	call	0x4558	; 0x4558 <MCP2515_voidWriteRegister>

	while((MCP2515_u8ReadRegister(CANSTAT)>>5) != MCP2515_MODE_CONFG);
    467a:	8e e0       	ldi	r24, 0x0E	; 14
    467c:	0e 94 90 22 	call	0x4520	; 0x4520 <MCP2515_u8ReadRegister>
    4680:	82 95       	swap	r24
    4682:	86 95       	lsr	r24
    4684:	87 70       	andi	r24, 0x07	; 7
    4686:	84 30       	cpi	r24, 0x04	; 4
    4688:	c1 f7       	brne	.-16     	; 0x467a <MCP2515_voidInit+0x18>

	/*To run at 250 KHz bit rate using 8 MHz oscillator*/
	MCP2515_voidSetBitTiming((2 << 6), ((1 << 7) | (6 << 3) | (1)), 5);
    468a:	80 e8       	ldi	r24, 0x80	; 128
    468c:	61 eb       	ldi	r22, 0xB1	; 177
    468e:	45 e0       	ldi	r20, 0x05	; 5
    4690:	0e 94 c7 22 	call	0x458e	; 0x458e <MCP2515_voidSetBitTiming>

	MCP2515_voidSetMode(MCP2515_MODE_NORMAL);
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	0e 94 13 23 	call	0x4626	; 0x4626 <MCP2515_voidSetMode>
}
    469a:	cf 91       	pop	r28
    469c:	df 91       	pop	r29
    469e:	08 95       	ret

000046a0 <MCP2515_voidSendCANmsg>:



void MCP2515_voidSendCANmsg(MCP2515_CanMessage_t Copy_stMessage)
{
    46a0:	cf 92       	push	r12
    46a2:	df 92       	push	r13
    46a4:	ef 92       	push	r14
    46a6:	ff 92       	push	r15
    46a8:	0f 93       	push	r16
    46aa:	1f 93       	push	r17
    46ac:	df 93       	push	r29
    46ae:	cf 93       	push	r28
    46b0:	cd b7       	in	r28, 0x3d	; 61
    46b2:	de b7       	in	r29, 0x3e	; 62
    46b4:	2f 97       	sbiw	r28, 0x0f	; 15
    46b6:	0f b6       	in	r0, 0x3f	; 63
    46b8:	f8 94       	cli
    46ba:	de bf       	out	0x3e, r29	; 62
    46bc:	0f be       	out	0x3f, r0	; 63
    46be:	cd bf       	out	0x3d, r28	; 61
    46c0:	ca 82       	std	Y+2, r12	; 0x02
    46c2:	db 82       	std	Y+3, r13	; 0x03
    46c4:	ec 82       	std	Y+4, r14	; 0x04
    46c6:	fd 82       	std	Y+5, r15	; 0x05
    46c8:	0e 83       	std	Y+6, r16	; 0x06
    46ca:	1f 83       	std	Y+7, r17	; 0x07
    46cc:	28 87       	std	Y+8, r18	; 0x08
    46ce:	39 87       	std	Y+9, r19	; 0x09
    46d0:	4a 87       	std	Y+10, r20	; 0x0a
    46d2:	5b 87       	std	Y+11, r21	; 0x0b
    46d4:	6c 87       	std	Y+12, r22	; 0x0c
    46d6:	7d 87       	std	Y+13, r23	; 0x0d
    46d8:	8e 87       	std	Y+14, r24	; 0x0e
    46da:	9f 87       	std	Y+15, r25	; 0x0f
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	uint8 Local_u8Counter;

	/*Send header and address*/
	SPI_u8Transceive(INST_WRITE);
    46e2:	82 e0       	ldi	r24, 0x02	; 2
    46e4:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(TXB0CTRL);
    46e8:	80 e3       	ldi	r24, 0x30	; 48
    46ea:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>

	/*Setup message priority*/
	SPI_u8Transceive(3);
    46ee:	83 e0       	ldi	r24, 0x03	; 3
    46f0:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>

	/* Setup standard or extended identifier */
	SPI_u8Transceive((uint8)(Copy_stMessage.id >> 3));
    46f4:	8a 81       	ldd	r24, Y+2	; 0x02
    46f6:	9b 81       	ldd	r25, Y+3	; 0x03
    46f8:	ac 81       	ldd	r26, Y+4	; 0x04
    46fa:	bd 81       	ldd	r27, Y+5	; 0x05
    46fc:	68 94       	set
    46fe:	12 f8       	bld	r1, 2
    4700:	b6 95       	lsr	r27
    4702:	a7 95       	ror	r26
    4704:	97 95       	ror	r25
    4706:	87 95       	ror	r24
    4708:	16 94       	lsr	r1
    470a:	d1 f7       	brne	.-12     	; 0x4700 <MCP2515_voidSendCANmsg+0x60>
    470c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive((uint8)(Copy_stMessage.id << 5));
    4710:	8a 81       	ldd	r24, Y+2	; 0x02
    4712:	9b 81       	ldd	r25, Y+3	; 0x03
    4714:	ac 81       	ldd	r26, Y+4	; 0x04
    4716:	bd 81       	ldd	r27, Y+5	; 0x05
    4718:	82 95       	swap	r24
    471a:	88 0f       	add	r24, r24
    471c:	80 7e       	andi	r24, 0xE0	; 224
    471e:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(0);
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(0);
    4728:	80 e0       	ldi	r24, 0x00	; 0
    472a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>

	/* Setup message length and RTR bit */
	SPI_u8Transceive((Copy_stMessage.length) | (Copy_stMessage.properties << 6));
    472e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4730:	28 2f       	mov	r18, r24
    4732:	8f 85       	ldd	r24, Y+15	; 0x0f
    4734:	88 2f       	mov	r24, r24
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	00 24       	eor	r0, r0
    473a:	96 95       	lsr	r25
    473c:	87 95       	ror	r24
    473e:	07 94       	ror	r0
    4740:	96 95       	lsr	r25
    4742:	87 95       	ror	r24
    4744:	07 94       	ror	r0
    4746:	98 2f       	mov	r25, r24
    4748:	80 2d       	mov	r24, r0
    474a:	82 2b       	or	r24, r18
    474c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>

	/* Store the message into the buffer */
	for(Local_u8Counter = 0; Local_u8Counter < Copy_stMessage.length; Local_u8Counter++)
    4750:	19 82       	std	Y+1, r1	; 0x01
    4752:	0e c0       	rjmp	.+28     	; 0x4770 <MCP2515_voidSendCANmsg+0xd0>
	{
		SPI_u8Transceive(Copy_stMessage.data[Local_u8Counter]);
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	28 2f       	mov	r18, r24
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	ce 01       	movw	r24, r28
    475c:	06 96       	adiw	r24, 0x06	; 6
    475e:	fc 01       	movw	r30, r24
    4760:	e2 0f       	add	r30, r18
    4762:	f3 1f       	adc	r31, r19
    4764:	80 81       	ld	r24, Z
    4766:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>

	/* Setup message length and RTR bit */
	SPI_u8Transceive((Copy_stMessage.length) | (Copy_stMessage.properties << 6));

	/* Store the message into the buffer */
	for(Local_u8Counter = 0; Local_u8Counter < Copy_stMessage.length; Local_u8Counter++)
    476a:	89 81       	ldd	r24, Y+1	; 0x01
    476c:	8f 5f       	subi	r24, 0xFF	; 255
    476e:	89 83       	std	Y+1, r24	; 0x01
    4770:	9e 85       	ldd	r25, Y+14	; 0x0e
    4772:	89 81       	ldd	r24, Y+1	; 0x01
    4774:	89 17       	cp	r24, r25
    4776:	70 f3       	brcs	.-36     	; 0x4754 <MCP2515_voidSendCANmsg+0xb4>
	{
		SPI_u8Transceive(Copy_stMessage.data[Local_u8Counter]);
	}

	/*Release the bus*/
	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	/*Send request to send*/
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>
	SPI_u8Transceive(INST_RTS_TXB0);
    4784:	81 e8       	ldi	r24, 0x81	; 129
    4786:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	MCP2515_voidChipSelect(SLAVE_RELEASE);
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>
}
    4790:	2f 96       	adiw	r28, 0x0f	; 15
    4792:	0f b6       	in	r0, 0x3f	; 63
    4794:	f8 94       	cli
    4796:	de bf       	out	0x3e, r29	; 62
    4798:	0f be       	out	0x3f, r0	; 63
    479a:	cd bf       	out	0x3d, r28	; 61
    479c:	cf 91       	pop	r28
    479e:	df 91       	pop	r29
    47a0:	1f 91       	pop	r17
    47a2:	0f 91       	pop	r16
    47a4:	ff 90       	pop	r15
    47a6:	ef 90       	pop	r14
    47a8:	df 90       	pop	r13
    47aa:	cf 90       	pop	r12
    47ac:	08 95       	ret

000047ae <MCP2515_voidSetRollover>:


void MCP2515_voidSetRollover(uint8 Copy_u8Value)
{
    47ae:	df 93       	push	r29
    47b0:	cf 93       	push	r28
    47b2:	0f 92       	push	r0
    47b4:	cd b7       	in	r28, 0x3d	; 61
    47b6:	de b7       	in	r29, 0x3e	; 62
    47b8:	89 83       	std	Y+1, r24	; 0x01
	MCP2515_voidChangeBits(RXB0CTRL, 1 << BUKT, Copy_u8Value << BUKT);
    47ba:	89 81       	ldd	r24, Y+1	; 0x01
    47bc:	98 2f       	mov	r25, r24
    47be:	99 0f       	add	r25, r25
    47c0:	99 0f       	add	r25, r25
    47c2:	80 e6       	ldi	r24, 0x60	; 96
    47c4:	64 e0       	ldi	r22, 0x04	; 4
    47c6:	49 2f       	mov	r20, r25
    47c8:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <MCP2515_voidChangeBits>
}
    47cc:	0f 90       	pop	r0
    47ce:	cf 91       	pop	r28
    47d0:	df 91       	pop	r29
    47d2:	08 95       	ret

000047d4 <MCP2515_voidSetMask>:

void MCP2515_voidSetMask(uint8 Copy_u8MaskAddress, uint32 Copy_u32MaskValue, uint8 Copy_u8Extended)
{
    47d4:	df 93       	push	r29
    47d6:	cf 93       	push	r28
    47d8:	00 d0       	rcall	.+0      	; 0x47da <MCP2515_voidSetMask+0x6>
    47da:	00 d0       	rcall	.+0      	; 0x47dc <MCP2515_voidSetMask+0x8>
    47dc:	00 d0       	rcall	.+0      	; 0x47de <MCP2515_voidSetMask+0xa>
    47de:	cd b7       	in	r28, 0x3d	; 61
    47e0:	de b7       	in	r29, 0x3e	; 62
    47e2:	89 83       	std	Y+1, r24	; 0x01
    47e4:	4a 83       	std	Y+2, r20	; 0x02
    47e6:	5b 83       	std	Y+3, r21	; 0x03
    47e8:	6c 83       	std	Y+4, r22	; 0x04
    47ea:	7d 83       	std	Y+5, r23	; 0x05
    47ec:	2e 83       	std	Y+6, r18	; 0x06
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_WRITE);
    47f4:	82 e0       	ldi	r24, 0x02	; 2
    47f6:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8MaskAddress);
    47fa:	89 81       	ldd	r24, Y+1	; 0x01
    47fc:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>

	if(Copy_u8Extended)
    4800:	8e 81       	ldd	r24, Y+6	; 0x06
    4802:	88 23       	and	r24, r24
    4804:	09 f4       	brne	.+2      	; 0x4808 <MCP2515_voidSetMask+0x34>
    4806:	43 c0       	rjmp	.+134    	; 0x488e <MCP2515_voidSetMask+0xba>
	{
		/*Extended Address*/
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 3));
    4808:	8a 81       	ldd	r24, Y+2	; 0x02
    480a:	9b 81       	ldd	r25, Y+3	; 0x03
    480c:	ac 81       	ldd	r26, Y+4	; 0x04
    480e:	bd 81       	ldd	r27, Y+5	; 0x05
    4810:	68 94       	set
    4812:	12 f8       	bld	r1, 2
    4814:	b6 95       	lsr	r27
    4816:	a7 95       	ror	r26
    4818:	97 95       	ror	r25
    481a:	87 95       	ror	r24
    481c:	16 94       	lsr	r1
    481e:	d1 f7       	brne	.-12     	; 0x4814 <MCP2515_voidSetMask+0x40>
    4820:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue << 5) | (1<<3) | (uint32) (Copy_u32MaskValue >> 27));
    4824:	8a 81       	ldd	r24, Y+2	; 0x02
    4826:	28 2f       	mov	r18, r24
    4828:	22 95       	swap	r18
    482a:	22 0f       	add	r18, r18
    482c:	20 7e       	andi	r18, 0xE0	; 224
    482e:	8a 81       	ldd	r24, Y+2	; 0x02
    4830:	9b 81       	ldd	r25, Y+3	; 0x03
    4832:	ac 81       	ldd	r26, Y+4	; 0x04
    4834:	bd 81       	ldd	r27, Y+5	; 0x05
    4836:	07 2e       	mov	r0, r23
    4838:	7b e1       	ldi	r23, 0x1B	; 27
    483a:	b6 95       	lsr	r27
    483c:	a7 95       	ror	r26
    483e:	97 95       	ror	r25
    4840:	87 95       	ror	r24
    4842:	7a 95       	dec	r23
    4844:	d1 f7       	brne	.-12     	; 0x483a <MCP2515_voidSetMask+0x66>
    4846:	70 2d       	mov	r23, r0
    4848:	82 2b       	or	r24, r18
    484a:	88 60       	ori	r24, 0x08	; 8
    484c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 19));
    4850:	8a 81       	ldd	r24, Y+2	; 0x02
    4852:	9b 81       	ldd	r25, Y+3	; 0x03
    4854:	ac 81       	ldd	r26, Y+4	; 0x04
    4856:	bd 81       	ldd	r27, Y+5	; 0x05
    4858:	07 2e       	mov	r0, r23
    485a:	73 e1       	ldi	r23, 0x13	; 19
    485c:	b6 95       	lsr	r27
    485e:	a7 95       	ror	r26
    4860:	97 95       	ror	r25
    4862:	87 95       	ror	r24
    4864:	7a 95       	dec	r23
    4866:	d1 f7       	brne	.-12     	; 0x485c <MCP2515_voidSetMask+0x88>
    4868:	70 2d       	mov	r23, r0
    486a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 11));
    486e:	8a 81       	ldd	r24, Y+2	; 0x02
    4870:	9b 81       	ldd	r25, Y+3	; 0x03
    4872:	ac 81       	ldd	r26, Y+4	; 0x04
    4874:	bd 81       	ldd	r27, Y+5	; 0x05
    4876:	07 2e       	mov	r0, r23
    4878:	7b e0       	ldi	r23, 0x0B	; 11
    487a:	b6 95       	lsr	r27
    487c:	a7 95       	ror	r26
    487e:	97 95       	ror	r25
    4880:	87 95       	ror	r24
    4882:	7a 95       	dec	r23
    4884:	d1 f7       	brne	.-12     	; 0x487a <MCP2515_voidSetMask+0xa6>
    4886:	70 2d       	mov	r23, r0
    4888:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
    488c:	14 c0       	rjmp	.+40     	; 0x48b6 <MCP2515_voidSetMask+0xe2>
	}
	else
	{
		/*Standard Address*/
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 3));
    488e:	8a 81       	ldd	r24, Y+2	; 0x02
    4890:	9b 81       	ldd	r25, Y+3	; 0x03
    4892:	ac 81       	ldd	r26, Y+4	; 0x04
    4894:	bd 81       	ldd	r27, Y+5	; 0x05
    4896:	68 94       	set
    4898:	12 f8       	bld	r1, 2
    489a:	b6 95       	lsr	r27
    489c:	a7 95       	ror	r26
    489e:	97 95       	ror	r25
    48a0:	87 95       	ror	r24
    48a2:	16 94       	lsr	r1
    48a4:	d1 f7       	brne	.-12     	; 0x489a <MCP2515_voidSetMask+0xc6>
    48a6:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue << 5));
    48aa:	8a 81       	ldd	r24, Y+2	; 0x02
    48ac:	82 95       	swap	r24
    48ae:	88 0f       	add	r24, r24
    48b0:	80 7e       	andi	r24, 0xE0	; 224
    48b2:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	}

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    48b6:	80 e0       	ldi	r24, 0x00	; 0
    48b8:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>
}
    48bc:	26 96       	adiw	r28, 0x06	; 6
    48be:	0f b6       	in	r0, 0x3f	; 63
    48c0:	f8 94       	cli
    48c2:	de bf       	out	0x3e, r29	; 62
    48c4:	0f be       	out	0x3f, r0	; 63
    48c6:	cd bf       	out	0x3d, r28	; 61
    48c8:	cf 91       	pop	r28
    48ca:	df 91       	pop	r29
    48cc:	08 95       	ret

000048ce <MCP2515_voidReceiveInit>:



void MCP2515_voidReceiveInit(void)
{
    48ce:	df 93       	push	r29
    48d0:	cf 93       	push	r28
    48d2:	cd b7       	in	r28, 0x3d	; 61
    48d4:	de b7       	in	r29, 0x3e	; 62
	SPI_voidInit();
    48d6:	0e 94 39 19 	call	0x3272	; 0x3272 <SPI_voidInit>
//	SPI_VidMasterInit();

	MCP2515_voidReset();
    48da:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <MCP2515_voidReset>

	/*Enter configuration mode and enable CLKOUT with no prescaler*/
	MCP2515_voidWriteRegister(CANCTRL, 0x84);
    48de:	8f e0       	ldi	r24, 0x0F	; 15
    48e0:	64 e8       	ldi	r22, 0x84	; 132
    48e2:	0e 94 ac 22 	call	0x4558	; 0x4558 <MCP2515_voidWriteRegister>

	while((MCP2515_u8ReadRegister(CANSTAT) >> 5) != MCP2515_MODE_CONFG);
    48e6:	8e e0       	ldi	r24, 0x0E	; 14
    48e8:	0e 94 90 22 	call	0x4520	; 0x4520 <MCP2515_u8ReadRegister>
    48ec:	82 95       	swap	r24
    48ee:	86 95       	lsr	r24
    48f0:	87 70       	andi	r24, 0x07	; 7
    48f2:	84 30       	cpi	r24, 0x04	; 4
    48f4:	c1 f7       	brne	.-16     	; 0x48e6 <MCP2515_voidReceiveInit+0x18>

	/*To run at 250 KHz bit rate using 8 MHz oscillator*/
	MCP2515_voidSetBitTiming((2 << 6), (1 << 7) | (6 << 3) | (1), (5));
    48f6:	80 e8       	ldi	r24, 0x80	; 128
    48f8:	61 eb       	ldi	r22, 0xB1	; 177
    48fa:	45 e0       	ldi	r20, 0x05	; 5
    48fc:	0e 94 c7 22 	call	0x458e	; 0x458e <MCP2515_voidSetBitTiming>

	//	MCP2515_VidSetBitTiming(0, 0xAC, 0x03);
	/*Accept all messages*/
	MCP2515_voidSetMask(RXM0SIDH, 0x00000000, 1);
    4900:	80 e2       	ldi	r24, 0x20	; 32
    4902:	40 e0       	ldi	r20, 0x00	; 0
    4904:	50 e0       	ldi	r21, 0x00	; 0
    4906:	60 e0       	ldi	r22, 0x00	; 0
    4908:	70 e0       	ldi	r23, 0x00	; 0
    490a:	21 e0       	ldi	r18, 0x01	; 1
    490c:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <MCP2515_voidSetMask>
	MCP2515_voidSetMask(RXM1SIDH, 0x00000000, 1);
    4910:	84 e2       	ldi	r24, 0x24	; 36
    4912:	40 e0       	ldi	r20, 0x00	; 0
    4914:	50 e0       	ldi	r21, 0x00	; 0
    4916:	60 e0       	ldi	r22, 0x00	; 0
    4918:	70 e0       	ldi	r23, 0x00	; 0
    491a:	21 e0       	ldi	r18, 0x01	; 1
    491c:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <MCP2515_voidSetMask>
	MCP2515_voidSetRollover(1);
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	0e 94 d7 23 	call	0x47ae	; 0x47ae <MCP2515_voidSetRollover>

	MCP2515_voidWriteRegister(CANINTE, 1<<RX0IE);
    4926:	8b e2       	ldi	r24, 0x2B	; 43
    4928:	61 e0       	ldi	r22, 0x01	; 1
    492a:	0e 94 ac 22 	call	0x4558	; 0x4558 <MCP2515_voidWriteRegister>

	MCP2515_voidSetMode(MCP2515_MODE_NORMAL);
    492e:	80 e0       	ldi	r24, 0x00	; 0
    4930:	0e 94 13 23 	call	0x4626	; 0x4626 <MCP2515_voidSetMode>
}
    4934:	cf 91       	pop	r28
    4936:	df 91       	pop	r29
    4938:	08 95       	ret

0000493a <MCP2515_stReceiveCANmsg>:

uint8 MCP2515_u8ReadBuffer[14];

MCP2515_CanMessage_t MCP2515_stReceiveCANmsg(void)
{
    493a:	0f 93       	push	r16
    493c:	1f 93       	push	r17
    493e:	df 93       	push	r29
    4940:	cf 93       	push	r28
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
    4946:	67 97       	sbiw	r28, 0x17	; 23
    4948:	0f b6       	in	r0, 0x3f	; 63
    494a:	f8 94       	cli
    494c:	de bf       	out	0x3e, r29	; 62
    494e:	0f be       	out	0x3f, r0	; 63
    4950:	cd bf       	out	0x3d, r28	; 61
    4952:	9a 8b       	std	Y+18, r25	; 0x12
    4954:	89 8b       	std	Y+17, r24	; 0x11
	MCP2515_CanMessage_t Local_stReceive = {0};
    4956:	8e e0       	ldi	r24, 0x0E	; 14
    4958:	fe 01       	movw	r30, r28
    495a:	33 96       	adiw	r30, 0x03	; 3
    495c:	df 01       	movw	r26, r30
    495e:	98 2f       	mov	r25, r24
    4960:	1d 92       	st	X+, r1
    4962:	9a 95       	dec	r25
    4964:	e9 f7       	brne	.-6      	; 0x4960 <MCP2515_stReceiveCANmsg+0x26>
	uint8 Local_u8Counter = 0;
    4966:	1a 82       	std	Y+2, r1	; 0x02

	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4968:	81 e0       	ldi	r24, 0x01	; 1
    496a:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_READ);
    496e:	83 e0       	ldi	r24, 0x03	; 3
    4970:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(RXB0CTRL);
    4974:	80 e6       	ldi	r24, 0x60	; 96
    4976:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>


	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    497a:	1a 82       	std	Y+2, r1	; 0x02
    497c:	0d c0       	rjmp	.+26     	; 0x4998 <MCP2515_stReceiveCANmsg+0x5e>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
    497e:	8a 81       	ldd	r24, Y+2	; 0x02
    4980:	08 2f       	mov	r16, r24
    4982:	10 e0       	ldi	r17, 0x00	; 0
    4984:	80 e0       	ldi	r24, 0x00	; 0
    4986:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
    498a:	f8 01       	movw	r30, r16
    498c:	ee 54       	subi	r30, 0x4E	; 78
    498e:	fe 4f       	sbci	r31, 0xFE	; 254
    4990:	80 83       	st	Z, r24

	SPI_u8Transceive(INST_READ);
	SPI_u8Transceive(RXB0CTRL);


	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    4992:	8a 81       	ldd	r24, Y+2	; 0x02
    4994:	8f 5f       	subi	r24, 0xFF	; 255
    4996:	8a 83       	std	Y+2, r24	; 0x02
    4998:	8a 81       	ldd	r24, Y+2	; 0x02
    499a:	8e 30       	cpi	r24, 0x0E	; 14
    499c:	80 f3       	brcs	.-32     	; 0x497e <MCP2515_stReceiveCANmsg+0x44>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
	}

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    499e:	80 e0       	ldi	r24, 0x00	; 0
    49a0:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	MCP2515_voidWriteRegister(CANINTF, 0);
    49a4:	8c e2       	ldi	r24, 0x2C	; 44
    49a6:	60 e0       	ldi	r22, 0x00	; 0
    49a8:	0e 94 ac 22 	call	0x4558	; 0x4558 <MCP2515_voidWriteRegister>

	Local_stReceive.id = MCP2515_u8ReadBuffer[1];
    49ac:	80 91 b3 01 	lds	r24, 0x01B3
    49b0:	88 2f       	mov	r24, r24
    49b2:	90 e0       	ldi	r25, 0x00	; 0
    49b4:	a0 e0       	ldi	r26, 0x00	; 0
    49b6:	b0 e0       	ldi	r27, 0x00	; 0
    49b8:	8b 83       	std	Y+3, r24	; 0x03
    49ba:	9c 83       	std	Y+4, r25	; 0x04
    49bc:	ad 83       	std	Y+5, r26	; 0x05
    49be:	be 83       	std	Y+6, r27	; 0x06
	Local_stReceive.id = Local_stReceive.id << 3;
    49c0:	8b 81       	ldd	r24, Y+3	; 0x03
    49c2:	9c 81       	ldd	r25, Y+4	; 0x04
    49c4:	ad 81       	ldd	r26, Y+5	; 0x05
    49c6:	be 81       	ldd	r27, Y+6	; 0x06
    49c8:	88 0f       	add	r24, r24
    49ca:	99 1f       	adc	r25, r25
    49cc:	aa 1f       	adc	r26, r26
    49ce:	bb 1f       	adc	r27, r27
    49d0:	88 0f       	add	r24, r24
    49d2:	99 1f       	adc	r25, r25
    49d4:	aa 1f       	adc	r26, r26
    49d6:	bb 1f       	adc	r27, r27
    49d8:	88 0f       	add	r24, r24
    49da:	99 1f       	adc	r25, r25
    49dc:	aa 1f       	adc	r26, r26
    49de:	bb 1f       	adc	r27, r27
    49e0:	8b 83       	std	Y+3, r24	; 0x03
    49e2:	9c 83       	std	Y+4, r25	; 0x04
    49e4:	ad 83       	std	Y+5, r26	; 0x05
    49e6:	be 83       	std	Y+6, r27	; 0x06
	uint8 Local_u8Hegazy = MCP2515_u8ReadBuffer[2];
    49e8:	80 91 b4 01 	lds	r24, 0x01B4
    49ec:	89 83       	std	Y+1, r24	; 0x01
	Local_stReceive.id |= Local_u8Hegazy >> 5;
    49ee:	2b 81       	ldd	r18, Y+3	; 0x03
    49f0:	3c 81       	ldd	r19, Y+4	; 0x04
    49f2:	4d 81       	ldd	r20, Y+5	; 0x05
    49f4:	5e 81       	ldd	r21, Y+6	; 0x06
    49f6:	89 81       	ldd	r24, Y+1	; 0x01
    49f8:	82 95       	swap	r24
    49fa:	86 95       	lsr	r24
    49fc:	87 70       	andi	r24, 0x07	; 7
    49fe:	88 2f       	mov	r24, r24
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	a0 e0       	ldi	r26, 0x00	; 0
    4a04:	b0 e0       	ldi	r27, 0x00	; 0
    4a06:	82 2b       	or	r24, r18
    4a08:	93 2b       	or	r25, r19
    4a0a:	a4 2b       	or	r26, r20
    4a0c:	b5 2b       	or	r27, r21
    4a0e:	8b 83       	std	Y+3, r24	; 0x03
    4a10:	9c 83       	std	Y+4, r25	; 0x04
    4a12:	ad 83       	std	Y+5, r26	; 0x05
    4a14:	be 83       	std	Y+6, r27	; 0x06
	Local_stReceive.length = MCP2515_u8ReadBuffer[5] & 0x0F;
    4a16:	80 91 b7 01 	lds	r24, 0x01B7
    4a1a:	8f 70       	andi	r24, 0x0F	; 15
    4a1c:	8f 87       	std	Y+15, r24	; 0x0f

	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    4a1e:	1a 82       	std	Y+2, r1	; 0x02
    4a20:	14 c0       	rjmp	.+40     	; 0x4a4a <MCP2515_stReceiveCANmsg+0x110>
	{
		Local_stReceive.data[Local_u8Counter] = MCP2515_u8ReadBuffer[6 + Local_u8Counter];
    4a22:	8a 81       	ldd	r24, Y+2	; 0x02
    4a24:	48 2f       	mov	r20, r24
    4a26:	50 e0       	ldi	r21, 0x00	; 0
    4a28:	8a 81       	ldd	r24, Y+2	; 0x02
    4a2a:	88 2f       	mov	r24, r24
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	06 96       	adiw	r24, 0x06	; 6
    4a30:	fc 01       	movw	r30, r24
    4a32:	ee 54       	subi	r30, 0x4E	; 78
    4a34:	fe 4f       	sbci	r31, 0xFE	; 254
    4a36:	20 81       	ld	r18, Z
    4a38:	ce 01       	movw	r24, r28
    4a3a:	07 96       	adiw	r24, 0x07	; 7
    4a3c:	fc 01       	movw	r30, r24
    4a3e:	e4 0f       	add	r30, r20
    4a40:	f5 1f       	adc	r31, r21
    4a42:	20 83       	st	Z, r18
	Local_stReceive.id = Local_stReceive.id << 3;
	uint8 Local_u8Hegazy = MCP2515_u8ReadBuffer[2];
	Local_stReceive.id |= Local_u8Hegazy >> 5;
	Local_stReceive.length = MCP2515_u8ReadBuffer[5] & 0x0F;

	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    4a44:	8a 81       	ldd	r24, Y+2	; 0x02
    4a46:	8f 5f       	subi	r24, 0xFF	; 255
    4a48:	8a 83       	std	Y+2, r24	; 0x02
    4a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4c:	88 30       	cpi	r24, 0x08	; 8
    4a4e:	48 f3       	brcs	.-46     	; 0x4a22 <MCP2515_stReceiveCANmsg+0xe8>
	{
		Local_stReceive.data[Local_u8Counter] = MCP2515_u8ReadBuffer[6 + Local_u8Counter];
	}

	Local_stReceive.properties = GET_BIT(MCP2515_u8ReadBuffer[0],3);
    4a50:	80 91 b2 01 	lds	r24, 0x01B2
    4a54:	86 95       	lsr	r24
    4a56:	86 95       	lsr	r24
    4a58:	86 95       	lsr	r24
    4a5a:	81 70       	andi	r24, 0x01	; 1
    4a5c:	88 8b       	std	Y+16, r24	; 0x10

	return Local_stReceive;
    4a5e:	a9 89       	ldd	r26, Y+17	; 0x11
    4a60:	ba 89       	ldd	r27, Y+18	; 0x12
    4a62:	bc 8b       	std	Y+20, r27	; 0x14
    4a64:	ab 8b       	std	Y+19, r26	; 0x13
    4a66:	fe 01       	movw	r30, r28
    4a68:	33 96       	adiw	r30, 0x03	; 3
    4a6a:	fe 8b       	std	Y+22, r31	; 0x16
    4a6c:	ed 8b       	std	Y+21, r30	; 0x15
    4a6e:	fe e0       	ldi	r31, 0x0E	; 14
    4a70:	ff 8b       	std	Y+23, r31	; 0x17
    4a72:	ad 89       	ldd	r26, Y+21	; 0x15
    4a74:	be 89       	ldd	r27, Y+22	; 0x16
    4a76:	0c 90       	ld	r0, X
    4a78:	ed 89       	ldd	r30, Y+21	; 0x15
    4a7a:	fe 89       	ldd	r31, Y+22	; 0x16
    4a7c:	31 96       	adiw	r30, 0x01	; 1
    4a7e:	fe 8b       	std	Y+22, r31	; 0x16
    4a80:	ed 8b       	std	Y+21, r30	; 0x15
    4a82:	ab 89       	ldd	r26, Y+19	; 0x13
    4a84:	bc 89       	ldd	r27, Y+20	; 0x14
    4a86:	0c 92       	st	X, r0
    4a88:	eb 89       	ldd	r30, Y+19	; 0x13
    4a8a:	fc 89       	ldd	r31, Y+20	; 0x14
    4a8c:	31 96       	adiw	r30, 0x01	; 1
    4a8e:	fc 8b       	std	Y+20, r31	; 0x14
    4a90:	eb 8b       	std	Y+19, r30	; 0x13
    4a92:	ff 89       	ldd	r31, Y+23	; 0x17
    4a94:	f1 50       	subi	r31, 0x01	; 1
    4a96:	ff 8b       	std	Y+23, r31	; 0x17
    4a98:	8f 89       	ldd	r24, Y+23	; 0x17
    4a9a:	88 23       	and	r24, r24
    4a9c:	51 f7       	brne	.-44     	; 0x4a72 <MCP2515_stReceiveCANmsg+0x138>
}
    4a9e:	89 89       	ldd	r24, Y+17	; 0x11
    4aa0:	9a 89       	ldd	r25, Y+18	; 0x12
    4aa2:	67 96       	adiw	r28, 0x17	; 23
    4aa4:	0f b6       	in	r0, 0x3f	; 63
    4aa6:	f8 94       	cli
    4aa8:	de bf       	out	0x3e, r29	; 62
    4aaa:	0f be       	out	0x3f, r0	; 63
    4aac:	cd bf       	out	0x3d, r28	; 61
    4aae:	cf 91       	pop	r28
    4ab0:	df 91       	pop	r29
    4ab2:	1f 91       	pop	r17
    4ab4:	0f 91       	pop	r16
    4ab6:	08 95       	ret

00004ab8 <MCP2515_voidReceiveCANmsg2>:

void MCP2515_voidReceiveCANmsg2(void)
{
    4ab8:	0f 93       	push	r16
    4aba:	1f 93       	push	r17
    4abc:	df 93       	push	r29
    4abe:	cf 93       	push	r28
    4ac0:	0f 92       	push	r0
    4ac2:	cd b7       	in	r28, 0x3d	; 61
    4ac4:	de b7       	in	r29, 0x3e	; 62
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    4ac6:	81 e0       	ldi	r24, 0x01	; 1
    4ac8:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	uint8 Local_u8Counter;

	SPI_u8Transceive(INST_READ);
    4acc:	83 e0       	ldi	r24, 0x03	; 3
    4ace:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
	SPI_u8Transceive(RXB0CTRL);
    4ad2:	80 e6       	ldi	r24, 0x60	; 96
    4ad4:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>

	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    4ad8:	19 82       	std	Y+1, r1	; 0x01
    4ada:	0d c0       	rjmp	.+26     	; 0x4af6 <MCP2515_voidReceiveCANmsg2+0x3e>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
    4adc:	89 81       	ldd	r24, Y+1	; 0x01
    4ade:	08 2f       	mov	r16, r24
    4ae0:	10 e0       	ldi	r17, 0x00	; 0
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	0e 94 70 19 	call	0x32e0	; 0x32e0 <SPI_u8Transceive>
    4ae8:	f8 01       	movw	r30, r16
    4aea:	ee 54       	subi	r30, 0x4E	; 78
    4aec:	fe 4f       	sbci	r31, 0xFE	; 254
    4aee:	80 83       	st	Z, r24
	uint8 Local_u8Counter;

	SPI_u8Transceive(INST_READ);
	SPI_u8Transceive(RXB0CTRL);

	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    4af0:	89 81       	ldd	r24, Y+1	; 0x01
    4af2:	8f 5f       	subi	r24, 0xFF	; 255
    4af4:	89 83       	std	Y+1, r24	; 0x01
    4af6:	89 81       	ldd	r24, Y+1	; 0x01
    4af8:	8e 30       	cpi	r24, 0x0E	; 14
    4afa:	80 f3       	brcs	.-32     	; 0x4adc <MCP2515_voidReceiveCANmsg2+0x24>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
	}

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    4afc:	80 e0       	ldi	r24, 0x00	; 0
    4afe:	0e 94 75 22 	call	0x44ea	; 0x44ea <MCP2515_voidChipSelect>

	MCP2515_voidWriteRegister(CANINTF, 0);
    4b02:	8c e2       	ldi	r24, 0x2C	; 44
    4b04:	60 e0       	ldi	r22, 0x00	; 0
    4b06:	0e 94 ac 22 	call	0x4558	; 0x4558 <MCP2515_voidWriteRegister>
}
    4b0a:	0f 90       	pop	r0
    4b0c:	cf 91       	pop	r28
    4b0e:	df 91       	pop	r29
    4b10:	1f 91       	pop	r17
    4b12:	0f 91       	pop	r16
    4b14:	08 95       	ret

00004b16 <LM35_u8GetTemp>:
 * @param Copy_u8ADCChannel The ADC Channel to which the sensor is attached.
 * @param Copy_pu8Temp 		Pointer to return The temperature in celsius degrees.
 * @return 					Error State.
 */
uint8 LM35_u8GetTemp(uint8 Copy_u8ADCChannel, uint8 *Copy_pu8Temp)
{
    4b16:	df 93       	push	r29
    4b18:	cf 93       	push	r28
    4b1a:	cd b7       	in	r28, 0x3d	; 61
    4b1c:	de b7       	in	r29, 0x3e	; 62
    4b1e:	2a 97       	sbiw	r28, 0x0a	; 10
    4b20:	0f b6       	in	r0, 0x3f	; 63
    4b22:	f8 94       	cli
    4b24:	de bf       	out	0x3e, r29	; 62
    4b26:	0f be       	out	0x3f, r0	; 63
    4b28:	cd bf       	out	0x3d, r28	; 61
    4b2a:	8e 83       	std	Y+6, r24	; 0x06
    4b2c:	78 87       	std	Y+8, r23	; 0x08
    4b2e:	6f 83       	std	Y+7, r22	; 0x07
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    4b30:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_u16Voltage = 0;
    4b32:	1a 82       	std	Y+2, r1	; 0x02
    4b34:	19 82       	std	Y+1, r1	; 0x01
	uint16 Local_u16ADCReading = 0;
    4b36:	1d 82       	std	Y+5, r1	; 0x05
    4b38:	1c 82       	std	Y+4, r1	; 0x04

	/*Validate the pointer passed by the user*/
	if(Copy_pu8Temp != NULL)
    4b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    4b3c:	98 85       	ldd	r25, Y+8	; 0x08
    4b3e:	00 97       	sbiw	r24, 0x00	; 0
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <LM35_u8GetTemp+0x2e>
    4b42:	9c c0       	rjmp	.+312    	; 0x4c7c <LM35_u8GetTemp+0x166>
	{
		/*Get the reading from ADC*/
		switch(Copy_u8ADCChannel)
    4b44:	8e 81       	ldd	r24, Y+6	; 0x06
    4b46:	28 2f       	mov	r18, r24
    4b48:	30 e0       	ldi	r19, 0x00	; 0
    4b4a:	3a 87       	std	Y+10, r19	; 0x0a
    4b4c:	29 87       	std	Y+9, r18	; 0x09
    4b4e:	89 85       	ldd	r24, Y+9	; 0x09
    4b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b52:	83 30       	cpi	r24, 0x03	; 3
    4b54:	91 05       	cpc	r25, r1
    4b56:	09 f4       	brne	.+2      	; 0x4b5a <LM35_u8GetTemp+0x44>
    4b58:	41 c0       	rjmp	.+130    	; 0x4bdc <LM35_u8GetTemp+0xc6>
    4b5a:	29 85       	ldd	r18, Y+9	; 0x09
    4b5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b5e:	24 30       	cpi	r18, 0x04	; 4
    4b60:	31 05       	cpc	r19, r1
    4b62:	7c f4       	brge	.+30     	; 0x4b82 <LM35_u8GetTemp+0x6c>
    4b64:	89 85       	ldd	r24, Y+9	; 0x09
    4b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b68:	81 30       	cpi	r24, 0x01	; 1
    4b6a:	91 05       	cpc	r25, r1
    4b6c:	39 f1       	breq	.+78     	; 0x4bbc <LM35_u8GetTemp+0xa6>
    4b6e:	29 85       	ldd	r18, Y+9	; 0x09
    4b70:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b72:	22 30       	cpi	r18, 0x02	; 2
    4b74:	31 05       	cpc	r19, r1
    4b76:	54 f5       	brge	.+84     	; 0x4bcc <LM35_u8GetTemp+0xb6>
    4b78:	89 85       	ldd	r24, Y+9	; 0x09
    4b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b7c:	00 97       	sbiw	r24, 0x00	; 0
    4b7e:	b1 f0       	breq	.+44     	; 0x4bac <LM35_u8GetTemp+0x96>
    4b80:	55 c0       	rjmp	.+170    	; 0x4c2c <LM35_u8GetTemp+0x116>
    4b82:	29 85       	ldd	r18, Y+9	; 0x09
    4b84:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b86:	25 30       	cpi	r18, 0x05	; 5
    4b88:	31 05       	cpc	r19, r1
    4b8a:	c1 f1       	breq	.+112    	; 0x4bfc <LM35_u8GetTemp+0xe6>
    4b8c:	89 85       	ldd	r24, Y+9	; 0x09
    4b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b90:	85 30       	cpi	r24, 0x05	; 5
    4b92:	91 05       	cpc	r25, r1
    4b94:	5c f1       	brlt	.+86     	; 0x4bec <LM35_u8GetTemp+0xd6>
    4b96:	29 85       	ldd	r18, Y+9	; 0x09
    4b98:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b9a:	26 30       	cpi	r18, 0x06	; 6
    4b9c:	31 05       	cpc	r19, r1
    4b9e:	b1 f1       	breq	.+108    	; 0x4c0c <LM35_u8GetTemp+0xf6>
    4ba0:	89 85       	ldd	r24, Y+9	; 0x09
    4ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba4:	87 30       	cpi	r24, 0x07	; 7
    4ba6:	91 05       	cpc	r25, r1
    4ba8:	c9 f1       	breq	.+114    	; 0x4c1c <LM35_u8GetTemp+0x106>
    4baa:	40 c0       	rjmp	.+128    	; 0x4c2c <LM35_u8GetTemp+0x116>
		{
		case LM35_u8ADC_CH0: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH0, &Local_u16ADCReading);	break;
    4bac:	9e 01       	movw	r18, r28
    4bae:	2c 5f       	subi	r18, 0xFC	; 252
    4bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	b9 01       	movw	r22, r18
    4bb6:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4bba:	3a c0       	rjmp	.+116    	; 0x4c30 <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH1: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH1, &Local_u16ADCReading);	break;
    4bbc:	9e 01       	movw	r18, r28
    4bbe:	2c 5f       	subi	r18, 0xFC	; 252
    4bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
    4bc4:	b9 01       	movw	r22, r18
    4bc6:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4bca:	32 c0       	rjmp	.+100    	; 0x4c30 <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH2: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH2, &Local_u16ADCReading);	break;
    4bcc:	9e 01       	movw	r18, r28
    4bce:	2c 5f       	subi	r18, 0xFC	; 252
    4bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd2:	82 e0       	ldi	r24, 0x02	; 2
    4bd4:	b9 01       	movw	r22, r18
    4bd6:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4bda:	2a c0       	rjmp	.+84     	; 0x4c30 <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH3: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH3, &Local_u16ADCReading);	break;
    4bdc:	9e 01       	movw	r18, r28
    4bde:	2c 5f       	subi	r18, 0xFC	; 252
    4be0:	3f 4f       	sbci	r19, 0xFF	; 255
    4be2:	83 e0       	ldi	r24, 0x03	; 3
    4be4:	b9 01       	movw	r22, r18
    4be6:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4bea:	22 c0       	rjmp	.+68     	; 0x4c30 <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH4: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH4, &Local_u16ADCReading);	break;
    4bec:	9e 01       	movw	r18, r28
    4bee:	2c 5f       	subi	r18, 0xFC	; 252
    4bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf2:	84 e0       	ldi	r24, 0x04	; 4
    4bf4:	b9 01       	movw	r22, r18
    4bf6:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4bfa:	1a c0       	rjmp	.+52     	; 0x4c30 <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH5: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH5, &Local_u16ADCReading);	break;
    4bfc:	9e 01       	movw	r18, r28
    4bfe:	2c 5f       	subi	r18, 0xFC	; 252
    4c00:	3f 4f       	sbci	r19, 0xFF	; 255
    4c02:	85 e0       	ldi	r24, 0x05	; 5
    4c04:	b9 01       	movw	r22, r18
    4c06:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4c0a:	12 c0       	rjmp	.+36     	; 0x4c30 <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH6: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH6, &Local_u16ADCReading);	break;
    4c0c:	9e 01       	movw	r18, r28
    4c0e:	2c 5f       	subi	r18, 0xFC	; 252
    4c10:	3f 4f       	sbci	r19, 0xFF	; 255
    4c12:	86 e0       	ldi	r24, 0x06	; 6
    4c14:	b9 01       	movw	r22, r18
    4c16:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4c1a:	0a c0       	rjmp	.+20     	; 0x4c30 <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH7: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH7, &Local_u16ADCReading);	break;
    4c1c:	9e 01       	movw	r18, r28
    4c1e:	2c 5f       	subi	r18, 0xFC	; 252
    4c20:	3f 4f       	sbci	r19, 0xFF	; 255
    4c22:	87 e0       	ldi	r24, 0x07	; 7
    4c24:	b9 01       	movw	r22, r18
    4c26:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4c2a:	02 c0       	rjmp	.+4      	; 0x4c30 <LM35_u8GetTemp+0x11a>
		default: Local_u8ErrorState = NOK;
    4c2c:	81 e0       	ldi	r24, 0x01	; 1
    4c2e:	8b 83       	std	Y+3, r24	; 0x03

		/*Calculate the voltage*/
#if LM35_u8ADC_RESOLUTION == LM35_u8ADC_8BITS_RES
		Local_u16Voltage = (uint16) (((uint32) Local_u16ADCReading * LM35_u8ADC_REF_VOLT * 1000UL) / 256UL);
#elif LM35_u8ADC_RESOLUTION == LM35_u8ADC_10BITS_RES
		Local_u16Voltage = (uint16) (((uint32) Local_u16ADCReading * LM35_u8ADC_REF_VOLT * 1000UL) / 1024UL);
    4c30:	8c 81       	ldd	r24, Y+4	; 0x04
    4c32:	9d 81       	ldd	r25, Y+5	; 0x05
    4c34:	cc 01       	movw	r24, r24
    4c36:	a0 e0       	ldi	r26, 0x00	; 0
    4c38:	b0 e0       	ldi	r27, 0x00	; 0
    4c3a:	28 e8       	ldi	r18, 0x88	; 136
    4c3c:	33 e1       	ldi	r19, 0x13	; 19
    4c3e:	40 e0       	ldi	r20, 0x00	; 0
    4c40:	50 e0       	ldi	r21, 0x00	; 0
    4c42:	bc 01       	movw	r22, r24
    4c44:	cd 01       	movw	r24, r26
    4c46:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__mulsi3>
    4c4a:	dc 01       	movw	r26, r24
    4c4c:	cb 01       	movw	r24, r22
    4c4e:	07 2e       	mov	r0, r23
    4c50:	7a e0       	ldi	r23, 0x0A	; 10
    4c52:	b6 95       	lsr	r27
    4c54:	a7 95       	ror	r26
    4c56:	97 95       	ror	r25
    4c58:	87 95       	ror	r24
    4c5a:	7a 95       	dec	r23
    4c5c:	d1 f7       	brne	.-12     	; 0x4c52 <LM35_u8GetTemp+0x13c>
    4c5e:	70 2d       	mov	r23, r0
    4c60:	9a 83       	std	Y+2, r25	; 0x02
    4c62:	89 83       	std	Y+1, r24	; 0x01
#else
#error Wrong LM35_u8ADC_RESOLUTION configuration option
#endif

		/*Calculate the temperature*/
		*Copy_pu8Temp = (uint8) (Local_u16Voltage /  10u);
    4c64:	89 81       	ldd	r24, Y+1	; 0x01
    4c66:	9a 81       	ldd	r25, Y+2	; 0x02
    4c68:	2a e0       	ldi	r18, 0x0A	; 10
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	b9 01       	movw	r22, r18
    4c6e:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <__udivmodhi4>
    4c72:	cb 01       	movw	r24, r22
    4c74:	ef 81       	ldd	r30, Y+7	; 0x07
    4c76:	f8 85       	ldd	r31, Y+8	; 0x08
    4c78:	80 83       	st	Z, r24
    4c7a:	02 c0       	rjmp	.+4      	; 0x4c80 <LM35_u8GetTemp+0x16a>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    4c7c:	82 e0       	ldi	r24, 0x02	; 2
    4c7e:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    4c80:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4c82:	2a 96       	adiw	r28, 0x0a	; 10
    4c84:	0f b6       	in	r0, 0x3f	; 63
    4c86:	f8 94       	cli
    4c88:	de bf       	out	0x3e, r29	; 62
    4c8a:	0f be       	out	0x3f, r0	; 63
    4c8c:	cd bf       	out	0x3d, r28	; 61
    4c8e:	cf 91       	pop	r28
    4c90:	df 91       	pop	r29
    4c92:	08 95       	ret

00004c94 <LDR_u8GetAnalogVolt>:
 * @param Copy_u8ADCChannel The ADC Channel to which the sensor is attached.
 * @param Copy_pu16AnalogVolt A pointer to return The analog voltage in milli volt.
 * @return Error State.
 */
uint8 LDR_u8GetAnalogVolt(uint8 Copy_u8ADCChannel, uint16 *Copy_pu16AnalogVolt)
{
    4c94:	df 93       	push	r29
    4c96:	cf 93       	push	r28
    4c98:	cd b7       	in	r28, 0x3d	; 61
    4c9a:	de b7       	in	r29, 0x3e	; 62
    4c9c:	28 97       	sbiw	r28, 0x08	; 8
    4c9e:	0f b6       	in	r0, 0x3f	; 63
    4ca0:	f8 94       	cli
    4ca2:	de bf       	out	0x3e, r29	; 62
    4ca4:	0f be       	out	0x3f, r0	; 63
    4ca6:	cd bf       	out	0x3d, r28	; 61
    4ca8:	8c 83       	std	Y+4, r24	; 0x04
    4caa:	7e 83       	std	Y+6, r23	; 0x06
    4cac:	6d 83       	std	Y+5, r22	; 0x05
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    4cae:	19 82       	std	Y+1, r1	; 0x01
	uint16 Local_u16ADCReading = 0;
    4cb0:	1b 82       	std	Y+3, r1	; 0x03
    4cb2:	1a 82       	std	Y+2, r1	; 0x02

	/*Validate the pointer passed by the user*/
	if(Copy_pu16AnalogVolt != NULL)
    4cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb8:	00 97       	sbiw	r24, 0x00	; 0
    4cba:	09 f4       	brne	.+2      	; 0x4cbe <LDR_u8GetAnalogVolt+0x2a>
    4cbc:	93 c0       	rjmp	.+294    	; 0x4de4 <LDR_u8GetAnalogVolt+0x150>
	{
		/*Get the reading from ADC*/
		switch(Copy_u8ADCChannel)
    4cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    4cc0:	28 2f       	mov	r18, r24
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	38 87       	std	Y+8, r19	; 0x08
    4cc6:	2f 83       	std	Y+7, r18	; 0x07
    4cc8:	8f 81       	ldd	r24, Y+7	; 0x07
    4cca:	98 85       	ldd	r25, Y+8	; 0x08
    4ccc:	83 30       	cpi	r24, 0x03	; 3
    4cce:	91 05       	cpc	r25, r1
    4cd0:	09 f4       	brne	.+2      	; 0x4cd4 <LDR_u8GetAnalogVolt+0x40>
    4cd2:	41 c0       	rjmp	.+130    	; 0x4d56 <LDR_u8GetAnalogVolt+0xc2>
    4cd4:	2f 81       	ldd	r18, Y+7	; 0x07
    4cd6:	38 85       	ldd	r19, Y+8	; 0x08
    4cd8:	24 30       	cpi	r18, 0x04	; 4
    4cda:	31 05       	cpc	r19, r1
    4cdc:	7c f4       	brge	.+30     	; 0x4cfc <LDR_u8GetAnalogVolt+0x68>
    4cde:	8f 81       	ldd	r24, Y+7	; 0x07
    4ce0:	98 85       	ldd	r25, Y+8	; 0x08
    4ce2:	81 30       	cpi	r24, 0x01	; 1
    4ce4:	91 05       	cpc	r25, r1
    4ce6:	39 f1       	breq	.+78     	; 0x4d36 <LDR_u8GetAnalogVolt+0xa2>
    4ce8:	2f 81       	ldd	r18, Y+7	; 0x07
    4cea:	38 85       	ldd	r19, Y+8	; 0x08
    4cec:	22 30       	cpi	r18, 0x02	; 2
    4cee:	31 05       	cpc	r19, r1
    4cf0:	54 f5       	brge	.+84     	; 0x4d46 <LDR_u8GetAnalogVolt+0xb2>
    4cf2:	8f 81       	ldd	r24, Y+7	; 0x07
    4cf4:	98 85       	ldd	r25, Y+8	; 0x08
    4cf6:	00 97       	sbiw	r24, 0x00	; 0
    4cf8:	b1 f0       	breq	.+44     	; 0x4d26 <LDR_u8GetAnalogVolt+0x92>
    4cfa:	55 c0       	rjmp	.+170    	; 0x4da6 <LDR_u8GetAnalogVolt+0x112>
    4cfc:	2f 81       	ldd	r18, Y+7	; 0x07
    4cfe:	38 85       	ldd	r19, Y+8	; 0x08
    4d00:	25 30       	cpi	r18, 0x05	; 5
    4d02:	31 05       	cpc	r19, r1
    4d04:	c1 f1       	breq	.+112    	; 0x4d76 <LDR_u8GetAnalogVolt+0xe2>
    4d06:	8f 81       	ldd	r24, Y+7	; 0x07
    4d08:	98 85       	ldd	r25, Y+8	; 0x08
    4d0a:	85 30       	cpi	r24, 0x05	; 5
    4d0c:	91 05       	cpc	r25, r1
    4d0e:	5c f1       	brlt	.+86     	; 0x4d66 <LDR_u8GetAnalogVolt+0xd2>
    4d10:	2f 81       	ldd	r18, Y+7	; 0x07
    4d12:	38 85       	ldd	r19, Y+8	; 0x08
    4d14:	26 30       	cpi	r18, 0x06	; 6
    4d16:	31 05       	cpc	r19, r1
    4d18:	b1 f1       	breq	.+108    	; 0x4d86 <LDR_u8GetAnalogVolt+0xf2>
    4d1a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d1c:	98 85       	ldd	r25, Y+8	; 0x08
    4d1e:	87 30       	cpi	r24, 0x07	; 7
    4d20:	91 05       	cpc	r25, r1
    4d22:	c9 f1       	breq	.+114    	; 0x4d96 <LDR_u8GetAnalogVolt+0x102>
    4d24:	40 c0       	rjmp	.+128    	; 0x4da6 <LDR_u8GetAnalogVolt+0x112>
		{
		case LDR_u8ADC_CH0: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH0, &Local_u16ADCReading);	break;
    4d26:	9e 01       	movw	r18, r28
    4d28:	2e 5f       	subi	r18, 0xFE	; 254
    4d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d2c:	80 e0       	ldi	r24, 0x00	; 0
    4d2e:	b9 01       	movw	r22, r18
    4d30:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4d34:	3a c0       	rjmp	.+116    	; 0x4daa <LDR_u8GetAnalogVolt+0x116>
		case LDR_u8ADC_CH1: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH1, &Local_u16ADCReading);	break;
    4d36:	9e 01       	movw	r18, r28
    4d38:	2e 5f       	subi	r18, 0xFE	; 254
    4d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d3c:	81 e0       	ldi	r24, 0x01	; 1
    4d3e:	b9 01       	movw	r22, r18
    4d40:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4d44:	32 c0       	rjmp	.+100    	; 0x4daa <LDR_u8GetAnalogVolt+0x116>
		case LDR_u8ADC_CH2: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH2, &Local_u16ADCReading);	break;
    4d46:	9e 01       	movw	r18, r28
    4d48:	2e 5f       	subi	r18, 0xFE	; 254
    4d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d4c:	82 e0       	ldi	r24, 0x02	; 2
    4d4e:	b9 01       	movw	r22, r18
    4d50:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4d54:	2a c0       	rjmp	.+84     	; 0x4daa <LDR_u8GetAnalogVolt+0x116>
		case LDR_u8ADC_CH3: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH3, &Local_u16ADCReading);	break;
    4d56:	9e 01       	movw	r18, r28
    4d58:	2e 5f       	subi	r18, 0xFE	; 254
    4d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d5c:	83 e0       	ldi	r24, 0x03	; 3
    4d5e:	b9 01       	movw	r22, r18
    4d60:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4d64:	22 c0       	rjmp	.+68     	; 0x4daa <LDR_u8GetAnalogVolt+0x116>
		case LDR_u8ADC_CH4: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH4, &Local_u16ADCReading);	break;
    4d66:	9e 01       	movw	r18, r28
    4d68:	2e 5f       	subi	r18, 0xFE	; 254
    4d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6c:	84 e0       	ldi	r24, 0x04	; 4
    4d6e:	b9 01       	movw	r22, r18
    4d70:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4d74:	1a c0       	rjmp	.+52     	; 0x4daa <LDR_u8GetAnalogVolt+0x116>
		case LDR_u8ADC_CH5: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH5, &Local_u16ADCReading);	break;
    4d76:	9e 01       	movw	r18, r28
    4d78:	2e 5f       	subi	r18, 0xFE	; 254
    4d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7c:	85 e0       	ldi	r24, 0x05	; 5
    4d7e:	b9 01       	movw	r22, r18
    4d80:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4d84:	12 c0       	rjmp	.+36     	; 0x4daa <LDR_u8GetAnalogVolt+0x116>
		case LDR_u8ADC_CH6: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH6, &Local_u16ADCReading);	break;
    4d86:	9e 01       	movw	r18, r28
    4d88:	2e 5f       	subi	r18, 0xFE	; 254
    4d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d8c:	86 e0       	ldi	r24, 0x06	; 6
    4d8e:	b9 01       	movw	r22, r18
    4d90:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4d94:	0a c0       	rjmp	.+20     	; 0x4daa <LDR_u8GetAnalogVolt+0x116>
		case LDR_u8ADC_CH7: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH7, &Local_u16ADCReading);	break;
    4d96:	9e 01       	movw	r18, r28
    4d98:	2e 5f       	subi	r18, 0xFE	; 254
    4d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d9c:	87 e0       	ldi	r24, 0x07	; 7
    4d9e:	b9 01       	movw	r22, r18
    4da0:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <ADC_u8StartConversionSynch>
    4da4:	02 c0       	rjmp	.+4      	; 0x4daa <LDR_u8GetAnalogVolt+0x116>
		default: Local_u8ErrorState = NOK;
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	89 83       	std	Y+1, r24	; 0x01

		/*Calculate the voltage and return it to the user*/
#if LDR_u8ADC_RESOLUTION == LDR_u8ADC_8BITS_RES
		*Copy_pu16AnalogVolt = (uint16) (((uint32) Local_u16ADCReading * LDR_u8ADC_REF_VOLT * 1000UL) / 256UL);
#elif LDR_u8ADC_RESOLUTION == LDR_u8ADC_10BITS_RES
		*Copy_pu16AnalogVolt = (uint16) (((uint32) Local_u16ADCReading * LDR_u8ADC_REF_VOLT * 1000UL) / 1024UL);
    4daa:	8a 81       	ldd	r24, Y+2	; 0x02
    4dac:	9b 81       	ldd	r25, Y+3	; 0x03
    4dae:	cc 01       	movw	r24, r24
    4db0:	a0 e0       	ldi	r26, 0x00	; 0
    4db2:	b0 e0       	ldi	r27, 0x00	; 0
    4db4:	28 e8       	ldi	r18, 0x88	; 136
    4db6:	33 e1       	ldi	r19, 0x13	; 19
    4db8:	40 e0       	ldi	r20, 0x00	; 0
    4dba:	50 e0       	ldi	r21, 0x00	; 0
    4dbc:	bc 01       	movw	r22, r24
    4dbe:	cd 01       	movw	r24, r26
    4dc0:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__mulsi3>
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	cb 01       	movw	r24, r22
    4dc8:	07 2e       	mov	r0, r23
    4dca:	7a e0       	ldi	r23, 0x0A	; 10
    4dcc:	b6 95       	lsr	r27
    4dce:	a7 95       	ror	r26
    4dd0:	97 95       	ror	r25
    4dd2:	87 95       	ror	r24
    4dd4:	7a 95       	dec	r23
    4dd6:	d1 f7       	brne	.-12     	; 0x4dcc <LDR_u8GetAnalogVolt+0x138>
    4dd8:	70 2d       	mov	r23, r0
    4dda:	ed 81       	ldd	r30, Y+5	; 0x05
    4ddc:	fe 81       	ldd	r31, Y+6	; 0x06
    4dde:	91 83       	std	Z+1, r25	; 0x01
    4de0:	80 83       	st	Z, r24
    4de2:	02 c0       	rjmp	.+4      	; 0x4de8 <LDR_u8GetAnalogVolt+0x154>
#endif

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    4de4:	82 e0       	ldi	r24, 0x02	; 2
    4de6:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    4de8:	89 81       	ldd	r24, Y+1	; 0x01
}
    4dea:	28 96       	adiw	r28, 0x08	; 8
    4dec:	0f b6       	in	r0, 0x3f	; 63
    4dee:	f8 94       	cli
    4df0:	de bf       	out	0x3e, r29	; 62
    4df2:	0f be       	out	0x3f, r0	; 63
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	cf 91       	pop	r28
    4df8:	df 91       	pop	r29
    4dfa:	08 95       	ret

00004dfc <LDR_u8GetResistance>:
 * @param Copy_u16SourceVoltage The source voltage which support the LDR with power in milli volt.
 * @param Copy_u16KnownResistance The resistance which participate in the voltage divider circuit in ohm.
 * @return Error State.
 */
uint8 LDR_u8GetResistance(uint8 Copy_u8ADCChannel, uint16 Copy_u16SourceVoltage, uint16 Copy_u16KnownResistance, uint32 *Copy_pu32LDRResistance)
{
    4dfc:	ef 92       	push	r14
    4dfe:	ff 92       	push	r15
    4e00:	0f 93       	push	r16
    4e02:	1f 93       	push	r17
    4e04:	df 93       	push	r29
    4e06:	cf 93       	push	r28
    4e08:	cd b7       	in	r28, 0x3d	; 61
    4e0a:	de b7       	in	r29, 0x3e	; 62
    4e0c:	2e 97       	sbiw	r28, 0x0e	; 14
    4e0e:	0f b6       	in	r0, 0x3f	; 63
    4e10:	f8 94       	cli
    4e12:	de bf       	out	0x3e, r29	; 62
    4e14:	0f be       	out	0x3f, r0	; 63
    4e16:	cd bf       	out	0x3d, r28	; 61
    4e18:	88 87       	std	Y+8, r24	; 0x08
    4e1a:	7a 87       	std	Y+10, r23	; 0x0a
    4e1c:	69 87       	std	Y+9, r22	; 0x09
    4e1e:	5c 87       	std	Y+12, r21	; 0x0c
    4e20:	4b 87       	std	Y+11, r20	; 0x0b
    4e22:	3e 87       	std	Y+14, r19	; 0x0e
    4e24:	2d 87       	std	Y+13, r18	; 0x0d
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    4e26:	1d 82       	std	Y+5, r1	; 0x05
	uint16 Local_u16Voltage = 0;
    4e28:	1f 82       	std	Y+7, r1	; 0x07
    4e2a:	1e 82       	std	Y+6, r1	; 0x06
	uint32 Local_u32Resistance = 0;
    4e2c:	19 82       	std	Y+1, r1	; 0x01
    4e2e:	1a 82       	std	Y+2, r1	; 0x02
    4e30:	1b 82       	std	Y+3, r1	; 0x03
    4e32:	1c 82       	std	Y+4, r1	; 0x04

	/*Validate the pointer passed by the user*/
	if(Copy_pu32LDRResistance != NULL)
    4e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e38:	00 97       	sbiw	r24, 0x00	; 0
    4e3a:	09 f4       	brne	.+2      	; 0x4e3e <LDR_u8GetResistance+0x42>
    4e3c:	64 c0       	rjmp	.+200    	; 0x4f06 <LDR_u8GetResistance+0x10a>
	{
		/*Get the voltage out from the LDR sensor*/
		LDR_u8GetAnalogVolt(Copy_u8ADCChannel, &Local_u16Voltage);
    4e3e:	9e 01       	movw	r18, r28
    4e40:	2a 5f       	subi	r18, 0xFA	; 250
    4e42:	3f 4f       	sbci	r19, 0xFF	; 255
    4e44:	88 85       	ldd	r24, Y+8	; 0x08
    4e46:	b9 01       	movw	r22, r18
    4e48:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <LDR_u8GetAnalogVolt>

		/*Calculate the resistance*/
		Local_u32Resistance = ((uint32) Copy_u16SourceVoltage / 10UL) * ((uint32) Copy_u16KnownResistance / 10UL);
    4e4c:	89 85       	ldd	r24, Y+9	; 0x09
    4e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e50:	2a e0       	ldi	r18, 0x0A	; 10
    4e52:	30 e0       	ldi	r19, 0x00	; 0
    4e54:	b9 01       	movw	r22, r18
    4e56:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <__udivmodhi4>
    4e5a:	cb 01       	movw	r24, r22
    4e5c:	7c 01       	movw	r14, r24
    4e5e:	00 e0       	ldi	r16, 0x00	; 0
    4e60:	10 e0       	ldi	r17, 0x00	; 0
    4e62:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e64:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e66:	2a e0       	ldi	r18, 0x0A	; 10
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	b9 01       	movw	r22, r18
    4e6c:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <__udivmodhi4>
    4e70:	cb 01       	movw	r24, r22
    4e72:	9c 01       	movw	r18, r24
    4e74:	40 e0       	ldi	r20, 0x00	; 0
    4e76:	50 e0       	ldi	r21, 0x00	; 0
    4e78:	c8 01       	movw	r24, r16
    4e7a:	b7 01       	movw	r22, r14
    4e7c:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__mulsi3>
    4e80:	dc 01       	movw	r26, r24
    4e82:	cb 01       	movw	r24, r22
    4e84:	89 83       	std	Y+1, r24	; 0x01
    4e86:	9a 83       	std	Y+2, r25	; 0x02
    4e88:	ab 83       	std	Y+3, r26	; 0x03
    4e8a:	bc 83       	std	Y+4, r27	; 0x04
		Local_u32Resistance = Local_u32Resistance / (uint32) Local_u16Voltage;
    4e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4e8e:	9f 81       	ldd	r25, Y+7	; 0x07
    4e90:	9c 01       	movw	r18, r24
    4e92:	40 e0       	ldi	r20, 0x00	; 0
    4e94:	50 e0       	ldi	r21, 0x00	; 0
    4e96:	89 81       	ldd	r24, Y+1	; 0x01
    4e98:	9a 81       	ldd	r25, Y+2	; 0x02
    4e9a:	ab 81       	ldd	r26, Y+3	; 0x03
    4e9c:	bc 81       	ldd	r27, Y+4	; 0x04
    4e9e:	bc 01       	movw	r22, r24
    4ea0:	cd 01       	movw	r24, r26
    4ea2:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <__udivmodsi4>
    4ea6:	da 01       	movw	r26, r20
    4ea8:	c9 01       	movw	r24, r18
    4eaa:	89 83       	std	Y+1, r24	; 0x01
    4eac:	9a 83       	std	Y+2, r25	; 0x02
    4eae:	ab 83       	std	Y+3, r26	; 0x03
    4eb0:	bc 83       	std	Y+4, r27	; 0x04
		Local_u32Resistance = (Local_u32Resistance * 100UL) - (uint32) Copy_u16KnownResistance;
    4eb2:	89 81       	ldd	r24, Y+1	; 0x01
    4eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb6:	ab 81       	ldd	r26, Y+3	; 0x03
    4eb8:	bc 81       	ldd	r27, Y+4	; 0x04
    4eba:	24 e6       	ldi	r18, 0x64	; 100
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	40 e0       	ldi	r20, 0x00	; 0
    4ec0:	50 e0       	ldi	r21, 0x00	; 0
    4ec2:	bc 01       	movw	r22, r24
    4ec4:	cd 01       	movw	r24, r26
    4ec6:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__mulsi3>
    4eca:	9b 01       	movw	r18, r22
    4ecc:	ac 01       	movw	r20, r24
    4ece:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ed0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ed2:	cc 01       	movw	r24, r24
    4ed4:	a0 e0       	ldi	r26, 0x00	; 0
    4ed6:	b0 e0       	ldi	r27, 0x00	; 0
    4ed8:	79 01       	movw	r14, r18
    4eda:	8a 01       	movw	r16, r20
    4edc:	e8 1a       	sub	r14, r24
    4ede:	f9 0a       	sbc	r15, r25
    4ee0:	0a 0b       	sbc	r16, r26
    4ee2:	1b 0b       	sbc	r17, r27
    4ee4:	d8 01       	movw	r26, r16
    4ee6:	c7 01       	movw	r24, r14
    4ee8:	89 83       	std	Y+1, r24	; 0x01
    4eea:	9a 83       	std	Y+2, r25	; 0x02
    4eec:	ab 83       	std	Y+3, r26	; 0x03
    4eee:	bc 83       	std	Y+4, r27	; 0x04
		*Copy_pu32LDRResistance = Local_u32Resistance;
    4ef0:	ed 85       	ldd	r30, Y+13	; 0x0d
    4ef2:	fe 85       	ldd	r31, Y+14	; 0x0e
    4ef4:	89 81       	ldd	r24, Y+1	; 0x01
    4ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef8:	ab 81       	ldd	r26, Y+3	; 0x03
    4efa:	bc 81       	ldd	r27, Y+4	; 0x04
    4efc:	80 83       	st	Z, r24
    4efe:	91 83       	std	Z+1, r25	; 0x01
    4f00:	a2 83       	std	Z+2, r26	; 0x02
    4f02:	b3 83       	std	Z+3, r27	; 0x03
    4f04:	02 c0       	rjmp	.+4      	; 0x4f0a <LDR_u8GetResistance+0x10e>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    4f06:	82 e0       	ldi	r24, 0x02	; 2
    4f08:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    4f0a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4f0c:	2e 96       	adiw	r28, 0x0e	; 14
    4f0e:	0f b6       	in	r0, 0x3f	; 63
    4f10:	f8 94       	cli
    4f12:	de bf       	out	0x3e, r29	; 62
    4f14:	0f be       	out	0x3f, r0	; 63
    4f16:	cd bf       	out	0x3d, r28	; 61
    4f18:	cf 91       	pop	r28
    4f1a:	df 91       	pop	r29
    4f1c:	1f 91       	pop	r17
    4f1e:	0f 91       	pop	r16
    4f20:	ff 90       	pop	r15
    4f22:	ef 90       	pop	r14
    4f24:	08 95       	ret

00004f26 <voidSendEnablePulse>:

/**
 * @brief Function to send enable pulse into the enable pin of the CLCD.
 */
static void voidSendEnablePulse(void)
{
    4f26:	df 93       	push	r29
    4f28:	cf 93       	push	r28
    4f2a:	cd b7       	in	r28, 0x3d	; 61
    4f2c:	de b7       	in	r29, 0x3e	; 62
    4f2e:	2e 97       	sbiw	r28, 0x0e	; 14
    4f30:	0f b6       	in	r0, 0x3f	; 63
    4f32:	f8 94       	cli
    4f34:	de bf       	out	0x3e, r29	; 62
    4f36:	0f be       	out	0x3f, r0	; 63
    4f38:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8E_PIN, DIO_u8PIN_HIGH);
    4f3a:	82 e0       	ldi	r24, 0x02	; 2
    4f3c:	65 e0       	ldi	r22, 0x05	; 5
    4f3e:	41 e0       	ldi	r20, 0x01	; 1
    4f40:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
    4f44:	80 e0       	ldi	r24, 0x00	; 0
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	a0 e0       	ldi	r26, 0x00	; 0
    4f4a:	b0 e4       	ldi	r27, 0x40	; 64
    4f4c:	8b 87       	std	Y+11, r24	; 0x0b
    4f4e:	9c 87       	std	Y+12, r25	; 0x0c
    4f50:	ad 87       	std	Y+13, r26	; 0x0d
    4f52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f5c:	20 e0       	ldi	r18, 0x00	; 0
    4f5e:	30 e0       	ldi	r19, 0x00	; 0
    4f60:	4a ef       	ldi	r20, 0xFA	; 250
    4f62:	54 e4       	ldi	r21, 0x44	; 68
    4f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f68:	dc 01       	movw	r26, r24
    4f6a:	cb 01       	movw	r24, r22
    4f6c:	8f 83       	std	Y+7, r24	; 0x07
    4f6e:	98 87       	std	Y+8, r25	; 0x08
    4f70:	a9 87       	std	Y+9, r26	; 0x09
    4f72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f74:	6f 81       	ldd	r22, Y+7	; 0x07
    4f76:	78 85       	ldd	r23, Y+8	; 0x08
    4f78:	89 85       	ldd	r24, Y+9	; 0x09
    4f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f7c:	20 e0       	ldi	r18, 0x00	; 0
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	40 e8       	ldi	r20, 0x80	; 128
    4f82:	5f e3       	ldi	r21, 0x3F	; 63
    4f84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f88:	88 23       	and	r24, r24
    4f8a:	2c f4       	brge	.+10     	; 0x4f96 <voidSendEnablePulse+0x70>
		__ticks = 1;
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	9e 83       	std	Y+6, r25	; 0x06
    4f92:	8d 83       	std	Y+5, r24	; 0x05
    4f94:	3f c0       	rjmp	.+126    	; 0x5014 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
    4f96:	6f 81       	ldd	r22, Y+7	; 0x07
    4f98:	78 85       	ldd	r23, Y+8	; 0x08
    4f9a:	89 85       	ldd	r24, Y+9	; 0x09
    4f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f9e:	20 e0       	ldi	r18, 0x00	; 0
    4fa0:	3f ef       	ldi	r19, 0xFF	; 255
    4fa2:	4f e7       	ldi	r20, 0x7F	; 127
    4fa4:	57 e4       	ldi	r21, 0x47	; 71
    4fa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4faa:	18 16       	cp	r1, r24
    4fac:	4c f5       	brge	.+82     	; 0x5000 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fb6:	20 e0       	ldi	r18, 0x00	; 0
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
    4fba:	40 e2       	ldi	r20, 0x20	; 32
    4fbc:	51 e4       	ldi	r21, 0x41	; 65
    4fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc2:	dc 01       	movw	r26, r24
    4fc4:	cb 01       	movw	r24, r22
    4fc6:	bc 01       	movw	r22, r24
    4fc8:	cd 01       	movw	r24, r26
    4fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fce:	dc 01       	movw	r26, r24
    4fd0:	cb 01       	movw	r24, r22
    4fd2:	9e 83       	std	Y+6, r25	; 0x06
    4fd4:	8d 83       	std	Y+5, r24	; 0x05
    4fd6:	0f c0       	rjmp	.+30     	; 0x4ff6 <voidSendEnablePulse+0xd0>
    4fd8:	88 ec       	ldi	r24, 0xC8	; 200
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	9c 83       	std	Y+4, r25	; 0x04
    4fde:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe4:	01 97       	sbiw	r24, 0x01	; 1
    4fe6:	f1 f7       	brne	.-4      	; 0x4fe4 <voidSendEnablePulse+0xbe>
    4fe8:	9c 83       	std	Y+4, r25	; 0x04
    4fea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fec:	8d 81       	ldd	r24, Y+5	; 0x05
    4fee:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff0:	01 97       	sbiw	r24, 0x01	; 1
    4ff2:	9e 83       	std	Y+6, r25	; 0x06
    4ff4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    4ffa:	00 97       	sbiw	r24, 0x00	; 0
    4ffc:	69 f7       	brne	.-38     	; 0x4fd8 <voidSendEnablePulse+0xb2>
    4ffe:	14 c0       	rjmp	.+40     	; 0x5028 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5000:	6f 81       	ldd	r22, Y+7	; 0x07
    5002:	78 85       	ldd	r23, Y+8	; 0x08
    5004:	89 85       	ldd	r24, Y+9	; 0x09
    5006:	9a 85       	ldd	r25, Y+10	; 0x0a
    5008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    500c:	dc 01       	movw	r26, r24
    500e:	cb 01       	movw	r24, r22
    5010:	9e 83       	std	Y+6, r25	; 0x06
    5012:	8d 83       	std	Y+5, r24	; 0x05
    5014:	8d 81       	ldd	r24, Y+5	; 0x05
    5016:	9e 81       	ldd	r25, Y+6	; 0x06
    5018:	9a 83       	std	Y+2, r25	; 0x02
    501a:	89 83       	std	Y+1, r24	; 0x01
    501c:	89 81       	ldd	r24, Y+1	; 0x01
    501e:	9a 81       	ldd	r25, Y+2	; 0x02
    5020:	01 97       	sbiw	r24, 0x01	; 1
    5022:	f1 f7       	brne	.-4      	; 0x5020 <voidSendEnablePulse+0xfa>
    5024:	9a 83       	std	Y+2, r25	; 0x02
    5026:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 2 millisecond, it is enough time for lcd to implement any command*/
	_delay_ms(2);

	/*Clear enable*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8E_PIN, DIO_u8PIN_LOW);
    5028:	82 e0       	ldi	r24, 0x02	; 2
    502a:	65 e0       	ldi	r22, 0x05	; 5
    502c:	40 e0       	ldi	r20, 0x00	; 0
    502e:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
}
    5032:	2e 96       	adiw	r28, 0x0e	; 14
    5034:	0f b6       	in	r0, 0x3f	; 63
    5036:	f8 94       	cli
    5038:	de bf       	out	0x3e, r29	; 62
    503a:	0f be       	out	0x3f, r0	; 63
    503c:	cd bf       	out	0x3d, r28	; 61
    503e:	cf 91       	pop	r28
    5040:	df 91       	pop	r29
    5042:	08 95       	ret

00005044 <voidSetLCDHalfDataPort>:
/**
 * @brief Function to set a nipple into the half data port.
 * @param Copy_u8Nipple
 */
static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
    5044:	df 93       	push	r29
    5046:	cf 93       	push	r28
    5048:	0f 92       	push	r0
    504a:	cd b7       	in	r28, 0x3d	; 61
    504c:	de b7       	in	r29, 0x3e	; 62
    504e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D4_PIN, GET_BIT(Copy_u8Nipple, 0));
    5050:	89 81       	ldd	r24, Y+1	; 0x01
    5052:	98 2f       	mov	r25, r24
    5054:	91 70       	andi	r25, 0x01	; 1
    5056:	82 e0       	ldi	r24, 0x02	; 2
    5058:	64 e0       	ldi	r22, 0x04	; 4
    505a:	49 2f       	mov	r20, r25
    505c:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D5_PIN, GET_BIT(Copy_u8Nipple, 1));
    5060:	89 81       	ldd	r24, Y+1	; 0x01
    5062:	86 95       	lsr	r24
    5064:	98 2f       	mov	r25, r24
    5066:	91 70       	andi	r25, 0x01	; 1
    5068:	82 e0       	ldi	r24, 0x02	; 2
    506a:	63 e0       	ldi	r22, 0x03	; 3
    506c:	49 2f       	mov	r20, r25
    506e:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D6_PIN, GET_BIT(Copy_u8Nipple, 2));
    5072:	89 81       	ldd	r24, Y+1	; 0x01
    5074:	86 95       	lsr	r24
    5076:	86 95       	lsr	r24
    5078:	98 2f       	mov	r25, r24
    507a:	91 70       	andi	r25, 0x01	; 1
    507c:	82 e0       	ldi	r24, 0x02	; 2
    507e:	62 e0       	ldi	r22, 0x02	; 2
    5080:	49 2f       	mov	r20, r25
    5082:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D7_PIN, GET_BIT(Copy_u8Nipple, 3));
    5086:	89 81       	ldd	r24, Y+1	; 0x01
    5088:	86 95       	lsr	r24
    508a:	86 95       	lsr	r24
    508c:	86 95       	lsr	r24
    508e:	98 2f       	mov	r25, r24
    5090:	91 70       	andi	r25, 0x01	; 1
    5092:	82 e0       	ldi	r24, 0x02	; 2
    5094:	61 e0       	ldi	r22, 0x01	; 1
    5096:	49 2f       	mov	r20, r25
    5098:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
}
    509c:	0f 90       	pop	r0
    509e:	cf 91       	pop	r28
    50a0:	df 91       	pop	r29
    50a2:	08 95       	ret

000050a4 <CLCD_voidSendCmd>:
/**
 * @brief Function to send command order to the CLCD.
 * @param Copy_u8Cmd Parameter which take the number of the command as 1 byte
 */
void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
    50a4:	df 93       	push	r29
    50a6:	cf 93       	push	r28
    50a8:	0f 92       	push	r0
    50aa:	cd b7       	in	r28, 0x3d	; 61
    50ac:	de b7       	in	r29, 0x3e	; 62
    50ae:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_LOW);
    50b0:	82 e0       	ldi	r24, 0x02	; 2
    50b2:	67 e0       	ldi	r22, 0x07	; 7
    50b4:	40 e0       	ldi	r20, 0x00	; 0
    50b6:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RW_PIN, DIO_u8PIN_LOW);
    50ba:	82 e0       	ldi	r24, 0x02	; 2
    50bc:	66 e0       	ldi	r22, 0x06	; 6
    50be:	40 e0       	ldi	r20, 0x00	; 0
    50c0:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd >> 4);
    50c4:	89 81       	ldd	r24, Y+1	; 0x01
    50c6:	82 95       	swap	r24
    50c8:	8f 70       	andi	r24, 0x0F	; 15
    50ca:	0e 94 22 28 	call	0x5044	; 0x5044 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    50ce:	0e 94 93 27 	call	0x4f26	; 0x4f26 <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd);
    50d2:	89 81       	ldd	r24, Y+1	; 0x01
    50d4:	0e 94 22 28 	call	0x5044	; 0x5044 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    50d8:	0e 94 93 27 	call	0x4f26	; 0x4f26 <voidSendEnablePulse>

#endif

}
    50dc:	0f 90       	pop	r0
    50de:	cf 91       	pop	r28
    50e0:	df 91       	pop	r29
    50e2:	08 95       	ret

000050e4 <CLCD_voidSendData>:
/**
 * @brief Function to send data to the CLCD.
 * @param Copy_c8Data Parameter which take 1 byte data to be set.
 */
void CLCD_voidSendData(char Copy_u8Data)
{
    50e4:	df 93       	push	r29
    50e6:	cf 93       	push	r28
    50e8:	0f 92       	push	r0
    50ea:	cd b7       	in	r28, 0x3d	; 61
    50ec:	de b7       	in	r29, 0x3e	; 62
    50ee:	89 83       	std	Y+1, r24	; 0x01

	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_HIGH);
    50f0:	82 e0       	ldi	r24, 0x02	; 2
    50f2:	67 e0       	ldi	r22, 0x07	; 7
    50f4:	41 e0       	ldi	r20, 0x01	; 1
    50f6:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RW_PIN, DIO_u8PIN_LOW);
    50fa:	82 e0       	ldi	r24, 0x02	; 2
    50fc:	66 e0       	ldi	r22, 0x06	; 6
    50fe:	40 e0       	ldi	r20, 0x00	; 0
    5100:	0e 94 cd 1a 	call	0x359a	; 0x359a <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Data >> 4);
    5104:	89 81       	ldd	r24, Y+1	; 0x01
    5106:	82 95       	swap	r24
    5108:	8f 70       	andi	r24, 0x0F	; 15
    510a:	0e 94 22 28 	call	0x5044	; 0x5044 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    510e:	0e 94 93 27 	call	0x4f26	; 0x4f26 <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Data);
    5112:	89 81       	ldd	r24, Y+1	; 0x01
    5114:	0e 94 22 28 	call	0x5044	; 0x5044 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    5118:	0e 94 93 27 	call	0x4f26	; 0x4f26 <voidSendEnablePulse>

#endif
}
    511c:	0f 90       	pop	r0
    511e:	cf 91       	pop	r28
    5120:	df 91       	pop	r29
    5122:	08 95       	ret

00005124 <CLCD_voidInit>:

/**
 * @brief Function to initialize the CLCD according to its configurations.
 */
void CLCD_voidInit(void)
{
    5124:	df 93       	push	r29
    5126:	cf 93       	push	r28
    5128:	cd b7       	in	r28, 0x3d	; 61
    512a:	de b7       	in	r29, 0x3e	; 62
    512c:	2f 97       	sbiw	r28, 0x0f	; 15
    512e:	0f b6       	in	r0, 0x3f	; 63
    5130:	f8 94       	cli
    5132:	de bf       	out	0x3e, r29	; 62
    5134:	0f be       	out	0x3f, r0	; 63
    5136:	cd bf       	out	0x3d, r28	; 61
    5138:	80 e0       	ldi	r24, 0x00	; 0
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	a0 e2       	ldi	r26, 0x20	; 32
    513e:	b2 e4       	ldi	r27, 0x42	; 66
    5140:	8b 87       	std	Y+11, r24	; 0x0b
    5142:	9c 87       	std	Y+12, r25	; 0x0c
    5144:	ad 87       	std	Y+13, r26	; 0x0d
    5146:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5148:	6b 85       	ldd	r22, Y+11	; 0x0b
    514a:	7c 85       	ldd	r23, Y+12	; 0x0c
    514c:	8d 85       	ldd	r24, Y+13	; 0x0d
    514e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5150:	20 e0       	ldi	r18, 0x00	; 0
    5152:	30 e0       	ldi	r19, 0x00	; 0
    5154:	4a ef       	ldi	r20, 0xFA	; 250
    5156:	54 e4       	ldi	r21, 0x44	; 68
    5158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    515c:	dc 01       	movw	r26, r24
    515e:	cb 01       	movw	r24, r22
    5160:	8f 83       	std	Y+7, r24	; 0x07
    5162:	98 87       	std	Y+8, r25	; 0x08
    5164:	a9 87       	std	Y+9, r26	; 0x09
    5166:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5168:	6f 81       	ldd	r22, Y+7	; 0x07
    516a:	78 85       	ldd	r23, Y+8	; 0x08
    516c:	89 85       	ldd	r24, Y+9	; 0x09
    516e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5170:	20 e0       	ldi	r18, 0x00	; 0
    5172:	30 e0       	ldi	r19, 0x00	; 0
    5174:	40 e8       	ldi	r20, 0x80	; 128
    5176:	5f e3       	ldi	r21, 0x3F	; 63
    5178:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    517c:	88 23       	and	r24, r24
    517e:	2c f4       	brge	.+10     	; 0x518a <CLCD_voidInit+0x66>
		__ticks = 1;
    5180:	81 e0       	ldi	r24, 0x01	; 1
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	9e 83       	std	Y+6, r25	; 0x06
    5186:	8d 83       	std	Y+5, r24	; 0x05
    5188:	3f c0       	rjmp	.+126    	; 0x5208 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    518a:	6f 81       	ldd	r22, Y+7	; 0x07
    518c:	78 85       	ldd	r23, Y+8	; 0x08
    518e:	89 85       	ldd	r24, Y+9	; 0x09
    5190:	9a 85       	ldd	r25, Y+10	; 0x0a
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	3f ef       	ldi	r19, 0xFF	; 255
    5196:	4f e7       	ldi	r20, 0x7F	; 127
    5198:	57 e4       	ldi	r21, 0x47	; 71
    519a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    519e:	18 16       	cp	r1, r24
    51a0:	4c f5       	brge	.+82     	; 0x51f4 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    51a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    51a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    51a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    51aa:	20 e0       	ldi	r18, 0x00	; 0
    51ac:	30 e0       	ldi	r19, 0x00	; 0
    51ae:	40 e2       	ldi	r20, 0x20	; 32
    51b0:	51 e4       	ldi	r21, 0x41	; 65
    51b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51b6:	dc 01       	movw	r26, r24
    51b8:	cb 01       	movw	r24, r22
    51ba:	bc 01       	movw	r22, r24
    51bc:	cd 01       	movw	r24, r26
    51be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51c2:	dc 01       	movw	r26, r24
    51c4:	cb 01       	movw	r24, r22
    51c6:	9e 83       	std	Y+6, r25	; 0x06
    51c8:	8d 83       	std	Y+5, r24	; 0x05
    51ca:	0f c0       	rjmp	.+30     	; 0x51ea <CLCD_voidInit+0xc6>
    51cc:	88 ec       	ldi	r24, 0xC8	; 200
    51ce:	90 e0       	ldi	r25, 0x00	; 0
    51d0:	9c 83       	std	Y+4, r25	; 0x04
    51d2:	8b 83       	std	Y+3, r24	; 0x03
    51d4:	8b 81       	ldd	r24, Y+3	; 0x03
    51d6:	9c 81       	ldd	r25, Y+4	; 0x04
    51d8:	01 97       	sbiw	r24, 0x01	; 1
    51da:	f1 f7       	brne	.-4      	; 0x51d8 <CLCD_voidInit+0xb4>
    51dc:	9c 83       	std	Y+4, r25	; 0x04
    51de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51e0:	8d 81       	ldd	r24, Y+5	; 0x05
    51e2:	9e 81       	ldd	r25, Y+6	; 0x06
    51e4:	01 97       	sbiw	r24, 0x01	; 1
    51e6:	9e 83       	std	Y+6, r25	; 0x06
    51e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ea:	8d 81       	ldd	r24, Y+5	; 0x05
    51ec:	9e 81       	ldd	r25, Y+6	; 0x06
    51ee:	00 97       	sbiw	r24, 0x00	; 0
    51f0:	69 f7       	brne	.-38     	; 0x51cc <CLCD_voidInit+0xa8>
    51f2:	14 c0       	rjmp	.+40     	; 0x521c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51f4:	6f 81       	ldd	r22, Y+7	; 0x07
    51f6:	78 85       	ldd	r23, Y+8	; 0x08
    51f8:	89 85       	ldd	r24, Y+9	; 0x09
    51fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    51fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5200:	dc 01       	movw	r26, r24
    5202:	cb 01       	movw	r24, r22
    5204:	9e 83       	std	Y+6, r25	; 0x06
    5206:	8d 83       	std	Y+5, r24	; 0x05
    5208:	8d 81       	ldd	r24, Y+5	; 0x05
    520a:	9e 81       	ldd	r25, Y+6	; 0x06
    520c:	9a 83       	std	Y+2, r25	; 0x02
    520e:	89 83       	std	Y+1, r24	; 0x01
    5210:	89 81       	ldd	r24, Y+1	; 0x01
    5212:	9a 81       	ldd	r25, Y+2	; 0x02
    5214:	01 97       	sbiw	r24, 0x01	; 1
    5216:	f1 f7       	brne	.-4      	; 0x5214 <CLCD_voidInit+0xf0>
    5218:	9a 83       	std	Y+2, r25	; 0x02
    521a:	89 83       	std	Y+1, r24	; 0x01

	/*Send the command*/
	CLCD_voidSendCmd(Local_u8Command);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	CLCD_voidSendCmd(0b00100010);
    521c:	82 e2       	ldi	r24, 0x22	; 34
    521e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <CLCD_voidSendCmd>

	/*If the font is configured by 5x11 change it*/
#if CLCD_FONT_SIZE == FONT_5x11
	voidSetLCDHalfDataPort(0b1100);
    5222:	8c e0       	ldi	r24, 0x0C	; 12
    5224:	0e 94 22 28 	call	0x5044	; 0x5044 <voidSetLCDHalfDataPort>
#else
	voidSetLCDHalfDataPort(0b1000);
#endif

	voidSendEnablePulse();
    5228:	0e 94 93 27 	call	0x4f26	; 0x4f26 <voidSendEnablePulse>
#endif

	/*Display on/off control: display, cursor and blink (Enable/Disable)*/
	Local_u8Command = 0b00001100;
    522c:	8c e0       	ldi	r24, 0x0C	; 12
    522e:	8f 87       	std	Y+15, r24	; 0x0f
	SET_BIT(Local_u8Command, 1);
#endif
#if CLCD_CURSOR_BLINK == ENABLED
	SET_BIT(Local_u8Command, 0);
#endif
	CLCD_voidSendCmd(Local_u8Command);
    5230:	8f 85       	ldd	r24, Y+15	; 0x0f
    5232:	0e 94 52 28 	call	0x50a4	; 0x50a4 <CLCD_voidSendCmd>

	/*Display Clear command*/
	CLCD_voidSendCmd(0b00000001);
    5236:	81 e0       	ldi	r24, 0x01	; 1
    5238:	0e 94 52 28 	call	0x50a4	; 0x50a4 <CLCD_voidSendCmd>

	/*Entry mode set command*/
	CLCD_voidSendCmd(0b00000110);
    523c:	86 e0       	ldi	r24, 0x06	; 6
    523e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <CLCD_voidSendCmd>
}
    5242:	2f 96       	adiw	r28, 0x0f	; 15
    5244:	0f b6       	in	r0, 0x3f	; 63
    5246:	f8 94       	cli
    5248:	de bf       	out	0x3e, r29	; 62
    524a:	0f be       	out	0x3f, r0	; 63
    524c:	cd bf       	out	0x3d, r28	; 61
    524e:	cf 91       	pop	r28
    5250:	df 91       	pop	r29
    5252:	08 95       	ret

00005254 <CLCD_voidClearDisplay>:

/**
 * @brief Function to clear the display.
 */
void CLCD_voidClearDisplay(void)
{
    5254:	df 93       	push	r29
    5256:	cf 93       	push	r28
    5258:	cd b7       	in	r28, 0x3d	; 61
    525a:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <CLCD_voidSendCmd>
}
    5262:	cf 91       	pop	r28
    5264:	df 91       	pop	r29
    5266:	08 95       	ret

00005268 <CLCD_u8SendString>:
 * @brief Function to send string to be printed on the CLCD.
 * @param Copy_ch8String Pointer to the string which needed to be printed.
 * @return Error State
 */
uint8 CLCD_u8SendString(const char *Copy_ch8String)
{
    5268:	df 93       	push	r29
    526a:	cf 93       	push	r28
    526c:	00 d0       	rcall	.+0      	; 0x526e <CLCD_u8SendString+0x6>
    526e:	00 d0       	rcall	.+0      	; 0x5270 <CLCD_u8SendString+0x8>
    5270:	cd b7       	in	r28, 0x3d	; 61
    5272:	de b7       	in	r29, 0x3e	; 62
    5274:	9c 83       	std	Y+4, r25	; 0x04
    5276:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
    5278:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8Counter = 0;
    527a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ch8String != NULL)
    527c:	8b 81       	ldd	r24, Y+3	; 0x03
    527e:	9c 81       	ldd	r25, Y+4	; 0x04
    5280:	00 97       	sbiw	r24, 0x00	; 0
    5282:	d9 f0       	breq	.+54     	; 0x52ba <CLCD_u8SendString+0x52>
    5284:	0e c0       	rjmp	.+28     	; 0x52a2 <CLCD_u8SendString+0x3a>
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_ch8String[Local_u8Counter]);
    5286:	89 81       	ldd	r24, Y+1	; 0x01
    5288:	28 2f       	mov	r18, r24
    528a:	30 e0       	ldi	r19, 0x00	; 0
    528c:	8b 81       	ldd	r24, Y+3	; 0x03
    528e:	9c 81       	ldd	r25, Y+4	; 0x04
    5290:	fc 01       	movw	r30, r24
    5292:	e2 0f       	add	r30, r18
    5294:	f3 1f       	adc	r31, r19
    5296:	80 81       	ld	r24, Z
    5298:	0e 94 72 28 	call	0x50e4	; 0x50e4 <CLCD_voidSendData>
			Local_u8Counter++;
    529c:	89 81       	ldd	r24, Y+1	; 0x01
    529e:	8f 5f       	subi	r24, 0xFF	; 255
    52a0:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8Counter = 0;

	if(Copy_ch8String != NULL)
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
    52a2:	89 81       	ldd	r24, Y+1	; 0x01
    52a4:	28 2f       	mov	r18, r24
    52a6:	30 e0       	ldi	r19, 0x00	; 0
    52a8:	8b 81       	ldd	r24, Y+3	; 0x03
    52aa:	9c 81       	ldd	r25, Y+4	; 0x04
    52ac:	fc 01       	movw	r30, r24
    52ae:	e2 0f       	add	r30, r18
    52b0:	f3 1f       	adc	r31, r19
    52b2:	80 81       	ld	r24, Z
    52b4:	88 23       	and	r24, r24
    52b6:	39 f7       	brne	.-50     	; 0x5286 <CLCD_u8SendString+0x1e>
    52b8:	02 c0       	rjmp	.+4      	; 0x52be <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    52ba:	82 e0       	ldi	r24, 0x02	; 2
    52bc:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    52be:	8a 81       	ldd	r24, Y+2	; 0x02
}
    52c0:	0f 90       	pop	r0
    52c2:	0f 90       	pop	r0
    52c4:	0f 90       	pop	r0
    52c6:	0f 90       	pop	r0
    52c8:	cf 91       	pop	r28
    52ca:	df 91       	pop	r29
    52cc:	08 95       	ret

000052ce <CLCD_voidSendDecimalNumber>:
/**
 * @brief Function to print a decimal number into the CLCD.
 * @param Copy_s32Number Number wanted to be printed.
 */
void CLCD_voidSendDecimalNumber(sint32 Copy_s32Number)
{
    52ce:	0f 93       	push	r16
    52d0:	1f 93       	push	r17
    52d2:	df 93       	push	r29
    52d4:	cf 93       	push	r28
    52d6:	cd b7       	in	r28, 0x3d	; 61
    52d8:	de b7       	in	r29, 0x3e	; 62
    52da:	60 97       	sbiw	r28, 0x10	; 16
    52dc:	0f b6       	in	r0, 0x3f	; 63
    52de:	f8 94       	cli
    52e0:	de bf       	out	0x3e, r29	; 62
    52e2:	0f be       	out	0x3f, r0	; 63
    52e4:	cd bf       	out	0x3d, r28	; 61
    52e6:	6d 87       	std	Y+13, r22	; 0x0d
    52e8:	7e 87       	std	Y+14, r23	; 0x0e
    52ea:	8f 87       	std	Y+15, r24	; 0x0f
    52ec:	98 8b       	std	Y+16, r25	; 0x10
	char Local_ch8Digit[10] = {0};
    52ee:	8a e0       	ldi	r24, 0x0A	; 10
    52f0:	fe 01       	movw	r30, r28
    52f2:	33 96       	adiw	r30, 0x03	; 3
    52f4:	df 01       	movw	r26, r30
    52f6:	98 2f       	mov	r25, r24
    52f8:	1d 92       	st	X+, r1
    52fa:	9a 95       	dec	r25
    52fc:	e9 f7       	brne	.-6      	; 0x52f8 <CLCD_voidSendDecimalNumber+0x2a>

	uint8 Local_u8ReverseCounter = 0u;
    52fe:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	if(Copy_s32Number == 0)
    5300:	8d 85       	ldd	r24, Y+13	; 0x0d
    5302:	9e 85       	ldd	r25, Y+14	; 0x0e
    5304:	af 85       	ldd	r26, Y+15	; 0x0f
    5306:	b8 89       	ldd	r27, Y+16	; 0x10
    5308:	00 97       	sbiw	r24, 0x00	; 0
    530a:	a1 05       	cpc	r26, r1
    530c:	b1 05       	cpc	r27, r1
    530e:	21 f4       	brne	.+8      	; 0x5318 <CLCD_voidSendDecimalNumber+0x4a>
	{
		CLCD_voidSendData('0');
    5310:	80 e3       	ldi	r24, 0x30	; 48
    5312:	0e 94 72 28 	call	0x50e4	; 0x50e4 <CLCD_voidSendData>
    5316:	7b c0       	rjmp	.+246    	; 0x540e <CLCD_voidSendDecimalNumber+0x140>
	}
	else
	{
		/*Check for the negative sign*/
		if(Copy_s32Number < 0)
    5318:	8d 85       	ldd	r24, Y+13	; 0x0d
    531a:	9e 85       	ldd	r25, Y+14	; 0x0e
    531c:	af 85       	ldd	r26, Y+15	; 0x0f
    531e:	b8 89       	ldd	r27, Y+16	; 0x10
    5320:	bb 23       	and	r27, r27
    5322:	0c f0       	brlt	.+2      	; 0x5326 <CLCD_voidSendDecimalNumber+0x58>
    5324:	54 c0       	rjmp	.+168    	; 0x53ce <CLCD_voidSendDecimalNumber+0x100>
		{
			/*Print the negative sign to the lcd*/
			CLCD_voidSendData('-');
    5326:	8d e2       	ldi	r24, 0x2D	; 45
    5328:	0e 94 72 28 	call	0x50e4	; 0x50e4 <CLCD_voidSendData>

			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
    532c:	8d 85       	ldd	r24, Y+13	; 0x0d
    532e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5330:	af 85       	ldd	r26, Y+15	; 0x0f
    5332:	b8 89       	ldd	r27, Y+16	; 0x10
    5334:	b0 95       	com	r27
    5336:	a0 95       	com	r26
    5338:	90 95       	com	r25
    533a:	81 95       	neg	r24
    533c:	9f 4f       	sbci	r25, 0xFF	; 255
    533e:	af 4f       	sbci	r26, 0xFF	; 255
    5340:	bf 4f       	sbci	r27, 0xFF	; 255
    5342:	8d 87       	std	Y+13, r24	; 0x0d
    5344:	9e 87       	std	Y+14, r25	; 0x0e
    5346:	af 87       	std	Y+15, r26	; 0x0f
    5348:	b8 8b       	std	Y+16, r27	; 0x10
    534a:	41 c0       	rjmp	.+130    	; 0x53ce <CLCD_voidSendDecimalNumber+0x100>
		{
			/*
			 * Extract every digit number to the array of characters,
			 * then translate it into ascii value through adding '0'
			 */
			Local_ch8Digit[Local_u8ReverseCounter] = (char) (Copy_s32Number % 10);
    534c:	8a 81       	ldd	r24, Y+2	; 0x02
    534e:	08 2f       	mov	r16, r24
    5350:	10 e0       	ldi	r17, 0x00	; 0
    5352:	8d 85       	ldd	r24, Y+13	; 0x0d
    5354:	9e 85       	ldd	r25, Y+14	; 0x0e
    5356:	af 85       	ldd	r26, Y+15	; 0x0f
    5358:	b8 89       	ldd	r27, Y+16	; 0x10
    535a:	2a e0       	ldi	r18, 0x0A	; 10
    535c:	30 e0       	ldi	r19, 0x00	; 0
    535e:	40 e0       	ldi	r20, 0x00	; 0
    5360:	50 e0       	ldi	r21, 0x00	; 0
    5362:	bc 01       	movw	r22, r24
    5364:	cd 01       	movw	r24, r26
    5366:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divmodsi4>
    536a:	dc 01       	movw	r26, r24
    536c:	cb 01       	movw	r24, r22
    536e:	28 2f       	mov	r18, r24
    5370:	ce 01       	movw	r24, r28
    5372:	03 96       	adiw	r24, 0x03	; 3
    5374:	fc 01       	movw	r30, r24
    5376:	e0 0f       	add	r30, r16
    5378:	f1 1f       	adc	r31, r17
    537a:	20 83       	st	Z, r18
			Local_ch8Digit[Local_u8ReverseCounter] = Local_ch8Digit[Local_u8ReverseCounter] + '0';
    537c:	8a 81       	ldd	r24, Y+2	; 0x02
    537e:	48 2f       	mov	r20, r24
    5380:	50 e0       	ldi	r21, 0x00	; 0
    5382:	8a 81       	ldd	r24, Y+2	; 0x02
    5384:	28 2f       	mov	r18, r24
    5386:	30 e0       	ldi	r19, 0x00	; 0
    5388:	ce 01       	movw	r24, r28
    538a:	03 96       	adiw	r24, 0x03	; 3
    538c:	fc 01       	movw	r30, r24
    538e:	e2 0f       	add	r30, r18
    5390:	f3 1f       	adc	r31, r19
    5392:	80 81       	ld	r24, Z
    5394:	28 2f       	mov	r18, r24
    5396:	20 5d       	subi	r18, 0xD0	; 208
    5398:	ce 01       	movw	r24, r28
    539a:	03 96       	adiw	r24, 0x03	; 3
    539c:	fc 01       	movw	r30, r24
    539e:	e4 0f       	add	r30, r20
    53a0:	f5 1f       	adc	r31, r21
    53a2:	20 83       	st	Z, r18

			Copy_s32Number = Copy_s32Number / 10;
    53a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    53a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    53a8:	af 85       	ldd	r26, Y+15	; 0x0f
    53aa:	b8 89       	ldd	r27, Y+16	; 0x10
    53ac:	2a e0       	ldi	r18, 0x0A	; 10
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	40 e0       	ldi	r20, 0x00	; 0
    53b2:	50 e0       	ldi	r21, 0x00	; 0
    53b4:	bc 01       	movw	r22, r24
    53b6:	cd 01       	movw	r24, r26
    53b8:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divmodsi4>
    53bc:	da 01       	movw	r26, r20
    53be:	c9 01       	movw	r24, r18
    53c0:	8d 87       	std	Y+13, r24	; 0x0d
    53c2:	9e 87       	std	Y+14, r25	; 0x0e
    53c4:	af 87       	std	Y+15, r26	; 0x0f
    53c6:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8ReverseCounter++;
    53c8:	8a 81       	ldd	r24, Y+2	; 0x02
    53ca:	8f 5f       	subi	r24, 0xFF	; 255
    53cc:	8a 83       	std	Y+2, r24	; 0x02
			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
		}

		/*Extracting the number digits into array of characters*/
		while(Copy_s32Number > 0)
    53ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    53d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    53d2:	af 85       	ldd	r26, Y+15	; 0x0f
    53d4:	b8 89       	ldd	r27, Y+16	; 0x10
    53d6:	18 16       	cp	r1, r24
    53d8:	19 06       	cpc	r1, r25
    53da:	1a 06       	cpc	r1, r26
    53dc:	1b 06       	cpc	r1, r27
    53de:	0c f4       	brge	.+2      	; 0x53e2 <CLCD_voidSendDecimalNumber+0x114>
    53e0:	b5 cf       	rjmp	.-150    	; 0x534c <CLCD_voidSendDecimalNumber+0x7e>
			Copy_s32Number = Copy_s32Number / 10;
			Local_u8ReverseCounter++;
		}

		/*Printing every character in the array until the end of the number*/
		Local_u8PrintCounter = Local_u8ReverseCounter;
    53e2:	8a 81       	ldd	r24, Y+2	; 0x02
    53e4:	89 83       	std	Y+1, r24	; 0x01
		do
		{
			CLCD_voidSendData(Local_ch8Digit[Local_u8PrintCounter - 1u]);
    53e6:	89 81       	ldd	r24, Y+1	; 0x01
    53e8:	88 2f       	mov	r24, r24
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	9c 01       	movw	r18, r24
    53ee:	21 50       	subi	r18, 0x01	; 1
    53f0:	30 40       	sbci	r19, 0x00	; 0
    53f2:	ce 01       	movw	r24, r28
    53f4:	03 96       	adiw	r24, 0x03	; 3
    53f6:	fc 01       	movw	r30, r24
    53f8:	e2 0f       	add	r30, r18
    53fa:	f3 1f       	adc	r31, r19
    53fc:	80 81       	ld	r24, Z
    53fe:	0e 94 72 28 	call	0x50e4	; 0x50e4 <CLCD_voidSendData>
			Local_u8PrintCounter--;
    5402:	89 81       	ldd	r24, Y+1	; 0x01
    5404:	81 50       	subi	r24, 0x01	; 1
    5406:	89 83       	std	Y+1, r24	; 0x01
		}
		while(Local_u8PrintCounter > 0u);
    5408:	89 81       	ldd	r24, Y+1	; 0x01
    540a:	88 23       	and	r24, r24
    540c:	61 f7       	brne	.-40     	; 0x53e6 <CLCD_voidSendDecimalNumber+0x118>
	}
}
    540e:	60 96       	adiw	r28, 0x10	; 16
    5410:	0f b6       	in	r0, 0x3f	; 63
    5412:	f8 94       	cli
    5414:	de bf       	out	0x3e, r29	; 62
    5416:	0f be       	out	0x3f, r0	; 63
    5418:	cd bf       	out	0x3d, r28	; 61
    541a:	cf 91       	pop	r28
    541c:	df 91       	pop	r29
    541e:	1f 91       	pop	r17
    5420:	0f 91       	pop	r16
    5422:	08 95       	ret

00005424 <CLCD_voidSendBinaryNumber>:
/**
 * @brief Function that takes decimal number and print its binary representation into the CLCD.
 * @param Copy_s16Number Number wanted to be printed.
 */
void CLCD_voidSendBinaryNumber(sint16 Copy_s16Number)
{
    5424:	df 93       	push	r29
    5426:	cf 93       	push	r28
    5428:	cd b7       	in	r28, 0x3d	; 61
    542a:	de b7       	in	r29, 0x3e	; 62
    542c:	a4 97       	sbiw	r28, 0x24	; 36
    542e:	0f b6       	in	r0, 0x3f	; 63
    5430:	f8 94       	cli
    5432:	de bf       	out	0x3e, r29	; 62
    5434:	0f be       	out	0x3f, r0	; 63
    5436:	cd bf       	out	0x3d, r28	; 61
    5438:	9c a3       	std	Y+36, r25	; 0x24
    543a:	8b a3       	std	Y+35, r24	; 0x23
	uint8 Local_u8BinaryDigits[32] = {0u};
    543c:	80 e2       	ldi	r24, 0x20	; 32
    543e:	fe 01       	movw	r30, r28
    5440:	33 96       	adiw	r30, 0x03	; 3
    5442:	df 01       	movw	r26, r30
    5444:	98 2f       	mov	r25, r24
    5446:	1d 92       	st	X+, r1
    5448:	9a 95       	dec	r25
    544a:	e9 f7       	brne	.-6      	; 0x5446 <CLCD_voidSendBinaryNumber+0x22>

	uint8 Local_u8ReverseCounter = 0u;
    544c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");
    544e:	80 e6       	ldi	r24, 0x60	; 96
    5450:	90 e0       	ldi	r25, 0x00	; 0
    5452:	0e 94 34 29 	call	0x5268	; 0x5268 <CLCD_u8SendString>

	/*Loading zeros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    5456:	1a 82       	std	Y+2, r1	; 0x02
    5458:	23 c0       	rjmp	.+70     	; 0x54a0 <CLCD_voidSendBinaryNumber+0x7c>
	{
		if((Copy_s16Number & 1) == 1)
    545a:	8b a1       	ldd	r24, Y+35	; 0x23
    545c:	9c a1       	ldd	r25, Y+36	; 0x24
    545e:	81 70       	andi	r24, 0x01	; 1
    5460:	90 70       	andi	r25, 0x00	; 0
    5462:	88 23       	and	r24, r24
    5464:	59 f0       	breq	.+22     	; 0x547c <CLCD_voidSendBinaryNumber+0x58>
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 1u;
    5466:	8a 81       	ldd	r24, Y+2	; 0x02
    5468:	28 2f       	mov	r18, r24
    546a:	30 e0       	ldi	r19, 0x00	; 0
    546c:	ce 01       	movw	r24, r28
    546e:	03 96       	adiw	r24, 0x03	; 3
    5470:	fc 01       	movw	r30, r24
    5472:	e2 0f       	add	r30, r18
    5474:	f3 1f       	adc	r31, r19
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	80 83       	st	Z, r24
    547a:	09 c0       	rjmp	.+18     	; 0x548e <CLCD_voidSendBinaryNumber+0x6a>
		}
		else
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 0u;
    547c:	8a 81       	ldd	r24, Y+2	; 0x02
    547e:	28 2f       	mov	r18, r24
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	ce 01       	movw	r24, r28
    5484:	03 96       	adiw	r24, 0x03	; 3
    5486:	fc 01       	movw	r30, r24
    5488:	e2 0f       	add	r30, r18
    548a:	f3 1f       	adc	r31, r19
    548c:	10 82       	st	Z, r1
		}
		Copy_s16Number = Copy_s16Number >> 1;
    548e:	8b a1       	ldd	r24, Y+35	; 0x23
    5490:	9c a1       	ldd	r25, Y+36	; 0x24
    5492:	95 95       	asr	r25
    5494:	87 95       	ror	r24
    5496:	9c a3       	std	Y+36, r25	; 0x24
    5498:	8b a3       	std	Y+35, r24	; 0x23

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");

	/*Loading zeros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    549a:	8a 81       	ldd	r24, Y+2	; 0x02
    549c:	8f 5f       	subi	r24, 0xFF	; 255
    549e:	8a 83       	std	Y+2, r24	; 0x02
    54a0:	8a 81       	ldd	r24, Y+2	; 0x02
    54a2:	80 31       	cpi	r24, 0x10	; 16
    54a4:	d0 f2       	brcs	.-76     	; 0x545a <CLCD_voidSendBinaryNumber+0x36>
		}
		Copy_s16Number = Copy_s16Number >> 1;
	}

	/*Go to the next line in the lcd*/
	CLCD_u8GoToXY(0,1);
    54a6:	80 e0       	ldi	r24, 0x00	; 0
    54a8:	61 e0       	ldi	r22, 0x01	; 1
    54aa:	0e 94 3f 2b 	call	0x567e	; 0x567e <CLCD_u8GoToXY>

	/*Printing every character in the array until the end of the number*/
	Local_u8PrintCounter = 16;
    54ae:	80 e1       	ldi	r24, 0x10	; 16
    54b0:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		if(Local_u8BinaryDigits[Local_u8PrintCounter - 1] == 0)
    54b2:	89 81       	ldd	r24, Y+1	; 0x01
    54b4:	88 2f       	mov	r24, r24
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	9c 01       	movw	r18, r24
    54ba:	21 50       	subi	r18, 0x01	; 1
    54bc:	30 40       	sbci	r19, 0x00	; 0
    54be:	ce 01       	movw	r24, r28
    54c0:	03 96       	adiw	r24, 0x03	; 3
    54c2:	fc 01       	movw	r30, r24
    54c4:	e2 0f       	add	r30, r18
    54c6:	f3 1f       	adc	r31, r19
    54c8:	80 81       	ld	r24, Z
    54ca:	88 23       	and	r24, r24
    54cc:	21 f4       	brne	.+8      	; 0x54d6 <CLCD_voidSendBinaryNumber+0xb2>
		{
			CLCD_voidSendData('0');
    54ce:	80 e3       	ldi	r24, 0x30	; 48
    54d0:	0e 94 72 28 	call	0x50e4	; 0x50e4 <CLCD_voidSendData>
    54d4:	03 c0       	rjmp	.+6      	; 0x54dc <CLCD_voidSendBinaryNumber+0xb8>
		}
		else
		{
			CLCD_voidSendData('1');
    54d6:	81 e3       	ldi	r24, 0x31	; 49
    54d8:	0e 94 72 28 	call	0x50e4	; 0x50e4 <CLCD_voidSendData>
		}

		Local_u8PrintCounter--;
    54dc:	89 81       	ldd	r24, Y+1	; 0x01
    54de:	81 50       	subi	r24, 0x01	; 1
    54e0:	89 83       	std	Y+1, r24	; 0x01
	}
	while(Local_u8PrintCounter > 0);
    54e2:	89 81       	ldd	r24, Y+1	; 0x01
    54e4:	88 23       	and	r24, r24
    54e6:	29 f7       	brne	.-54     	; 0x54b2 <CLCD_voidSendBinaryNumber+0x8e>
}
    54e8:	a4 96       	adiw	r28, 0x24	; 36
    54ea:	0f b6       	in	r0, 0x3f	; 63
    54ec:	f8 94       	cli
    54ee:	de bf       	out	0x3e, r29	; 62
    54f0:	0f be       	out	0x3f, r0	; 63
    54f2:	cd bf       	out	0x3d, r28	; 61
    54f4:	cf 91       	pop	r28
    54f6:	df 91       	pop	r29
    54f8:	08 95       	ret

000054fa <CLCD_voidSendHexaNumber>:
/**
 * @brief Function that takes decimal number and print its hexadecimal representation into the CLCD.
 * @param Copy_s32Number Number wanted to be printed.
 */
void CLCD_voidSendHexaNumber(sint32 Copy_s32Number)
{
    54fa:	df 93       	push	r29
    54fc:	cf 93       	push	r28
    54fe:	cd b7       	in	r28, 0x3d	; 61
    5500:	de b7       	in	r29, 0x3e	; 62
    5502:	a5 97       	sbiw	r28, 0x25	; 37
    5504:	0f b6       	in	r0, 0x3f	; 63
    5506:	f8 94       	cli
    5508:	de bf       	out	0x3e, r29	; 62
    550a:	0f be       	out	0x3f, r0	; 63
    550c:	cd bf       	out	0x3d, r28	; 61
    550e:	6d 8f       	std	Y+29, r22	; 0x1d
    5510:	7e 8f       	std	Y+30, r23	; 0x1e
    5512:	8f 8f       	std	Y+31, r24	; 0x1f
    5514:	98 a3       	std	Y+32, r25	; 0x20
	/*Define Variables*/
	char Local_ch8HexaTable[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
									'A', 'B', 'C', 'D', 'E', 'F'};
    5516:	ce 01       	movw	r24, r28
    5518:	05 96       	adiw	r24, 0x05	; 5
    551a:	9a a3       	std	Y+34, r25	; 0x22
    551c:	89 a3       	std	Y+33, r24	; 0x21
    551e:	ee e6       	ldi	r30, 0x6E	; 110
    5520:	f1 e0       	ldi	r31, 0x01	; 1
    5522:	fc a3       	std	Y+36, r31	; 0x24
    5524:	eb a3       	std	Y+35, r30	; 0x23
    5526:	f0 e1       	ldi	r31, 0x10	; 16
    5528:	fd a3       	std	Y+37, r31	; 0x25
    552a:	eb a1       	ldd	r30, Y+35	; 0x23
    552c:	fc a1       	ldd	r31, Y+36	; 0x24
    552e:	00 80       	ld	r0, Z
    5530:	8b a1       	ldd	r24, Y+35	; 0x23
    5532:	9c a1       	ldd	r25, Y+36	; 0x24
    5534:	01 96       	adiw	r24, 0x01	; 1
    5536:	9c a3       	std	Y+36, r25	; 0x24
    5538:	8b a3       	std	Y+35, r24	; 0x23
    553a:	e9 a1       	ldd	r30, Y+33	; 0x21
    553c:	fa a1       	ldd	r31, Y+34	; 0x22
    553e:	00 82       	st	Z, r0
    5540:	89 a1       	ldd	r24, Y+33	; 0x21
    5542:	9a a1       	ldd	r25, Y+34	; 0x22
    5544:	01 96       	adiw	r24, 0x01	; 1
    5546:	9a a3       	std	Y+34, r25	; 0x22
    5548:	89 a3       	std	Y+33, r24	; 0x21
    554a:	9d a1       	ldd	r25, Y+37	; 0x25
    554c:	91 50       	subi	r25, 0x01	; 1
    554e:	9d a3       	std	Y+37, r25	; 0x25
    5550:	ed a1       	ldd	r30, Y+37	; 0x25
    5552:	ee 23       	and	r30, r30
    5554:	51 f7       	brne	.-44     	; 0x552a <CLCD_voidSendHexaNumber+0x30>
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    5556:	1b 82       	std	Y+3, r1	; 0x03
    5558:	20 c0       	rjmp	.+64     	; 0x559a <CLCD_voidSendHexaNumber+0xa0>
	{
		/*Get the least for bits of the number*/
		Local_u8LeastFourBits = Copy_s32Number & 0x0f;
    555a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    555c:	8f 70       	andi	r24, 0x0F	; 15
    555e:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number = Copy_s32Number >> 4;
    5560:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5562:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5564:	af 8d       	ldd	r26, Y+31	; 0x1f
    5566:	b8 a1       	ldd	r27, Y+32	; 0x20
    5568:	68 94       	set
    556a:	13 f8       	bld	r1, 3
    556c:	b5 95       	asr	r27
    556e:	a7 95       	ror	r26
    5570:	97 95       	ror	r25
    5572:	87 95       	ror	r24
    5574:	16 94       	lsr	r1
    5576:	d1 f7       	brne	.-12     	; 0x556c <CLCD_voidSendHexaNumber+0x72>
    5578:	8d 8f       	std	Y+29, r24	; 0x1d
    557a:	9e 8f       	std	Y+30, r25	; 0x1e
    557c:	af 8f       	std	Y+31, r26	; 0x1f
    557e:	b8 a3       	std	Y+32, r27	; 0x20

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
    5580:	8b 81       	ldd	r24, Y+3	; 0x03
    5582:	28 2f       	mov	r18, r24
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	ce 01       	movw	r24, r28
    5588:	45 96       	adiw	r24, 0x15	; 21
    558a:	fc 01       	movw	r30, r24
    558c:	e2 0f       	add	r30, r18
    558e:	f3 1f       	adc	r31, r19
    5590:	8a 81       	ldd	r24, Y+2	; 0x02
    5592:	80 83       	st	Z, r24
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    5594:	8b 81       	ldd	r24, Y+3	; 0x03
    5596:	8f 5f       	subi	r24, 0xFF	; 255
    5598:	8b 83       	std	Y+3, r24	; 0x03
    559a:	8b 81       	ldd	r24, Y+3	; 0x03
    559c:	88 30       	cpi	r24, 0x08	; 8
    559e:	e8 f2       	brcs	.-70     	; 0x555a <CLCD_voidSendHexaNumber+0x60>

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
	}

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");
    55a0:	83 e6       	ldi	r24, 0x63	; 99
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	0e 94 34 29 	call	0x5268	; 0x5268 <CLCD_u8SendString>

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    55a8:	87 e0       	ldi	r24, 0x07	; 7
    55aa:	8c 83       	std	Y+4, r24	; 0x04
    55ac:	1a c0       	rjmp	.+52     	; 0x55e2 <CLCD_voidSendHexaNumber+0xe8>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
    55ae:	8c 81       	ldd	r24, Y+4	; 0x04
    55b0:	28 2f       	mov	r18, r24
    55b2:	33 27       	eor	r19, r19
    55b4:	27 fd       	sbrc	r18, 7
    55b6:	30 95       	com	r19
    55b8:	ce 01       	movw	r24, r28
    55ba:	45 96       	adiw	r24, 0x15	; 21
    55bc:	fc 01       	movw	r30, r24
    55be:	e2 0f       	add	r30, r18
    55c0:	f3 1f       	adc	r31, r19
    55c2:	80 81       	ld	r24, Z
    55c4:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
    55c6:	89 81       	ldd	r24, Y+1	; 0x01
    55c8:	28 2f       	mov	r18, r24
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	ce 01       	movw	r24, r28
    55ce:	05 96       	adiw	r24, 0x05	; 5
    55d0:	fc 01       	movw	r30, r24
    55d2:	e2 0f       	add	r30, r18
    55d4:	f3 1f       	adc	r31, r19
    55d6:	80 81       	ld	r24, Z
    55d8:	0e 94 72 28 	call	0x50e4	; 0x50e4 <CLCD_voidSendData>

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    55dc:	8c 81       	ldd	r24, Y+4	; 0x04
    55de:	81 50       	subi	r24, 0x01	; 1
    55e0:	8c 83       	std	Y+4, r24	; 0x04
    55e2:	8c 81       	ldd	r24, Y+4	; 0x04
    55e4:	88 23       	and	r24, r24
    55e6:	1c f7       	brge	.-58     	; 0x55ae <CLCD_voidSendHexaNumber+0xb4>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
	}
}
    55e8:	a5 96       	adiw	r28, 0x25	; 37
    55ea:	0f b6       	in	r0, 0x3f	; 63
    55ec:	f8 94       	cli
    55ee:	de bf       	out	0x3e, r29	; 62
    55f0:	0f be       	out	0x3f, r0	; 63
    55f2:	cd bf       	out	0x3d, r28	; 61
    55f4:	cf 91       	pop	r28
    55f6:	df 91       	pop	r29
    55f8:	08 95       	ret

000055fa <CLCD_voidSendSpecialCharacter>:
 * @param Copy_u8PatternNum Number that represent the memory location of the special character.
 * @param Copy_u8XPos X position to print the special character.
 * @param Copy_u8YPos Y position to print the special character.
 */
void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8PatternArr, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    55fa:	df 93       	push	r29
    55fc:	cf 93       	push	r28
    55fe:	cd b7       	in	r28, 0x3d	; 61
    5600:	de b7       	in	r29, 0x3e	; 62
    5602:	27 97       	sbiw	r28, 0x07	; 7
    5604:	0f b6       	in	r0, 0x3f	; 63
    5606:	f8 94       	cli
    5608:	de bf       	out	0x3e, r29	; 62
    560a:	0f be       	out	0x3f, r0	; 63
    560c:	cd bf       	out	0x3d, r28	; 61
    560e:	9c 83       	std	Y+4, r25	; 0x04
    5610:	8b 83       	std	Y+3, r24	; 0x03
    5612:	6d 83       	std	Y+5, r22	; 0x05
    5614:	4e 83       	std	Y+6, r20	; 0x06
    5616:	2f 83       	std	Y+7, r18	; 0x07
	/*Define Variables*/
	uint8 Local_u8CGRAMAdd = Copy_u8PatternNum * 8u;
    5618:	8d 81       	ldd	r24, Y+5	; 0x05
    561a:	88 2f       	mov	r24, r24
    561c:	90 e0       	ldi	r25, 0x00	; 0
    561e:	88 0f       	add	r24, r24
    5620:	99 1f       	adc	r25, r25
    5622:	88 0f       	add	r24, r24
    5624:	99 1f       	adc	r25, r25
    5626:	88 0f       	add	r24, r24
    5628:	99 1f       	adc	r25, r25
    562a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter;

	/*Set bit 6 in CGRAMAdd for CGRAM Address command standard*/
	SET_BIT(Local_u8CGRAMAdd, 6);
    562c:	8a 81       	ldd	r24, Y+2	; 0x02
    562e:	80 64       	ori	r24, 0x40	; 64
    5630:	8a 83       	std	Y+2, r24	; 0x02

	/*Send the address command to CLCD*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    5632:	8a 81       	ldd	r24, Y+2	; 0x02
    5634:	0e 94 52 28 	call	0x50a4	; 0x50a4 <CLCD_voidSendCmd>

	/*Send the pattern to the CLCD*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    5638:	19 82       	std	Y+1, r1	; 0x01
    563a:	0e c0       	rjmp	.+28     	; 0x5658 <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8PatternArr[Local_u8Counter]);
    563c:	89 81       	ldd	r24, Y+1	; 0x01
    563e:	28 2f       	mov	r18, r24
    5640:	30 e0       	ldi	r19, 0x00	; 0
    5642:	8b 81       	ldd	r24, Y+3	; 0x03
    5644:	9c 81       	ldd	r25, Y+4	; 0x04
    5646:	fc 01       	movw	r30, r24
    5648:	e2 0f       	add	r30, r18
    564a:	f3 1f       	adc	r31, r19
    564c:	80 81       	ld	r24, Z
    564e:	0e 94 72 28 	call	0x50e4	; 0x50e4 <CLCD_voidSendData>

	/*Send the address command to CLCD*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Send the pattern to the CLCD*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    5652:	89 81       	ldd	r24, Y+1	; 0x01
    5654:	8f 5f       	subi	r24, 0xFF	; 255
    5656:	89 83       	std	Y+1, r24	; 0x01
    5658:	89 81       	ldd	r24, Y+1	; 0x01
    565a:	88 30       	cpi	r24, 0x08	; 8
    565c:	78 f3       	brcs	.-34     	; 0x563c <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8PatternArr[Local_u8Counter]);
	}

	/*Go to DDRAM Address to display the pattern*/
	CLCD_u8GoToXY(Copy_u8XPos, Copy_u8YPos);
    565e:	8e 81       	ldd	r24, Y+6	; 0x06
    5660:	6f 81       	ldd	r22, Y+7	; 0x07
    5662:	0e 94 3f 2b 	call	0x567e	; 0x567e <CLCD_u8GoToXY>

	/*Display the pattern from CGRAM to DDRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    5666:	8d 81       	ldd	r24, Y+5	; 0x05
    5668:	0e 94 72 28 	call	0x50e4	; 0x50e4 <CLCD_voidSendData>
}
    566c:	27 96       	adiw	r28, 0x07	; 7
    566e:	0f b6       	in	r0, 0x3f	; 63
    5670:	f8 94       	cli
    5672:	de bf       	out	0x3e, r29	; 62
    5674:	0f be       	out	0x3f, r0	; 63
    5676:	cd bf       	out	0x3d, r28	; 61
    5678:	cf 91       	pop	r28
    567a:	df 91       	pop	r29
    567c:	08 95       	ret

0000567e <CLCD_u8GoToXY>:
 * @param Copy_u8XPos X position of the new particular position.
 * @param Copy_u8YPos Y position of the new particular position.
 * @return Error state.
 */
uint8 CLCD_u8GoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    567e:	df 93       	push	r29
    5680:	cf 93       	push	r28
    5682:	00 d0       	rcall	.+0      	; 0x5684 <CLCD_u8GoToXY+0x6>
    5684:	00 d0       	rcall	.+0      	; 0x5686 <CLCD_u8GoToXY+0x8>
    5686:	cd b7       	in	r28, 0x3d	; 61
    5688:	de b7       	in	r29, 0x3e	; 62
    568a:	8b 83       	std	Y+3, r24	; 0x03
    568c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    568e:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8DDRamAdd;

	/*Configure the address of DDRam*/
	if(Copy_u8YPos == 0u)
    5690:	8c 81       	ldd	r24, Y+4	; 0x04
    5692:	88 23       	and	r24, r24
    5694:	19 f4       	brne	.+6      	; 0x569c <CLCD_u8GoToXY+0x1e>
	{
		Local_u8DDRamAdd = 0x00 + Copy_u8XPos;
    5696:	8b 81       	ldd	r24, Y+3	; 0x03
    5698:	89 83       	std	Y+1, r24	; 0x01
    569a:	09 c0       	rjmp	.+18     	; 0x56ae <CLCD_u8GoToXY+0x30>
	}
	else if(Copy_u8YPos == 1u)
    569c:	8c 81       	ldd	r24, Y+4	; 0x04
    569e:	81 30       	cpi	r24, 0x01	; 1
    56a0:	21 f4       	brne	.+8      	; 0x56aa <CLCD_u8GoToXY+0x2c>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    56a2:	8b 81       	ldd	r24, Y+3	; 0x03
    56a4:	80 5c       	subi	r24, 0xC0	; 192
    56a6:	89 83       	std	Y+1, r24	; 0x01
    56a8:	02 c0       	rjmp	.+4      	; 0x56ae <CLCD_u8GoToXY+0x30>
	}
	else
	{
		Local_u8ErrorState = NOK;
    56aa:	81 e0       	ldi	r24, 0x01	; 1
    56ac:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Send DDRam Set Address command to lcd*/
	SET_BIT(Local_u8DDRamAdd,7);
    56ae:	89 81       	ldd	r24, Y+1	; 0x01
    56b0:	80 68       	ori	r24, 0x80	; 128
    56b2:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    56b4:	89 81       	ldd	r24, Y+1	; 0x01
    56b6:	0e 94 52 28 	call	0x50a4	; 0x50a4 <CLCD_voidSendCmd>

	return Local_u8ErrorState;
    56ba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    56bc:	0f 90       	pop	r0
    56be:	0f 90       	pop	r0
    56c0:	0f 90       	pop	r0
    56c2:	0f 90       	pop	r0
    56c4:	cf 91       	pop	r28
    56c6:	df 91       	pop	r29
    56c8:	08 95       	ret

000056ca <Queue_voidCircularArrayQueueInit>:

#include "queue.h"
#include <util/delay.h>

void Queue_voidCircularArrayQueueInit(sint32 *FrontPtr, sint32 *RearPtr)
{
    56ca:	df 93       	push	r29
    56cc:	cf 93       	push	r28
    56ce:	00 d0       	rcall	.+0      	; 0x56d0 <Queue_voidCircularArrayQueueInit+0x6>
    56d0:	00 d0       	rcall	.+0      	; 0x56d2 <Queue_voidCircularArrayQueueInit+0x8>
    56d2:	cd b7       	in	r28, 0x3d	; 61
    56d4:	de b7       	in	r29, 0x3e	; 62
    56d6:	9a 83       	std	Y+2, r25	; 0x02
    56d8:	89 83       	std	Y+1, r24	; 0x01
    56da:	7c 83       	std	Y+4, r23	; 0x04
    56dc:	6b 83       	std	Y+3, r22	; 0x03
	/*Initializing Front and Rear*/
	*FrontPtr = -1;
    56de:	e9 81       	ldd	r30, Y+1	; 0x01
    56e0:	fa 81       	ldd	r31, Y+2	; 0x02
    56e2:	8f ef       	ldi	r24, 0xFF	; 255
    56e4:	9f ef       	ldi	r25, 0xFF	; 255
    56e6:	af ef       	ldi	r26, 0xFF	; 255
    56e8:	bf ef       	ldi	r27, 0xFF	; 255
    56ea:	80 83       	st	Z, r24
    56ec:	91 83       	std	Z+1, r25	; 0x01
    56ee:	a2 83       	std	Z+2, r26	; 0x02
    56f0:	b3 83       	std	Z+3, r27	; 0x03
	*RearPtr = -1;
    56f2:	eb 81       	ldd	r30, Y+3	; 0x03
    56f4:	fc 81       	ldd	r31, Y+4	; 0x04
    56f6:	8f ef       	ldi	r24, 0xFF	; 255
    56f8:	9f ef       	ldi	r25, 0xFF	; 255
    56fa:	af ef       	ldi	r26, 0xFF	; 255
    56fc:	bf ef       	ldi	r27, 0xFF	; 255
    56fe:	80 83       	st	Z, r24
    5700:	91 83       	std	Z+1, r25	; 0x01
    5702:	a2 83       	std	Z+2, r26	; 0x02
    5704:	b3 83       	std	Z+3, r27	; 0x03
}
    5706:	0f 90       	pop	r0
    5708:	0f 90       	pop	r0
    570a:	0f 90       	pop	r0
    570c:	0f 90       	pop	r0
    570e:	cf 91       	pop	r28
    5710:	df 91       	pop	r29
    5712:	08 95       	ret

00005714 <Queue_s32CircularArrayQueueIsFull>:

sint32 Queue_s32CircularArrayQueueIsFull(sint32 Front, sint32 Rear, sint32 Size)
{
    5714:	ef 92       	push	r14
    5716:	ff 92       	push	r15
    5718:	0f 93       	push	r16
    571a:	1f 93       	push	r17
    571c:	df 93       	push	r29
    571e:	cf 93       	push	r28
    5720:	cd b7       	in	r28, 0x3d	; 61
    5722:	de b7       	in	r29, 0x3e	; 62
    5724:	60 97       	sbiw	r28, 0x10	; 16
    5726:	0f b6       	in	r0, 0x3f	; 63
    5728:	f8 94       	cli
    572a:	de bf       	out	0x3e, r29	; 62
    572c:	0f be       	out	0x3f, r0	; 63
    572e:	cd bf       	out	0x3d, r28	; 61
    5730:	6d 83       	std	Y+5, r22	; 0x05
    5732:	7e 83       	std	Y+6, r23	; 0x06
    5734:	8f 83       	std	Y+7, r24	; 0x07
    5736:	98 87       	std	Y+8, r25	; 0x08
    5738:	29 87       	std	Y+9, r18	; 0x09
    573a:	3a 87       	std	Y+10, r19	; 0x0a
    573c:	4b 87       	std	Y+11, r20	; 0x0b
    573e:	5c 87       	std	Y+12, r21	; 0x0c
    5740:	ed 86       	std	Y+13, r14	; 0x0d
    5742:	fe 86       	std	Y+14, r15	; 0x0e
    5744:	0f 87       	std	Y+15, r16	; 0x0f
    5746:	18 8b       	std	Y+16, r17	; 0x10
	/*Defining Variables*/
	sint32 IsFull;

	/*Check if the Queue is full*/
	if(((Front == 0) && (Rear == (Size - 1))) || (Front == Rear + 1))
    5748:	8d 81       	ldd	r24, Y+5	; 0x05
    574a:	9e 81       	ldd	r25, Y+6	; 0x06
    574c:	af 81       	ldd	r26, Y+7	; 0x07
    574e:	b8 85       	ldd	r27, Y+8	; 0x08
    5750:	00 97       	sbiw	r24, 0x00	; 0
    5752:	a1 05       	cpc	r26, r1
    5754:	b1 05       	cpc	r27, r1
    5756:	99 f4       	brne	.+38     	; 0x577e <Queue_s32CircularArrayQueueIsFull+0x6a>
    5758:	8d 85       	ldd	r24, Y+13	; 0x0d
    575a:	9e 85       	ldd	r25, Y+14	; 0x0e
    575c:	af 85       	ldd	r26, Y+15	; 0x0f
    575e:	b8 89       	ldd	r27, Y+16	; 0x10
    5760:	9c 01       	movw	r18, r24
    5762:	ad 01       	movw	r20, r26
    5764:	21 50       	subi	r18, 0x01	; 1
    5766:	30 40       	sbci	r19, 0x00	; 0
    5768:	40 40       	sbci	r20, 0x00	; 0
    576a:	50 40       	sbci	r21, 0x00	; 0
    576c:	89 85       	ldd	r24, Y+9	; 0x09
    576e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5770:	ab 85       	ldd	r26, Y+11	; 0x0b
    5772:	bc 85       	ldd	r27, Y+12	; 0x0c
    5774:	28 17       	cp	r18, r24
    5776:	39 07       	cpc	r19, r25
    5778:	4a 07       	cpc	r20, r26
    577a:	5b 07       	cpc	r21, r27
    577c:	99 f0       	breq	.+38     	; 0x57a4 <Queue_s32CircularArrayQueueIsFull+0x90>
    577e:	89 85       	ldd	r24, Y+9	; 0x09
    5780:	9a 85       	ldd	r25, Y+10	; 0x0a
    5782:	ab 85       	ldd	r26, Y+11	; 0x0b
    5784:	bc 85       	ldd	r27, Y+12	; 0x0c
    5786:	9c 01       	movw	r18, r24
    5788:	ad 01       	movw	r20, r26
    578a:	2f 5f       	subi	r18, 0xFF	; 255
    578c:	3f 4f       	sbci	r19, 0xFF	; 255
    578e:	4f 4f       	sbci	r20, 0xFF	; 255
    5790:	5f 4f       	sbci	r21, 0xFF	; 255
    5792:	8d 81       	ldd	r24, Y+5	; 0x05
    5794:	9e 81       	ldd	r25, Y+6	; 0x06
    5796:	af 81       	ldd	r26, Y+7	; 0x07
    5798:	b8 85       	ldd	r27, Y+8	; 0x08
    579a:	28 17       	cp	r18, r24
    579c:	39 07       	cpc	r19, r25
    579e:	4a 07       	cpc	r20, r26
    57a0:	5b 07       	cpc	r21, r27
    57a2:	49 f4       	brne	.+18     	; 0x57b6 <Queue_s32CircularArrayQueueIsFull+0xa2>
	{
		IsFull = 1;
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	a0 e0       	ldi	r26, 0x00	; 0
    57aa:	b0 e0       	ldi	r27, 0x00	; 0
    57ac:	89 83       	std	Y+1, r24	; 0x01
    57ae:	9a 83       	std	Y+2, r25	; 0x02
    57b0:	ab 83       	std	Y+3, r26	; 0x03
    57b2:	bc 83       	std	Y+4, r27	; 0x04
    57b4:	04 c0       	rjmp	.+8      	; 0x57be <Queue_s32CircularArrayQueueIsFull+0xaa>
	}
	else
	{
		IsFull = 0;
    57b6:	19 82       	std	Y+1, r1	; 0x01
    57b8:	1a 82       	std	Y+2, r1	; 0x02
    57ba:	1b 82       	std	Y+3, r1	; 0x03
    57bc:	1c 82       	std	Y+4, r1	; 0x04
	}

	/*Return State of the Queue*/
	return IsFull;
    57be:	89 81       	ldd	r24, Y+1	; 0x01
    57c0:	9a 81       	ldd	r25, Y+2	; 0x02
    57c2:	ab 81       	ldd	r26, Y+3	; 0x03
    57c4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    57c6:	bc 01       	movw	r22, r24
    57c8:	cd 01       	movw	r24, r26
    57ca:	60 96       	adiw	r28, 0x10	; 16
    57cc:	0f b6       	in	r0, 0x3f	; 63
    57ce:	f8 94       	cli
    57d0:	de bf       	out	0x3e, r29	; 62
    57d2:	0f be       	out	0x3f, r0	; 63
    57d4:	cd bf       	out	0x3d, r28	; 61
    57d6:	cf 91       	pop	r28
    57d8:	df 91       	pop	r29
    57da:	1f 91       	pop	r17
    57dc:	0f 91       	pop	r16
    57de:	ff 90       	pop	r15
    57e0:	ef 90       	pop	r14
    57e2:	08 95       	ret

000057e4 <Queue_s32CircularArrayQueueIsEmpty>:

sint32 Queue_s32CircularArrayQueueIsEmpty(sint32 Front)
{
    57e4:	df 93       	push	r29
    57e6:	cf 93       	push	r28
    57e8:	cd b7       	in	r28, 0x3d	; 61
    57ea:	de b7       	in	r29, 0x3e	; 62
    57ec:	28 97       	sbiw	r28, 0x08	; 8
    57ee:	0f b6       	in	r0, 0x3f	; 63
    57f0:	f8 94       	cli
    57f2:	de bf       	out	0x3e, r29	; 62
    57f4:	0f be       	out	0x3f, r0	; 63
    57f6:	cd bf       	out	0x3d, r28	; 61
    57f8:	6d 83       	std	Y+5, r22	; 0x05
    57fa:	7e 83       	std	Y+6, r23	; 0x06
    57fc:	8f 83       	std	Y+7, r24	; 0x07
    57fe:	98 87       	std	Y+8, r25	; 0x08
	/*Defining Variables*/
	sint32 IsEmpty;

	/*Check if the Queue is full*/
	if(Front == -1)
    5800:	8d 81       	ldd	r24, Y+5	; 0x05
    5802:	9e 81       	ldd	r25, Y+6	; 0x06
    5804:	af 81       	ldd	r26, Y+7	; 0x07
    5806:	b8 85       	ldd	r27, Y+8	; 0x08
    5808:	8f 3f       	cpi	r24, 0xFF	; 255
    580a:	2f ef       	ldi	r18, 0xFF	; 255
    580c:	92 07       	cpc	r25, r18
    580e:	2f ef       	ldi	r18, 0xFF	; 255
    5810:	a2 07       	cpc	r26, r18
    5812:	2f ef       	ldi	r18, 0xFF	; 255
    5814:	b2 07       	cpc	r27, r18
    5816:	49 f4       	brne	.+18     	; 0x582a <Queue_s32CircularArrayQueueIsEmpty+0x46>
	{
		IsEmpty = 1;
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	a0 e0       	ldi	r26, 0x00	; 0
    581e:	b0 e0       	ldi	r27, 0x00	; 0
    5820:	89 83       	std	Y+1, r24	; 0x01
    5822:	9a 83       	std	Y+2, r25	; 0x02
    5824:	ab 83       	std	Y+3, r26	; 0x03
    5826:	bc 83       	std	Y+4, r27	; 0x04
    5828:	04 c0       	rjmp	.+8      	; 0x5832 <Queue_s32CircularArrayQueueIsEmpty+0x4e>
	}
	else
	{
		IsEmpty = 0;
    582a:	19 82       	std	Y+1, r1	; 0x01
    582c:	1a 82       	std	Y+2, r1	; 0x02
    582e:	1b 82       	std	Y+3, r1	; 0x03
    5830:	1c 82       	std	Y+4, r1	; 0x04
	}

	/*Return State of the Queue*/
	return IsEmpty;
    5832:	89 81       	ldd	r24, Y+1	; 0x01
    5834:	9a 81       	ldd	r25, Y+2	; 0x02
    5836:	ab 81       	ldd	r26, Y+3	; 0x03
    5838:	bc 81       	ldd	r27, Y+4	; 0x04
}
    583a:	bc 01       	movw	r22, r24
    583c:	cd 01       	movw	r24, r26
    583e:	28 96       	adiw	r28, 0x08	; 8
    5840:	0f b6       	in	r0, 0x3f	; 63
    5842:	f8 94       	cli
    5844:	de bf       	out	0x3e, r29	; 62
    5846:	0f be       	out	0x3f, r0	; 63
    5848:	cd bf       	out	0x3d, r28	; 61
    584a:	cf 91       	pop	r28
    584c:	df 91       	pop	r29
    584e:	08 95       	ret

00005850 <Queue_voidCircularArrayQueueEnqueue>:

void Queue_voidCircularArrayQueueEnqueue(sint32 *FrontPtr, sint32 *RearPtr, sint32 Size, f32 *QueueArray, f32 NewElement)
{
    5850:	cf 92       	push	r12
    5852:	df 92       	push	r13
    5854:	ef 92       	push	r14
    5856:	ff 92       	push	r15
    5858:	0f 93       	push	r16
    585a:	1f 93       	push	r17
    585c:	df 93       	push	r29
    585e:	cf 93       	push	r28
    5860:	cd b7       	in	r28, 0x3d	; 61
    5862:	de b7       	in	r29, 0x3e	; 62
    5864:	62 97       	sbiw	r28, 0x12	; 18
    5866:	0f b6       	in	r0, 0x3f	; 63
    5868:	f8 94       	cli
    586a:	de bf       	out	0x3e, r29	; 62
    586c:	0f be       	out	0x3f, r0	; 63
    586e:	cd bf       	out	0x3d, r28	; 61
    5870:	9e 83       	std	Y+6, r25	; 0x06
    5872:	8d 83       	std	Y+5, r24	; 0x05
    5874:	78 87       	std	Y+8, r23	; 0x08
    5876:	6f 83       	std	Y+7, r22	; 0x07
    5878:	29 87       	std	Y+9, r18	; 0x09
    587a:	3a 87       	std	Y+10, r19	; 0x0a
    587c:	4b 87       	std	Y+11, r20	; 0x0b
    587e:	5c 87       	std	Y+12, r21	; 0x0c
    5880:	1e 87       	std	Y+14, r17	; 0x0e
    5882:	0d 87       	std	Y+13, r16	; 0x0d
    5884:	cf 86       	std	Y+15, r12	; 0x0f
    5886:	d8 8a       	std	Y+16, r13	; 0x10
    5888:	e9 8a       	std	Y+17, r14	; 0x11
    588a:	fa 8a       	std	Y+18, r15	; 0x12
	/*Defining Variables*/
	sint32 IsFull = Queue_s32CircularArrayQueueIsFull(*FrontPtr, *RearPtr, Size);
    588c:	ed 81       	ldd	r30, Y+5	; 0x05
    588e:	fe 81       	ldd	r31, Y+6	; 0x06
    5890:	80 81       	ld	r24, Z
    5892:	91 81       	ldd	r25, Z+1	; 0x01
    5894:	a2 81       	ldd	r26, Z+2	; 0x02
    5896:	b3 81       	ldd	r27, Z+3	; 0x03
    5898:	ef 81       	ldd	r30, Y+7	; 0x07
    589a:	f8 85       	ldd	r31, Y+8	; 0x08
    589c:	20 81       	ld	r18, Z
    589e:	31 81       	ldd	r19, Z+1	; 0x01
    58a0:	42 81       	ldd	r20, Z+2	; 0x02
    58a2:	53 81       	ldd	r21, Z+3	; 0x03
    58a4:	e9 84       	ldd	r14, Y+9	; 0x09
    58a6:	fa 84       	ldd	r15, Y+10	; 0x0a
    58a8:	0b 85       	ldd	r16, Y+11	; 0x0b
    58aa:	1c 85       	ldd	r17, Y+12	; 0x0c
    58ac:	bc 01       	movw	r22, r24
    58ae:	cd 01       	movw	r24, r26
    58b0:	0e 94 8a 2b 	call	0x5714	; 0x5714 <Queue_s32CircularArrayQueueIsFull>
    58b4:	dc 01       	movw	r26, r24
    58b6:	cb 01       	movw	r24, r22
    58b8:	89 83       	std	Y+1, r24	; 0x01
    58ba:	9a 83       	std	Y+2, r25	; 0x02
    58bc:	ab 83       	std	Y+3, r26	; 0x03
    58be:	bc 83       	std	Y+4, r27	; 0x04

	/*Check is the Queue is full*/
	if(IsFull == 1)
    58c0:	89 81       	ldd	r24, Y+1	; 0x01
    58c2:	9a 81       	ldd	r25, Y+2	; 0x02
    58c4:	ab 81       	ldd	r26, Y+3	; 0x03
    58c6:	bc 81       	ldd	r27, Y+4	; 0x04
    58c8:	81 30       	cpi	r24, 0x01	; 1
    58ca:	91 05       	cpc	r25, r1
    58cc:	a1 05       	cpc	r26, r1
    58ce:	b1 05       	cpc	r27, r1
    58d0:	09 f4       	brne	.+2      	; 0x58d4 <Queue_voidCircularArrayQueueEnqueue+0x84>
    58d2:	54 c0       	rjmp	.+168    	; 0x597c <Queue_voidCircularArrayQueueEnqueue+0x12c>
		/*Do nothing*/
	}
	else
	{
		/*If it is the first insertion*/
		if(*FrontPtr == -1)
    58d4:	ed 81       	ldd	r30, Y+5	; 0x05
    58d6:	fe 81       	ldd	r31, Y+6	; 0x06
    58d8:	80 81       	ld	r24, Z
    58da:	91 81       	ldd	r25, Z+1	; 0x01
    58dc:	a2 81       	ldd	r26, Z+2	; 0x02
    58de:	b3 81       	ldd	r27, Z+3	; 0x03
    58e0:	8f 3f       	cpi	r24, 0xFF	; 255
    58e2:	2f ef       	ldi	r18, 0xFF	; 255
    58e4:	92 07       	cpc	r25, r18
    58e6:	2f ef       	ldi	r18, 0xFF	; 255
    58e8:	a2 07       	cpc	r26, r18
    58ea:	2f ef       	ldi	r18, 0xFF	; 255
    58ec:	b2 07       	cpc	r27, r18
    58ee:	31 f4       	brne	.+12     	; 0x58fc <Queue_voidCircularArrayQueueEnqueue+0xac>
		{
			/*Move the two pointers*/
			*FrontPtr = 0;
    58f0:	ed 81       	ldd	r30, Y+5	; 0x05
    58f2:	fe 81       	ldd	r31, Y+6	; 0x06
    58f4:	10 82       	st	Z, r1
    58f6:	11 82       	std	Z+1, r1	; 0x01
    58f8:	12 82       	std	Z+2, r1	; 0x02
    58fa:	13 82       	std	Z+3, r1	; 0x03
		}

		/*If we reached the end of the array but still there is a place*/
		if(*RearPtr == (Size - 1))
    58fc:	ef 81       	ldd	r30, Y+7	; 0x07
    58fe:	f8 85       	ldd	r31, Y+8	; 0x08
    5900:	20 81       	ld	r18, Z
    5902:	31 81       	ldd	r19, Z+1	; 0x01
    5904:	42 81       	ldd	r20, Z+2	; 0x02
    5906:	53 81       	ldd	r21, Z+3	; 0x03
    5908:	89 85       	ldd	r24, Y+9	; 0x09
    590a:	9a 85       	ldd	r25, Y+10	; 0x0a
    590c:	ab 85       	ldd	r26, Y+11	; 0x0b
    590e:	bc 85       	ldd	r27, Y+12	; 0x0c
    5910:	01 97       	sbiw	r24, 0x01	; 1
    5912:	a1 09       	sbc	r26, r1
    5914:	b1 09       	sbc	r27, r1
    5916:	28 17       	cp	r18, r24
    5918:	39 07       	cpc	r19, r25
    591a:	4a 07       	cpc	r20, r26
    591c:	5b 07       	cpc	r21, r27
    591e:	39 f4       	brne	.+14     	; 0x592e <Queue_voidCircularArrayQueueEnqueue+0xde>
		{
			*RearPtr = 0;
    5920:	ef 81       	ldd	r30, Y+7	; 0x07
    5922:	f8 85       	ldd	r31, Y+8	; 0x08
    5924:	10 82       	st	Z, r1
    5926:	11 82       	std	Z+1, r1	; 0x01
    5928:	12 82       	std	Z+2, r1	; 0x02
    592a:	13 82       	std	Z+3, r1	; 0x03
    592c:	0f c0       	rjmp	.+30     	; 0x594c <Queue_voidCircularArrayQueueEnqueue+0xfc>
		}
		else
		{
			*RearPtr = *RearPtr + 1;
    592e:	ef 81       	ldd	r30, Y+7	; 0x07
    5930:	f8 85       	ldd	r31, Y+8	; 0x08
    5932:	80 81       	ld	r24, Z
    5934:	91 81       	ldd	r25, Z+1	; 0x01
    5936:	a2 81       	ldd	r26, Z+2	; 0x02
    5938:	b3 81       	ldd	r27, Z+3	; 0x03
    593a:	01 96       	adiw	r24, 0x01	; 1
    593c:	a1 1d       	adc	r26, r1
    593e:	b1 1d       	adc	r27, r1
    5940:	ef 81       	ldd	r30, Y+7	; 0x07
    5942:	f8 85       	ldd	r31, Y+8	; 0x08
    5944:	80 83       	st	Z, r24
    5946:	91 83       	std	Z+1, r25	; 0x01
    5948:	a2 83       	std	Z+2, r26	; 0x02
    594a:	b3 83       	std	Z+3, r27	; 0x03
		}

		/*Enqueue Operation*/
		QueueArray[*RearPtr] = NewElement;
    594c:	ef 81       	ldd	r30, Y+7	; 0x07
    594e:	f8 85       	ldd	r31, Y+8	; 0x08
    5950:	80 81       	ld	r24, Z
    5952:	91 81       	ldd	r25, Z+1	; 0x01
    5954:	a2 81       	ldd	r26, Z+2	; 0x02
    5956:	b3 81       	ldd	r27, Z+3	; 0x03
    5958:	9c 01       	movw	r18, r24
    595a:	22 0f       	add	r18, r18
    595c:	33 1f       	adc	r19, r19
    595e:	22 0f       	add	r18, r18
    5960:	33 1f       	adc	r19, r19
    5962:	8d 85       	ldd	r24, Y+13	; 0x0d
    5964:	9e 85       	ldd	r25, Y+14	; 0x0e
    5966:	fc 01       	movw	r30, r24
    5968:	e2 0f       	add	r30, r18
    596a:	f3 1f       	adc	r31, r19
    596c:	8f 85       	ldd	r24, Y+15	; 0x0f
    596e:	98 89       	ldd	r25, Y+16	; 0x10
    5970:	a9 89       	ldd	r26, Y+17	; 0x11
    5972:	ba 89       	ldd	r27, Y+18	; 0x12
    5974:	80 83       	st	Z, r24
    5976:	91 83       	std	Z+1, r25	; 0x01
    5978:	a2 83       	std	Z+2, r26	; 0x02
    597a:	b3 83       	std	Z+3, r27	; 0x03
	}
}
    597c:	62 96       	adiw	r28, 0x12	; 18
    597e:	0f b6       	in	r0, 0x3f	; 63
    5980:	f8 94       	cli
    5982:	de bf       	out	0x3e, r29	; 62
    5984:	0f be       	out	0x3f, r0	; 63
    5986:	cd bf       	out	0x3d, r28	; 61
    5988:	cf 91       	pop	r28
    598a:	df 91       	pop	r29
    598c:	1f 91       	pop	r17
    598e:	0f 91       	pop	r16
    5990:	ff 90       	pop	r15
    5992:	ef 90       	pop	r14
    5994:	df 90       	pop	r13
    5996:	cf 90       	pop	r12
    5998:	08 95       	ret

0000599a <Queue_voidCircularArrayQueueDequeueEnqueue>:

void Queue_voidCircularArrayQueueDequeueEnqueue(sint32 *FrontPtr, sint32 *RearPtr, sint32 Size, f32 *QueueArray, f32 NewElement)
{
    599a:	cf 92       	push	r12
    599c:	df 92       	push	r13
    599e:	ef 92       	push	r14
    59a0:	ff 92       	push	r15
    59a2:	0f 93       	push	r16
    59a4:	1f 93       	push	r17
    59a6:	df 93       	push	r29
    59a8:	cf 93       	push	r28
    59aa:	cd b7       	in	r28, 0x3d	; 61
    59ac:	de b7       	in	r29, 0x3e	; 62
    59ae:	62 97       	sbiw	r28, 0x12	; 18
    59b0:	0f b6       	in	r0, 0x3f	; 63
    59b2:	f8 94       	cli
    59b4:	de bf       	out	0x3e, r29	; 62
    59b6:	0f be       	out	0x3f, r0	; 63
    59b8:	cd bf       	out	0x3d, r28	; 61
    59ba:	9e 83       	std	Y+6, r25	; 0x06
    59bc:	8d 83       	std	Y+5, r24	; 0x05
    59be:	78 87       	std	Y+8, r23	; 0x08
    59c0:	6f 83       	std	Y+7, r22	; 0x07
    59c2:	29 87       	std	Y+9, r18	; 0x09
    59c4:	3a 87       	std	Y+10, r19	; 0x0a
    59c6:	4b 87       	std	Y+11, r20	; 0x0b
    59c8:	5c 87       	std	Y+12, r21	; 0x0c
    59ca:	1e 87       	std	Y+14, r17	; 0x0e
    59cc:	0d 87       	std	Y+13, r16	; 0x0d
    59ce:	cf 86       	std	Y+15, r12	; 0x0f
    59d0:	d8 8a       	std	Y+16, r13	; 0x10
    59d2:	e9 8a       	std	Y+17, r14	; 0x11
    59d4:	fa 8a       	std	Y+18, r15	; 0x12
	/*Defining Variables*/
	sint32 IsFull = Queue_s32CircularArrayQueueIsFull(*FrontPtr, *RearPtr, Size);
    59d6:	ed 81       	ldd	r30, Y+5	; 0x05
    59d8:	fe 81       	ldd	r31, Y+6	; 0x06
    59da:	80 81       	ld	r24, Z
    59dc:	91 81       	ldd	r25, Z+1	; 0x01
    59de:	a2 81       	ldd	r26, Z+2	; 0x02
    59e0:	b3 81       	ldd	r27, Z+3	; 0x03
    59e2:	ef 81       	ldd	r30, Y+7	; 0x07
    59e4:	f8 85       	ldd	r31, Y+8	; 0x08
    59e6:	20 81       	ld	r18, Z
    59e8:	31 81       	ldd	r19, Z+1	; 0x01
    59ea:	42 81       	ldd	r20, Z+2	; 0x02
    59ec:	53 81       	ldd	r21, Z+3	; 0x03
    59ee:	e9 84       	ldd	r14, Y+9	; 0x09
    59f0:	fa 84       	ldd	r15, Y+10	; 0x0a
    59f2:	0b 85       	ldd	r16, Y+11	; 0x0b
    59f4:	1c 85       	ldd	r17, Y+12	; 0x0c
    59f6:	bc 01       	movw	r22, r24
    59f8:	cd 01       	movw	r24, r26
    59fa:	0e 94 8a 2b 	call	0x5714	; 0x5714 <Queue_s32CircularArrayQueueIsFull>
    59fe:	dc 01       	movw	r26, r24
    5a00:	cb 01       	movw	r24, r22
    5a02:	89 83       	std	Y+1, r24	; 0x01
    5a04:	9a 83       	std	Y+2, r25	; 0x02
    5a06:	ab 83       	std	Y+3, r26	; 0x03
    5a08:	bc 83       	std	Y+4, r27	; 0x04

	/*Check is the Queue is full*/
	if(IsFull == 1)
    5a0a:	89 81       	ldd	r24, Y+1	; 0x01
    5a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a0e:	ab 81       	ldd	r26, Y+3	; 0x03
    5a10:	bc 81       	ldd	r27, Y+4	; 0x04
    5a12:	81 30       	cpi	r24, 0x01	; 1
    5a14:	91 05       	cpc	r25, r1
    5a16:	a1 05       	cpc	r26, r1
    5a18:	b1 05       	cpc	r27, r1
    5a1a:	69 f4       	brne	.+26     	; 0x5a36 <Queue_voidCircularArrayQueueDequeueEnqueue+0x9c>
	{
		/*Dequeue an element to empty a place*/
		Queue_s32CircularArrayQueueDequeue(FrontPtr, RearPtr, Size, QueueArray);
    5a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a20:	6f 81       	ldd	r22, Y+7	; 0x07
    5a22:	78 85       	ldd	r23, Y+8	; 0x08
    5a24:	29 85       	ldd	r18, Y+9	; 0x09
    5a26:	3a 85       	ldd	r19, Y+10	; 0x0a
    5a28:	4b 85       	ldd	r20, Y+11	; 0x0b
    5a2a:	5c 85       	ldd	r21, Y+12	; 0x0c
    5a2c:	ed 85       	ldd	r30, Y+13	; 0x0d
    5a2e:	fe 85       	ldd	r31, Y+14	; 0x0e
    5a30:	8f 01       	movw	r16, r30
    5a32:	0e 94 7e 2d 	call	0x5afc	; 0x5afc <Queue_s32CircularArrayQueueDequeue>
	}

	/*Enqueue the new element*/

		/*If it is the first insertion*/
		if(*FrontPtr == -1)
    5a36:	ed 81       	ldd	r30, Y+5	; 0x05
    5a38:	fe 81       	ldd	r31, Y+6	; 0x06
    5a3a:	80 81       	ld	r24, Z
    5a3c:	91 81       	ldd	r25, Z+1	; 0x01
    5a3e:	a2 81       	ldd	r26, Z+2	; 0x02
    5a40:	b3 81       	ldd	r27, Z+3	; 0x03
    5a42:	8f 3f       	cpi	r24, 0xFF	; 255
    5a44:	2f ef       	ldi	r18, 0xFF	; 255
    5a46:	92 07       	cpc	r25, r18
    5a48:	2f ef       	ldi	r18, 0xFF	; 255
    5a4a:	a2 07       	cpc	r26, r18
    5a4c:	2f ef       	ldi	r18, 0xFF	; 255
    5a4e:	b2 07       	cpc	r27, r18
    5a50:	31 f4       	brne	.+12     	; 0x5a5e <Queue_voidCircularArrayQueueDequeueEnqueue+0xc4>
		{
			/*Move the two pointers*/
			*FrontPtr = 0;
    5a52:	ed 81       	ldd	r30, Y+5	; 0x05
    5a54:	fe 81       	ldd	r31, Y+6	; 0x06
    5a56:	10 82       	st	Z, r1
    5a58:	11 82       	std	Z+1, r1	; 0x01
    5a5a:	12 82       	std	Z+2, r1	; 0x02
    5a5c:	13 82       	std	Z+3, r1	; 0x03
		}

		/*If we reached the end of the array but still there is a place*/
		if(*RearPtr == (Size - 1))
    5a5e:	ef 81       	ldd	r30, Y+7	; 0x07
    5a60:	f8 85       	ldd	r31, Y+8	; 0x08
    5a62:	20 81       	ld	r18, Z
    5a64:	31 81       	ldd	r19, Z+1	; 0x01
    5a66:	42 81       	ldd	r20, Z+2	; 0x02
    5a68:	53 81       	ldd	r21, Z+3	; 0x03
    5a6a:	89 85       	ldd	r24, Y+9	; 0x09
    5a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a6e:	ab 85       	ldd	r26, Y+11	; 0x0b
    5a70:	bc 85       	ldd	r27, Y+12	; 0x0c
    5a72:	01 97       	sbiw	r24, 0x01	; 1
    5a74:	a1 09       	sbc	r26, r1
    5a76:	b1 09       	sbc	r27, r1
    5a78:	28 17       	cp	r18, r24
    5a7a:	39 07       	cpc	r19, r25
    5a7c:	4a 07       	cpc	r20, r26
    5a7e:	5b 07       	cpc	r21, r27
    5a80:	39 f4       	brne	.+14     	; 0x5a90 <Queue_voidCircularArrayQueueDequeueEnqueue+0xf6>
		{
			*RearPtr = 0;
    5a82:	ef 81       	ldd	r30, Y+7	; 0x07
    5a84:	f8 85       	ldd	r31, Y+8	; 0x08
    5a86:	10 82       	st	Z, r1
    5a88:	11 82       	std	Z+1, r1	; 0x01
    5a8a:	12 82       	std	Z+2, r1	; 0x02
    5a8c:	13 82       	std	Z+3, r1	; 0x03
    5a8e:	0f c0       	rjmp	.+30     	; 0x5aae <Queue_voidCircularArrayQueueDequeueEnqueue+0x114>
		}
		else
		{
			*RearPtr = *RearPtr + 1;
    5a90:	ef 81       	ldd	r30, Y+7	; 0x07
    5a92:	f8 85       	ldd	r31, Y+8	; 0x08
    5a94:	80 81       	ld	r24, Z
    5a96:	91 81       	ldd	r25, Z+1	; 0x01
    5a98:	a2 81       	ldd	r26, Z+2	; 0x02
    5a9a:	b3 81       	ldd	r27, Z+3	; 0x03
    5a9c:	01 96       	adiw	r24, 0x01	; 1
    5a9e:	a1 1d       	adc	r26, r1
    5aa0:	b1 1d       	adc	r27, r1
    5aa2:	ef 81       	ldd	r30, Y+7	; 0x07
    5aa4:	f8 85       	ldd	r31, Y+8	; 0x08
    5aa6:	80 83       	st	Z, r24
    5aa8:	91 83       	std	Z+1, r25	; 0x01
    5aaa:	a2 83       	std	Z+2, r26	; 0x02
    5aac:	b3 83       	std	Z+3, r27	; 0x03
		}

		/*Enqueue Operation*/
		QueueArray[*RearPtr] = NewElement;
    5aae:	ef 81       	ldd	r30, Y+7	; 0x07
    5ab0:	f8 85       	ldd	r31, Y+8	; 0x08
    5ab2:	80 81       	ld	r24, Z
    5ab4:	91 81       	ldd	r25, Z+1	; 0x01
    5ab6:	a2 81       	ldd	r26, Z+2	; 0x02
    5ab8:	b3 81       	ldd	r27, Z+3	; 0x03
    5aba:	9c 01       	movw	r18, r24
    5abc:	22 0f       	add	r18, r18
    5abe:	33 1f       	adc	r19, r19
    5ac0:	22 0f       	add	r18, r18
    5ac2:	33 1f       	adc	r19, r19
    5ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ac8:	fc 01       	movw	r30, r24
    5aca:	e2 0f       	add	r30, r18
    5acc:	f3 1f       	adc	r31, r19
    5ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ad0:	98 89       	ldd	r25, Y+16	; 0x10
    5ad2:	a9 89       	ldd	r26, Y+17	; 0x11
    5ad4:	ba 89       	ldd	r27, Y+18	; 0x12
    5ad6:	80 83       	st	Z, r24
    5ad8:	91 83       	std	Z+1, r25	; 0x01
    5ada:	a2 83       	std	Z+2, r26	; 0x02
    5adc:	b3 83       	std	Z+3, r27	; 0x03
}
    5ade:	62 96       	adiw	r28, 0x12	; 18
    5ae0:	0f b6       	in	r0, 0x3f	; 63
    5ae2:	f8 94       	cli
    5ae4:	de bf       	out	0x3e, r29	; 62
    5ae6:	0f be       	out	0x3f, r0	; 63
    5ae8:	cd bf       	out	0x3d, r28	; 61
    5aea:	cf 91       	pop	r28
    5aec:	df 91       	pop	r29
    5aee:	1f 91       	pop	r17
    5af0:	0f 91       	pop	r16
    5af2:	ff 90       	pop	r15
    5af4:	ef 90       	pop	r14
    5af6:	df 90       	pop	r13
    5af8:	cf 90       	pop	r12
    5afa:	08 95       	ret

00005afc <Queue_s32CircularArrayQueueDequeue>:

sint32 Queue_s32CircularArrayQueueDequeue(sint32 *FrontPtr, sint32 *RearPtr, sint32 Size, f32 *QueueArray)
{
    5afc:	0f 93       	push	r16
    5afe:	1f 93       	push	r17
    5b00:	df 93       	push	r29
    5b02:	cf 93       	push	r28
    5b04:	cd b7       	in	r28, 0x3d	; 61
    5b06:	de b7       	in	r29, 0x3e	; 62
    5b08:	62 97       	sbiw	r28, 0x12	; 18
    5b0a:	0f b6       	in	r0, 0x3f	; 63
    5b0c:	f8 94       	cli
    5b0e:	de bf       	out	0x3e, r29	; 62
    5b10:	0f be       	out	0x3f, r0	; 63
    5b12:	cd bf       	out	0x3d, r28	; 61
    5b14:	9a 87       	std	Y+10, r25	; 0x0a
    5b16:	89 87       	std	Y+9, r24	; 0x09
    5b18:	7c 87       	std	Y+12, r23	; 0x0c
    5b1a:	6b 87       	std	Y+11, r22	; 0x0b
    5b1c:	2d 87       	std	Y+13, r18	; 0x0d
    5b1e:	3e 87       	std	Y+14, r19	; 0x0e
    5b20:	4f 87       	std	Y+15, r20	; 0x0f
    5b22:	58 8b       	std	Y+16, r21	; 0x10
    5b24:	1a 8b       	std	Y+18, r17	; 0x12
    5b26:	09 8b       	std	Y+17, r16	; 0x11
	/*Defining Variables*/
	sint32 IsEmpty = Queue_s32CircularArrayQueueIsEmpty(*FrontPtr);
    5b28:	e9 85       	ldd	r30, Y+9	; 0x09
    5b2a:	fa 85       	ldd	r31, Y+10	; 0x0a
    5b2c:	80 81       	ld	r24, Z
    5b2e:	91 81       	ldd	r25, Z+1	; 0x01
    5b30:	a2 81       	ldd	r26, Z+2	; 0x02
    5b32:	b3 81       	ldd	r27, Z+3	; 0x03
    5b34:	bc 01       	movw	r22, r24
    5b36:	cd 01       	movw	r24, r26
    5b38:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <Queue_s32CircularArrayQueueIsEmpty>
    5b3c:	dc 01       	movw	r26, r24
    5b3e:	cb 01       	movw	r24, r22
    5b40:	8d 83       	std	Y+5, r24	; 0x05
    5b42:	9e 83       	std	Y+6, r25	; 0x06
    5b44:	af 83       	std	Y+7, r26	; 0x07
    5b46:	b8 87       	std	Y+8, r27	; 0x08
	f32 FrontElement = 0;
    5b48:	80 e0       	ldi	r24, 0x00	; 0
    5b4a:	90 e0       	ldi	r25, 0x00	; 0
    5b4c:	a0 e0       	ldi	r26, 0x00	; 0
    5b4e:	b0 e0       	ldi	r27, 0x00	; 0
    5b50:	89 83       	std	Y+1, r24	; 0x01
    5b52:	9a 83       	std	Y+2, r25	; 0x02
    5b54:	ab 83       	std	Y+3, r26	; 0x03
    5b56:	bc 83       	std	Y+4, r27	; 0x04

	/*Check if the Queue is empty*/
	if(IsEmpty == 1)
    5b58:	8d 81       	ldd	r24, Y+5	; 0x05
    5b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b5c:	af 81       	ldd	r26, Y+7	; 0x07
    5b5e:	b8 85       	ldd	r27, Y+8	; 0x08
    5b60:	81 30       	cpi	r24, 0x01	; 1
    5b62:	91 05       	cpc	r25, r1
    5b64:	a1 05       	cpc	r26, r1
    5b66:	b1 05       	cpc	r27, r1
    5b68:	09 f4       	brne	.+2      	; 0x5b6c <Queue_s32CircularArrayQueueDequeue+0x70>
    5b6a:	66 c0       	rjmp	.+204    	; 0x5c38 <Queue_s32CircularArrayQueueDequeue+0x13c>
		/*Do nothing*/
	}
	else
	{
		/*Dequeue Operation*/
		FrontElement = QueueArray[*FrontPtr];
    5b6c:	e9 85       	ldd	r30, Y+9	; 0x09
    5b6e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5b70:	80 81       	ld	r24, Z
    5b72:	91 81       	ldd	r25, Z+1	; 0x01
    5b74:	a2 81       	ldd	r26, Z+2	; 0x02
    5b76:	b3 81       	ldd	r27, Z+3	; 0x03
    5b78:	9c 01       	movw	r18, r24
    5b7a:	22 0f       	add	r18, r18
    5b7c:	33 1f       	adc	r19, r19
    5b7e:	22 0f       	add	r18, r18
    5b80:	33 1f       	adc	r19, r19
    5b82:	89 89       	ldd	r24, Y+17	; 0x11
    5b84:	9a 89       	ldd	r25, Y+18	; 0x12
    5b86:	fc 01       	movw	r30, r24
    5b88:	e2 0f       	add	r30, r18
    5b8a:	f3 1f       	adc	r31, r19
    5b8c:	80 81       	ld	r24, Z
    5b8e:	91 81       	ldd	r25, Z+1	; 0x01
    5b90:	a2 81       	ldd	r26, Z+2	; 0x02
    5b92:	b3 81       	ldd	r27, Z+3	; 0x03
    5b94:	89 83       	std	Y+1, r24	; 0x01
    5b96:	9a 83       	std	Y+2, r25	; 0x02
    5b98:	ab 83       	std	Y+3, r26	; 0x03
    5b9a:	bc 83       	std	Y+4, r27	; 0x04

		/*If there is only one element in the array*/
		if((*FrontPtr) == (*RearPtr))
    5b9c:	e9 85       	ldd	r30, Y+9	; 0x09
    5b9e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5ba0:	20 81       	ld	r18, Z
    5ba2:	31 81       	ldd	r19, Z+1	; 0x01
    5ba4:	42 81       	ldd	r20, Z+2	; 0x02
    5ba6:	53 81       	ldd	r21, Z+3	; 0x03
    5ba8:	eb 85       	ldd	r30, Y+11	; 0x0b
    5baa:	fc 85       	ldd	r31, Y+12	; 0x0c
    5bac:	80 81       	ld	r24, Z
    5bae:	91 81       	ldd	r25, Z+1	; 0x01
    5bb0:	a2 81       	ldd	r26, Z+2	; 0x02
    5bb2:	b3 81       	ldd	r27, Z+3	; 0x03
    5bb4:	28 17       	cp	r18, r24
    5bb6:	39 07       	cpc	r19, r25
    5bb8:	4a 07       	cpc	r20, r26
    5bba:	5b 07       	cpc	r21, r27
    5bbc:	a9 f4       	brne	.+42     	; 0x5be8 <Queue_s32CircularArrayQueueDequeue+0xec>
		{
			/*Reset front and rear to the initial condition*/
			*FrontPtr = -1;
    5bbe:	e9 85       	ldd	r30, Y+9	; 0x09
    5bc0:	fa 85       	ldd	r31, Y+10	; 0x0a
    5bc2:	8f ef       	ldi	r24, 0xFF	; 255
    5bc4:	9f ef       	ldi	r25, 0xFF	; 255
    5bc6:	af ef       	ldi	r26, 0xFF	; 255
    5bc8:	bf ef       	ldi	r27, 0xFF	; 255
    5bca:	80 83       	st	Z, r24
    5bcc:	91 83       	std	Z+1, r25	; 0x01
    5bce:	a2 83       	std	Z+2, r26	; 0x02
    5bd0:	b3 83       	std	Z+3, r27	; 0x03
			*RearPtr = -1;
    5bd2:	eb 85       	ldd	r30, Y+11	; 0x0b
    5bd4:	fc 85       	ldd	r31, Y+12	; 0x0c
    5bd6:	8f ef       	ldi	r24, 0xFF	; 255
    5bd8:	9f ef       	ldi	r25, 0xFF	; 255
    5bda:	af ef       	ldi	r26, 0xFF	; 255
    5bdc:	bf ef       	ldi	r27, 0xFF	; 255
    5bde:	80 83       	st	Z, r24
    5be0:	91 83       	std	Z+1, r25	; 0x01
    5be2:	a2 83       	std	Z+2, r26	; 0x02
    5be4:	b3 83       	std	Z+3, r27	; 0x03
    5be6:	28 c0       	rjmp	.+80     	; 0x5c38 <Queue_s32CircularArrayQueueDequeue+0x13c>
		}
		/*If we reached the end of the array but still there are elements*/
		else if(*FrontPtr == (Size - 1))
    5be8:	e9 85       	ldd	r30, Y+9	; 0x09
    5bea:	fa 85       	ldd	r31, Y+10	; 0x0a
    5bec:	20 81       	ld	r18, Z
    5bee:	31 81       	ldd	r19, Z+1	; 0x01
    5bf0:	42 81       	ldd	r20, Z+2	; 0x02
    5bf2:	53 81       	ldd	r21, Z+3	; 0x03
    5bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bf8:	af 85       	ldd	r26, Y+15	; 0x0f
    5bfa:	b8 89       	ldd	r27, Y+16	; 0x10
    5bfc:	01 97       	sbiw	r24, 0x01	; 1
    5bfe:	a1 09       	sbc	r26, r1
    5c00:	b1 09       	sbc	r27, r1
    5c02:	28 17       	cp	r18, r24
    5c04:	39 07       	cpc	r19, r25
    5c06:	4a 07       	cpc	r20, r26
    5c08:	5b 07       	cpc	r21, r27
    5c0a:	39 f4       	brne	.+14     	; 0x5c1a <Queue_s32CircularArrayQueueDequeue+0x11e>
		{
			*FrontPtr = 0;
    5c0c:	e9 85       	ldd	r30, Y+9	; 0x09
    5c0e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5c10:	10 82       	st	Z, r1
    5c12:	11 82       	std	Z+1, r1	; 0x01
    5c14:	12 82       	std	Z+2, r1	; 0x02
    5c16:	13 82       	std	Z+3, r1	; 0x03
    5c18:	0f c0       	rjmp	.+30     	; 0x5c38 <Queue_s32CircularArrayQueueDequeue+0x13c>
		}
		else
		{
			*FrontPtr = *FrontPtr + 1;
    5c1a:	e9 85       	ldd	r30, Y+9	; 0x09
    5c1c:	fa 85       	ldd	r31, Y+10	; 0x0a
    5c1e:	80 81       	ld	r24, Z
    5c20:	91 81       	ldd	r25, Z+1	; 0x01
    5c22:	a2 81       	ldd	r26, Z+2	; 0x02
    5c24:	b3 81       	ldd	r27, Z+3	; 0x03
    5c26:	01 96       	adiw	r24, 0x01	; 1
    5c28:	a1 1d       	adc	r26, r1
    5c2a:	b1 1d       	adc	r27, r1
    5c2c:	e9 85       	ldd	r30, Y+9	; 0x09
    5c2e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5c30:	80 83       	st	Z, r24
    5c32:	91 83       	std	Z+1, r25	; 0x01
    5c34:	a2 83       	std	Z+2, r26	; 0x02
    5c36:	b3 83       	std	Z+3, r27	; 0x03
		}
	}

	/*Return the First element of Queue*/
	return FrontElement;
    5c38:	69 81       	ldd	r22, Y+1	; 0x01
    5c3a:	7a 81       	ldd	r23, Y+2	; 0x02
    5c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    5c40:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5c44:	dc 01       	movw	r26, r24
    5c46:	cb 01       	movw	r24, r22
}
    5c48:	bc 01       	movw	r22, r24
    5c4a:	cd 01       	movw	r24, r26
    5c4c:	62 96       	adiw	r28, 0x12	; 18
    5c4e:	0f b6       	in	r0, 0x3f	; 63
    5c50:	f8 94       	cli
    5c52:	de bf       	out	0x3e, r29	; 62
    5c54:	0f be       	out	0x3f, r0	; 63
    5c56:	cd bf       	out	0x3d, r28	; 61
    5c58:	cf 91       	pop	r28
    5c5a:	df 91       	pop	r29
    5c5c:	1f 91       	pop	r17
    5c5e:	0f 91       	pop	r16
    5c60:	08 95       	ret

00005c62 <Queue_s32CircularArrayQueuePeek>:

sint32 Queue_s32CircularArrayQueuePeek(sint32 Front, sint32 *QueueArray)
{
    5c62:	df 93       	push	r29
    5c64:	cf 93       	push	r28
    5c66:	cd b7       	in	r28, 0x3d	; 61
    5c68:	de b7       	in	r29, 0x3e	; 62
    5c6a:	2e 97       	sbiw	r28, 0x0e	; 14
    5c6c:	0f b6       	in	r0, 0x3f	; 63
    5c6e:	f8 94       	cli
    5c70:	de bf       	out	0x3e, r29	; 62
    5c72:	0f be       	out	0x3f, r0	; 63
    5c74:	cd bf       	out	0x3d, r28	; 61
    5c76:	69 87       	std	Y+9, r22	; 0x09
    5c78:	7a 87       	std	Y+10, r23	; 0x0a
    5c7a:	8b 87       	std	Y+11, r24	; 0x0b
    5c7c:	9c 87       	std	Y+12, r25	; 0x0c
    5c7e:	5e 87       	std	Y+14, r21	; 0x0e
    5c80:	4d 87       	std	Y+13, r20	; 0x0d
	/*Defining Variables*/
	sint32 IsEmpty = Queue_s32CircularArrayQueueIsEmpty(Front);
    5c82:	89 85       	ldd	r24, Y+9	; 0x09
    5c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c86:	ab 85       	ldd	r26, Y+11	; 0x0b
    5c88:	bc 85       	ldd	r27, Y+12	; 0x0c
    5c8a:	bc 01       	movw	r22, r24
    5c8c:	cd 01       	movw	r24, r26
    5c8e:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <Queue_s32CircularArrayQueueIsEmpty>
    5c92:	dc 01       	movw	r26, r24
    5c94:	cb 01       	movw	r24, r22
    5c96:	8d 83       	std	Y+5, r24	; 0x05
    5c98:	9e 83       	std	Y+6, r25	; 0x06
    5c9a:	af 83       	std	Y+7, r26	; 0x07
    5c9c:	b8 87       	std	Y+8, r27	; 0x08
	sint32 FrontElement = 0;
    5c9e:	19 82       	std	Y+1, r1	; 0x01
    5ca0:	1a 82       	std	Y+2, r1	; 0x02
    5ca2:	1b 82       	std	Y+3, r1	; 0x03
    5ca4:	1c 82       	std	Y+4, r1	; 0x04

	/*Check is the queue is empty*/
	if(IsEmpty == 1)
    5ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    5caa:	af 81       	ldd	r26, Y+7	; 0x07
    5cac:	b8 85       	ldd	r27, Y+8	; 0x08
    5cae:	81 30       	cpi	r24, 0x01	; 1
    5cb0:	91 05       	cpc	r25, r1
    5cb2:	a1 05       	cpc	r26, r1
    5cb4:	b1 05       	cpc	r27, r1
    5cb6:	a1 f0       	breq	.+40     	; 0x5ce0 <Queue_s32CircularArrayQueuePeek+0x7e>
		/*Do nothing*/
	}
	else
	{
		/*Return Last Queue Element*/
		FrontElement = QueueArray[Front];
    5cb8:	89 85       	ldd	r24, Y+9	; 0x09
    5cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cbc:	9c 01       	movw	r18, r24
    5cbe:	22 0f       	add	r18, r18
    5cc0:	33 1f       	adc	r19, r19
    5cc2:	22 0f       	add	r18, r18
    5cc4:	33 1f       	adc	r19, r19
    5cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cca:	fc 01       	movw	r30, r24
    5ccc:	e2 0f       	add	r30, r18
    5cce:	f3 1f       	adc	r31, r19
    5cd0:	80 81       	ld	r24, Z
    5cd2:	91 81       	ldd	r25, Z+1	; 0x01
    5cd4:	a2 81       	ldd	r26, Z+2	; 0x02
    5cd6:	b3 81       	ldd	r27, Z+3	; 0x03
    5cd8:	89 83       	std	Y+1, r24	; 0x01
    5cda:	9a 83       	std	Y+2, r25	; 0x02
    5cdc:	ab 83       	std	Y+3, r26	; 0x03
    5cde:	bc 83       	std	Y+4, r27	; 0x04
	}

	/*Return the First element of Queue*/
	return FrontElement;
    5ce0:	89 81       	ldd	r24, Y+1	; 0x01
    5ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce4:	ab 81       	ldd	r26, Y+3	; 0x03
    5ce6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5ce8:	bc 01       	movw	r22, r24
    5cea:	cd 01       	movw	r24, r26
    5cec:	2e 96       	adiw	r28, 0x0e	; 14
    5cee:	0f b6       	in	r0, 0x3f	; 63
    5cf0:	f8 94       	cli
    5cf2:	de bf       	out	0x3e, r29	; 62
    5cf4:	0f be       	out	0x3f, r0	; 63
    5cf6:	cd bf       	out	0x3d, r28	; 61
    5cf8:	cf 91       	pop	r28
    5cfa:	df 91       	pop	r29
    5cfc:	08 95       	ret

00005cfe <Queue_s32CircularArrayQueueSize>:

sint32 Queue_s32CircularArrayQueueSize(sint32 Front, sint32 Rear, sint32 Size)
{
    5cfe:	ef 92       	push	r14
    5d00:	ff 92       	push	r15
    5d02:	0f 93       	push	r16
    5d04:	1f 93       	push	r17
    5d06:	df 93       	push	r29
    5d08:	cf 93       	push	r28
    5d0a:	cd b7       	in	r28, 0x3d	; 61
    5d0c:	de b7       	in	r29, 0x3e	; 62
    5d0e:	60 97       	sbiw	r28, 0x10	; 16
    5d10:	0f b6       	in	r0, 0x3f	; 63
    5d12:	f8 94       	cli
    5d14:	de bf       	out	0x3e, r29	; 62
    5d16:	0f be       	out	0x3f, r0	; 63
    5d18:	cd bf       	out	0x3d, r28	; 61
    5d1a:	6d 83       	std	Y+5, r22	; 0x05
    5d1c:	7e 83       	std	Y+6, r23	; 0x06
    5d1e:	8f 83       	std	Y+7, r24	; 0x07
    5d20:	98 87       	std	Y+8, r25	; 0x08
    5d22:	29 87       	std	Y+9, r18	; 0x09
    5d24:	3a 87       	std	Y+10, r19	; 0x0a
    5d26:	4b 87       	std	Y+11, r20	; 0x0b
    5d28:	5c 87       	std	Y+12, r21	; 0x0c
    5d2a:	ed 86       	std	Y+13, r14	; 0x0d
    5d2c:	fe 86       	std	Y+14, r15	; 0x0e
    5d2e:	0f 87       	std	Y+15, r16	; 0x0f
    5d30:	18 8b       	std	Y+16, r17	; 0x10
	/*Defining Variables*/
	sint32 QueueSize;

	if(Front == -1)
    5d32:	8d 81       	ldd	r24, Y+5	; 0x05
    5d34:	9e 81       	ldd	r25, Y+6	; 0x06
    5d36:	af 81       	ldd	r26, Y+7	; 0x07
    5d38:	b8 85       	ldd	r27, Y+8	; 0x08
    5d3a:	8f 3f       	cpi	r24, 0xFF	; 255
    5d3c:	0f ef       	ldi	r16, 0xFF	; 255
    5d3e:	90 07       	cpc	r25, r16
    5d40:	0f ef       	ldi	r16, 0xFF	; 255
    5d42:	a0 07       	cpc	r26, r16
    5d44:	0f ef       	ldi	r16, 0xFF	; 255
    5d46:	b0 07       	cpc	r27, r16
    5d48:	29 f4       	brne	.+10     	; 0x5d54 <Queue_s32CircularArrayQueueSize+0x56>
	{
		QueueSize = 0;
    5d4a:	19 82       	std	Y+1, r1	; 0x01
    5d4c:	1a 82       	std	Y+2, r1	; 0x02
    5d4e:	1b 82       	std	Y+3, r1	; 0x03
    5d50:	1c 82       	std	Y+4, r1	; 0x04
    5d52:	4d c0       	rjmp	.+154    	; 0x5dee <Queue_s32CircularArrayQueueSize+0xf0>
	}
	else if(Rear >= Front)
    5d54:	29 85       	ldd	r18, Y+9	; 0x09
    5d56:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d58:	4b 85       	ldd	r20, Y+11	; 0x0b
    5d5a:	5c 85       	ldd	r21, Y+12	; 0x0c
    5d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    5d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    5d60:	af 81       	ldd	r26, Y+7	; 0x07
    5d62:	b8 85       	ldd	r27, Y+8	; 0x08
    5d64:	28 17       	cp	r18, r24
    5d66:	39 07       	cpc	r19, r25
    5d68:	4a 07       	cpc	r20, r26
    5d6a:	5b 07       	cpc	r21, r27
    5d6c:	c4 f0       	brlt	.+48     	; 0x5d9e <Queue_s32CircularArrayQueueSize+0xa0>
	{
		QueueSize = Rear - Front + 1;
    5d6e:	29 85       	ldd	r18, Y+9	; 0x09
    5d70:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d72:	4b 85       	ldd	r20, Y+11	; 0x0b
    5d74:	5c 85       	ldd	r21, Y+12	; 0x0c
    5d76:	8d 81       	ldd	r24, Y+5	; 0x05
    5d78:	9e 81       	ldd	r25, Y+6	; 0x06
    5d7a:	af 81       	ldd	r26, Y+7	; 0x07
    5d7c:	b8 85       	ldd	r27, Y+8	; 0x08
    5d7e:	79 01       	movw	r14, r18
    5d80:	8a 01       	movw	r16, r20
    5d82:	e8 1a       	sub	r14, r24
    5d84:	f9 0a       	sbc	r15, r25
    5d86:	0a 0b       	sbc	r16, r26
    5d88:	1b 0b       	sbc	r17, r27
    5d8a:	d8 01       	movw	r26, r16
    5d8c:	c7 01       	movw	r24, r14
    5d8e:	01 96       	adiw	r24, 0x01	; 1
    5d90:	a1 1d       	adc	r26, r1
    5d92:	b1 1d       	adc	r27, r1
    5d94:	89 83       	std	Y+1, r24	; 0x01
    5d96:	9a 83       	std	Y+2, r25	; 0x02
    5d98:	ab 83       	std	Y+3, r26	; 0x03
    5d9a:	bc 83       	std	Y+4, r27	; 0x04
    5d9c:	28 c0       	rjmp	.+80     	; 0x5dee <Queue_s32CircularArrayQueueSize+0xf0>
	}
	else if(Front > Rear)
    5d9e:	2d 81       	ldd	r18, Y+5	; 0x05
    5da0:	3e 81       	ldd	r19, Y+6	; 0x06
    5da2:	4f 81       	ldd	r20, Y+7	; 0x07
    5da4:	58 85       	ldd	r21, Y+8	; 0x08
    5da6:	89 85       	ldd	r24, Y+9	; 0x09
    5da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5daa:	ab 85       	ldd	r26, Y+11	; 0x0b
    5dac:	bc 85       	ldd	r27, Y+12	; 0x0c
    5dae:	82 17       	cp	r24, r18
    5db0:	93 07       	cpc	r25, r19
    5db2:	a4 07       	cpc	r26, r20
    5db4:	b5 07       	cpc	r27, r21
    5db6:	dc f4       	brge	.+54     	; 0x5dee <Queue_s32CircularArrayQueueSize+0xf0>
	{
		QueueSize = (Size - Front) + (Rear + 1);
    5db8:	2d 85       	ldd	r18, Y+13	; 0x0d
    5dba:	3e 85       	ldd	r19, Y+14	; 0x0e
    5dbc:	4f 85       	ldd	r20, Y+15	; 0x0f
    5dbe:	58 89       	ldd	r21, Y+16	; 0x10
    5dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    5dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    5dc4:	af 81       	ldd	r26, Y+7	; 0x07
    5dc6:	b8 85       	ldd	r27, Y+8	; 0x08
    5dc8:	28 1b       	sub	r18, r24
    5dca:	39 0b       	sbc	r19, r25
    5dcc:	4a 0b       	sbc	r20, r26
    5dce:	5b 0b       	sbc	r21, r27
    5dd0:	89 85       	ldd	r24, Y+9	; 0x09
    5dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dd4:	ab 85       	ldd	r26, Y+11	; 0x0b
    5dd6:	bc 85       	ldd	r27, Y+12	; 0x0c
    5dd8:	01 96       	adiw	r24, 0x01	; 1
    5dda:	a1 1d       	adc	r26, r1
    5ddc:	b1 1d       	adc	r27, r1
    5dde:	82 0f       	add	r24, r18
    5de0:	93 1f       	adc	r25, r19
    5de2:	a4 1f       	adc	r26, r20
    5de4:	b5 1f       	adc	r27, r21
    5de6:	89 83       	std	Y+1, r24	; 0x01
    5de8:	9a 83       	std	Y+2, r25	; 0x02
    5dea:	ab 83       	std	Y+3, r26	; 0x03
    5dec:	bc 83       	std	Y+4, r27	; 0x04
	}

	/*Return StackSize*/
	return QueueSize;
    5dee:	89 81       	ldd	r24, Y+1	; 0x01
    5df0:	9a 81       	ldd	r25, Y+2	; 0x02
    5df2:	ab 81       	ldd	r26, Y+3	; 0x03
    5df4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5df6:	bc 01       	movw	r22, r24
    5df8:	cd 01       	movw	r24, r26
    5dfa:	60 96       	adiw	r28, 0x10	; 16
    5dfc:	0f b6       	in	r0, 0x3f	; 63
    5dfe:	f8 94       	cli
    5e00:	de bf       	out	0x3e, r29	; 62
    5e02:	0f be       	out	0x3f, r0	; 63
    5e04:	cd bf       	out	0x3d, r28	; 61
    5e06:	cf 91       	pop	r28
    5e08:	df 91       	pop	r29
    5e0a:	1f 91       	pop	r17
    5e0c:	0f 91       	pop	r16
    5e0e:	ff 90       	pop	r15
    5e10:	ef 90       	pop	r14
    5e12:	08 95       	ret

00005e14 <LIBRARY_s32Mapping>:
 * @param Copy_s32InputValue	Input value.
 * @return	Output Value
 */
sint32 LIBRARY_s32Mapping(sint32 Copy_s32InputRangeMin, sint32 Copy_s32InputRangeMax,
		sint32 Copy_s32OutputRangeMin, sint32 Copy_s32OutputRangeMax, sint32 Copy_s32InputValue)
{
    5e14:	af 92       	push	r10
    5e16:	bf 92       	push	r11
    5e18:	cf 92       	push	r12
    5e1a:	df 92       	push	r13
    5e1c:	ef 92       	push	r14
    5e1e:	ff 92       	push	r15
    5e20:	0f 93       	push	r16
    5e22:	1f 93       	push	r17
    5e24:	df 93       	push	r29
    5e26:	cf 93       	push	r28
    5e28:	cd b7       	in	r28, 0x3d	; 61
    5e2a:	de b7       	in	r29, 0x3e	; 62
    5e2c:	64 97       	sbiw	r28, 0x14	; 20
    5e2e:	0f b6       	in	r0, 0x3f	; 63
    5e30:	f8 94       	cli
    5e32:	de bf       	out	0x3e, r29	; 62
    5e34:	0f be       	out	0x3f, r0	; 63
    5e36:	cd bf       	out	0x3d, r28	; 61
    5e38:	6d 83       	std	Y+5, r22	; 0x05
    5e3a:	7e 83       	std	Y+6, r23	; 0x06
    5e3c:	8f 83       	std	Y+7, r24	; 0x07
    5e3e:	98 87       	std	Y+8, r25	; 0x08
    5e40:	29 87       	std	Y+9, r18	; 0x09
    5e42:	3a 87       	std	Y+10, r19	; 0x0a
    5e44:	4b 87       	std	Y+11, r20	; 0x0b
    5e46:	5c 87       	std	Y+12, r21	; 0x0c
    5e48:	ed 86       	std	Y+13, r14	; 0x0d
    5e4a:	fe 86       	std	Y+14, r15	; 0x0e
    5e4c:	0f 87       	std	Y+15, r16	; 0x0f
    5e4e:	18 8b       	std	Y+16, r17	; 0x10
    5e50:	a9 8a       	std	Y+17, r10	; 0x11
    5e52:	ba 8a       	std	Y+18, r11	; 0x12
    5e54:	cb 8a       	std	Y+19, r12	; 0x13
    5e56:	dc 8a       	std	Y+20, r13	; 0x14
	/*Define Variables*/
	sint32 Local_s32OutputValue = 0;
    5e58:	19 82       	std	Y+1, r1	; 0x01
    5e5a:	1a 82       	std	Y+2, r1	; 0x02
    5e5c:	1b 82       	std	Y+3, r1	; 0x03
    5e5e:	1c 82       	std	Y+4, r1	; 0x04

	/*Calculate the output value*/
	Local_s32OutputValue = (Copy_s32OutputRangeMax - Copy_s32OutputRangeMin) * (Copy_s32InputValue - Copy_s32InputRangeMin);
    5e60:	29 89       	ldd	r18, Y+17	; 0x11
    5e62:	3a 89       	ldd	r19, Y+18	; 0x12
    5e64:	4b 89       	ldd	r20, Y+19	; 0x13
    5e66:	5c 89       	ldd	r21, Y+20	; 0x14
    5e68:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e6c:	af 85       	ldd	r26, Y+15	; 0x0f
    5e6e:	b8 89       	ldd	r27, Y+16	; 0x10
    5e70:	79 01       	movw	r14, r18
    5e72:	8a 01       	movw	r16, r20
    5e74:	e8 1a       	sub	r14, r24
    5e76:	f9 0a       	sbc	r15, r25
    5e78:	0a 0b       	sbc	r16, r26
    5e7a:	1b 0b       	sbc	r17, r27
    5e7c:	29 a1       	ldd	r18, Y+33	; 0x21
    5e7e:	3a a1       	ldd	r19, Y+34	; 0x22
    5e80:	4b a1       	ldd	r20, Y+35	; 0x23
    5e82:	5c a1       	ldd	r21, Y+36	; 0x24
    5e84:	8d 81       	ldd	r24, Y+5	; 0x05
    5e86:	9e 81       	ldd	r25, Y+6	; 0x06
    5e88:	af 81       	ldd	r26, Y+7	; 0x07
    5e8a:	b8 85       	ldd	r27, Y+8	; 0x08
    5e8c:	28 1b       	sub	r18, r24
    5e8e:	39 0b       	sbc	r19, r25
    5e90:	4a 0b       	sbc	r20, r26
    5e92:	5b 0b       	sbc	r21, r27
    5e94:	c8 01       	movw	r24, r16
    5e96:	b7 01       	movw	r22, r14
    5e98:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__mulsi3>
    5e9c:	dc 01       	movw	r26, r24
    5e9e:	cb 01       	movw	r24, r22
    5ea0:	89 83       	std	Y+1, r24	; 0x01
    5ea2:	9a 83       	std	Y+2, r25	; 0x02
    5ea4:	ab 83       	std	Y+3, r26	; 0x03
    5ea6:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue / (Copy_s32InputRangeMax - Copy_s32InputRangeMin);
    5ea8:	29 85       	ldd	r18, Y+9	; 0x09
    5eaa:	3a 85       	ldd	r19, Y+10	; 0x0a
    5eac:	4b 85       	ldd	r20, Y+11	; 0x0b
    5eae:	5c 85       	ldd	r21, Y+12	; 0x0c
    5eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    5eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    5eb4:	af 81       	ldd	r26, Y+7	; 0x07
    5eb6:	b8 85       	ldd	r27, Y+8	; 0x08
    5eb8:	28 1b       	sub	r18, r24
    5eba:	39 0b       	sbc	r19, r25
    5ebc:	4a 0b       	sbc	r20, r26
    5ebe:	5b 0b       	sbc	r21, r27
    5ec0:	89 81       	ldd	r24, Y+1	; 0x01
    5ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ec4:	ab 81       	ldd	r26, Y+3	; 0x03
    5ec6:	bc 81       	ldd	r27, Y+4	; 0x04
    5ec8:	bc 01       	movw	r22, r24
    5eca:	cd 01       	movw	r24, r26
    5ecc:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divmodsi4>
    5ed0:	da 01       	movw	r26, r20
    5ed2:	c9 01       	movw	r24, r18
    5ed4:	89 83       	std	Y+1, r24	; 0x01
    5ed6:	9a 83       	std	Y+2, r25	; 0x02
    5ed8:	ab 83       	std	Y+3, r26	; 0x03
    5eda:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue + Copy_s32OutputRangeMin;
    5edc:	29 81       	ldd	r18, Y+1	; 0x01
    5ede:	3a 81       	ldd	r19, Y+2	; 0x02
    5ee0:	4b 81       	ldd	r20, Y+3	; 0x03
    5ee2:	5c 81       	ldd	r21, Y+4	; 0x04
    5ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ee8:	af 85       	ldd	r26, Y+15	; 0x0f
    5eea:	b8 89       	ldd	r27, Y+16	; 0x10
    5eec:	82 0f       	add	r24, r18
    5eee:	93 1f       	adc	r25, r19
    5ef0:	a4 1f       	adc	r26, r20
    5ef2:	b5 1f       	adc	r27, r21
    5ef4:	89 83       	std	Y+1, r24	; 0x01
    5ef6:	9a 83       	std	Y+2, r25	; 0x02
    5ef8:	ab 83       	std	Y+3, r26	; 0x03
    5efa:	bc 83       	std	Y+4, r27	; 0x04

	return Local_s32OutputValue;
    5efc:	89 81       	ldd	r24, Y+1	; 0x01
    5efe:	9a 81       	ldd	r25, Y+2	; 0x02
    5f00:	ab 81       	ldd	r26, Y+3	; 0x03
    5f02:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5f04:	bc 01       	movw	r22, r24
    5f06:	cd 01       	movw	r24, r26
    5f08:	64 96       	adiw	r28, 0x14	; 20
    5f0a:	0f b6       	in	r0, 0x3f	; 63
    5f0c:	f8 94       	cli
    5f0e:	de bf       	out	0x3e, r29	; 62
    5f10:	0f be       	out	0x3f, r0	; 63
    5f12:	cd bf       	out	0x3d, r28	; 61
    5f14:	cf 91       	pop	r28
    5f16:	df 91       	pop	r29
    5f18:	1f 91       	pop	r17
    5f1a:	0f 91       	pop	r16
    5f1c:	ff 90       	pop	r15
    5f1e:	ef 90       	pop	r14
    5f20:	df 90       	pop	r13
    5f22:	cf 90       	pop	r12
    5f24:	bf 90       	pop	r11
    5f26:	af 90       	pop	r10
    5f28:	08 95       	ret

00005f2a <__mulsi3>:
    5f2a:	62 9f       	mul	r22, r18
    5f2c:	d0 01       	movw	r26, r0
    5f2e:	73 9f       	mul	r23, r19
    5f30:	f0 01       	movw	r30, r0
    5f32:	82 9f       	mul	r24, r18
    5f34:	e0 0d       	add	r30, r0
    5f36:	f1 1d       	adc	r31, r1
    5f38:	64 9f       	mul	r22, r20
    5f3a:	e0 0d       	add	r30, r0
    5f3c:	f1 1d       	adc	r31, r1
    5f3e:	92 9f       	mul	r25, r18
    5f40:	f0 0d       	add	r31, r0
    5f42:	83 9f       	mul	r24, r19
    5f44:	f0 0d       	add	r31, r0
    5f46:	74 9f       	mul	r23, r20
    5f48:	f0 0d       	add	r31, r0
    5f4a:	65 9f       	mul	r22, r21
    5f4c:	f0 0d       	add	r31, r0
    5f4e:	99 27       	eor	r25, r25
    5f50:	72 9f       	mul	r23, r18
    5f52:	b0 0d       	add	r27, r0
    5f54:	e1 1d       	adc	r30, r1
    5f56:	f9 1f       	adc	r31, r25
    5f58:	63 9f       	mul	r22, r19
    5f5a:	b0 0d       	add	r27, r0
    5f5c:	e1 1d       	adc	r30, r1
    5f5e:	f9 1f       	adc	r31, r25
    5f60:	bd 01       	movw	r22, r26
    5f62:	cf 01       	movw	r24, r30
    5f64:	11 24       	eor	r1, r1
    5f66:	08 95       	ret

00005f68 <__udivmodhi4>:
    5f68:	aa 1b       	sub	r26, r26
    5f6a:	bb 1b       	sub	r27, r27
    5f6c:	51 e1       	ldi	r21, 0x11	; 17
    5f6e:	07 c0       	rjmp	.+14     	; 0x5f7e <__udivmodhi4_ep>

00005f70 <__udivmodhi4_loop>:
    5f70:	aa 1f       	adc	r26, r26
    5f72:	bb 1f       	adc	r27, r27
    5f74:	a6 17       	cp	r26, r22
    5f76:	b7 07       	cpc	r27, r23
    5f78:	10 f0       	brcs	.+4      	; 0x5f7e <__udivmodhi4_ep>
    5f7a:	a6 1b       	sub	r26, r22
    5f7c:	b7 0b       	sbc	r27, r23

00005f7e <__udivmodhi4_ep>:
    5f7e:	88 1f       	adc	r24, r24
    5f80:	99 1f       	adc	r25, r25
    5f82:	5a 95       	dec	r21
    5f84:	a9 f7       	brne	.-22     	; 0x5f70 <__udivmodhi4_loop>
    5f86:	80 95       	com	r24
    5f88:	90 95       	com	r25
    5f8a:	bc 01       	movw	r22, r24
    5f8c:	cd 01       	movw	r24, r26
    5f8e:	08 95       	ret

00005f90 <__udivmodsi4>:
    5f90:	a1 e2       	ldi	r26, 0x21	; 33
    5f92:	1a 2e       	mov	r1, r26
    5f94:	aa 1b       	sub	r26, r26
    5f96:	bb 1b       	sub	r27, r27
    5f98:	fd 01       	movw	r30, r26
    5f9a:	0d c0       	rjmp	.+26     	; 0x5fb6 <__udivmodsi4_ep>

00005f9c <__udivmodsi4_loop>:
    5f9c:	aa 1f       	adc	r26, r26
    5f9e:	bb 1f       	adc	r27, r27
    5fa0:	ee 1f       	adc	r30, r30
    5fa2:	ff 1f       	adc	r31, r31
    5fa4:	a2 17       	cp	r26, r18
    5fa6:	b3 07       	cpc	r27, r19
    5fa8:	e4 07       	cpc	r30, r20
    5faa:	f5 07       	cpc	r31, r21
    5fac:	20 f0       	brcs	.+8      	; 0x5fb6 <__udivmodsi4_ep>
    5fae:	a2 1b       	sub	r26, r18
    5fb0:	b3 0b       	sbc	r27, r19
    5fb2:	e4 0b       	sbc	r30, r20
    5fb4:	f5 0b       	sbc	r31, r21

00005fb6 <__udivmodsi4_ep>:
    5fb6:	66 1f       	adc	r22, r22
    5fb8:	77 1f       	adc	r23, r23
    5fba:	88 1f       	adc	r24, r24
    5fbc:	99 1f       	adc	r25, r25
    5fbe:	1a 94       	dec	r1
    5fc0:	69 f7       	brne	.-38     	; 0x5f9c <__udivmodsi4_loop>
    5fc2:	60 95       	com	r22
    5fc4:	70 95       	com	r23
    5fc6:	80 95       	com	r24
    5fc8:	90 95       	com	r25
    5fca:	9b 01       	movw	r18, r22
    5fcc:	ac 01       	movw	r20, r24
    5fce:	bd 01       	movw	r22, r26
    5fd0:	cf 01       	movw	r24, r30
    5fd2:	08 95       	ret

00005fd4 <__divmodsi4>:
    5fd4:	97 fb       	bst	r25, 7
    5fd6:	09 2e       	mov	r0, r25
    5fd8:	05 26       	eor	r0, r21
    5fda:	0e d0       	rcall	.+28     	; 0x5ff8 <__divmodsi4_neg1>
    5fdc:	57 fd       	sbrc	r21, 7
    5fde:	04 d0       	rcall	.+8      	; 0x5fe8 <__divmodsi4_neg2>
    5fe0:	d7 df       	rcall	.-82     	; 0x5f90 <__udivmodsi4>
    5fe2:	0a d0       	rcall	.+20     	; 0x5ff8 <__divmodsi4_neg1>
    5fe4:	00 1c       	adc	r0, r0
    5fe6:	38 f4       	brcc	.+14     	; 0x5ff6 <__divmodsi4_exit>

00005fe8 <__divmodsi4_neg2>:
    5fe8:	50 95       	com	r21
    5fea:	40 95       	com	r20
    5fec:	30 95       	com	r19
    5fee:	21 95       	neg	r18
    5ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ff2:	4f 4f       	sbci	r20, 0xFF	; 255
    5ff4:	5f 4f       	sbci	r21, 0xFF	; 255

00005ff6 <__divmodsi4_exit>:
    5ff6:	08 95       	ret

00005ff8 <__divmodsi4_neg1>:
    5ff8:	f6 f7       	brtc	.-4      	; 0x5ff6 <__divmodsi4_exit>
    5ffa:	90 95       	com	r25
    5ffc:	80 95       	com	r24
    5ffe:	70 95       	com	r23
    6000:	61 95       	neg	r22
    6002:	7f 4f       	sbci	r23, 0xFF	; 255
    6004:	8f 4f       	sbci	r24, 0xFF	; 255
    6006:	9f 4f       	sbci	r25, 0xFF	; 255
    6008:	08 95       	ret

0000600a <__prologue_saves__>:
    600a:	2f 92       	push	r2
    600c:	3f 92       	push	r3
    600e:	4f 92       	push	r4
    6010:	5f 92       	push	r5
    6012:	6f 92       	push	r6
    6014:	7f 92       	push	r7
    6016:	8f 92       	push	r8
    6018:	9f 92       	push	r9
    601a:	af 92       	push	r10
    601c:	bf 92       	push	r11
    601e:	cf 92       	push	r12
    6020:	df 92       	push	r13
    6022:	ef 92       	push	r14
    6024:	ff 92       	push	r15
    6026:	0f 93       	push	r16
    6028:	1f 93       	push	r17
    602a:	cf 93       	push	r28
    602c:	df 93       	push	r29
    602e:	cd b7       	in	r28, 0x3d	; 61
    6030:	de b7       	in	r29, 0x3e	; 62
    6032:	ca 1b       	sub	r28, r26
    6034:	db 0b       	sbc	r29, r27
    6036:	0f b6       	in	r0, 0x3f	; 63
    6038:	f8 94       	cli
    603a:	de bf       	out	0x3e, r29	; 62
    603c:	0f be       	out	0x3f, r0	; 63
    603e:	cd bf       	out	0x3d, r28	; 61
    6040:	09 94       	ijmp

00006042 <__epilogue_restores__>:
    6042:	2a 88       	ldd	r2, Y+18	; 0x12
    6044:	39 88       	ldd	r3, Y+17	; 0x11
    6046:	48 88       	ldd	r4, Y+16	; 0x10
    6048:	5f 84       	ldd	r5, Y+15	; 0x0f
    604a:	6e 84       	ldd	r6, Y+14	; 0x0e
    604c:	7d 84       	ldd	r7, Y+13	; 0x0d
    604e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6050:	9b 84       	ldd	r9, Y+11	; 0x0b
    6052:	aa 84       	ldd	r10, Y+10	; 0x0a
    6054:	b9 84       	ldd	r11, Y+9	; 0x09
    6056:	c8 84       	ldd	r12, Y+8	; 0x08
    6058:	df 80       	ldd	r13, Y+7	; 0x07
    605a:	ee 80       	ldd	r14, Y+6	; 0x06
    605c:	fd 80       	ldd	r15, Y+5	; 0x05
    605e:	0c 81       	ldd	r16, Y+4	; 0x04
    6060:	1b 81       	ldd	r17, Y+3	; 0x03
    6062:	aa 81       	ldd	r26, Y+2	; 0x02
    6064:	b9 81       	ldd	r27, Y+1	; 0x01
    6066:	ce 0f       	add	r28, r30
    6068:	d1 1d       	adc	r29, r1
    606a:	0f b6       	in	r0, 0x3f	; 63
    606c:	f8 94       	cli
    606e:	de bf       	out	0x3e, r29	; 62
    6070:	0f be       	out	0x3f, r0	; 63
    6072:	cd bf       	out	0x3d, r28	; 61
    6074:	ed 01       	movw	r28, r26
    6076:	08 95       	ret

00006078 <_exit>:
    6078:	f8 94       	cli

0000607a <__stop_program>:
    607a:	ff cf       	rjmp	.-2      	; 0x607a <__stop_program>
