
ITI_GP_Motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00004364  000043f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  0080007e  0080007e  00004416  2**0
                  ALLOC
  3 .stab         00005058  00000000  00000000  00004418  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000263b  00000000  00000000  00009470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000baab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000bbeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000bd5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e88f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f63c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fa29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000101f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__vector_4>
      14:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__vector_5>
      18:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__vector_6>
      1c:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__vector_7>
      20:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__vector_8>
      24:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__vector_9>
      28:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__vector_10>
      2c:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__vector_13>
      38:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_14>
      3c:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 b0 21 	jmp	0x4360	; 0x4360 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 79 21 	jmp	0x42f2	; 0x42f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 95 21 	jmp	0x432a	; 0x432a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 85 21 	jmp	0x430a	; 0x430a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 85 21 	jmp	0x430a	; 0x430a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 79 21 	jmp	0x42f2	; 0x42f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 95 21 	jmp	0x432a	; 0x432a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 85 21 	jmp	0x430a	; 0x430a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 85 21 	jmp	0x430a	; 0x430a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 85 21 	jmp	0x430a	; 0x430a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 89 21 	jmp	0x4312	; 0x4312 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a5 21 	jmp	0x434a	; 0x434a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:



/*It is the main*/
void main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a1 97       	sbiw	r28, 0x21	; 33
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*Initialize needed peripherals*/
	PORT_voidInit();
     b5a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <PORT_voidInit>
	CLCD_voidInit();
     b5e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <CLCD_voidInit>
	USART_voidInit();
     b62:	0e 94 76 07 	call	0xeec	; 0xeec <USART_voidInit>
//	MCP2515_voidSendInit();
	MCP2515_voidReceiveInit();
     b66:	0e 94 9c 1b 	call	0x3738	; 0x3738 <MCP2515_voidReceiveInit>


	/*Enable Global Interrupt*/
	GIE_voidEnable();
     b6a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <GIE_voidEnable>

	/*Initialize Timer 1 to generate PWM signal to manage the motors speed*/
	TIMER1_CFG_t Local_stTimer1;
	Local_stTimer1.ClkSelect = TIMER1_u8SYS_CLK_BY_8;
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	8f 87       	std	Y+15, r24	; 0x0f
	Local_stTimer1.OCAMode = NON_INVERTED_PWM;
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	89 8b       	std	Y+17, r24	; 0x11
	Local_stTimer1.OCBMode = NON_INVERTED_PWM;
     b76:	84 e0       	ldi	r24, 0x04	; 4
     b78:	8a 8b       	std	Y+18, r24	; 0x12
	Local_stTimer1.WGM = FAST_PWM_10_BITS;
     b7a:	87 e0       	ldi	r24, 0x07	; 7
     b7c:	88 8b       	std	Y+16, r24	; 0x10
	TIMER1_voidSetCompValueChA(1000);
     b7e:	88 ee       	ldi	r24, 0xE8	; 232
     b80:	93 e0       	ldi	r25, 0x03	; 3
     b82:	0e 94 69 12 	call	0x24d2	; 0x24d2 <TIMER1_voidSetCompValueChA>
	TIMER1_voidSetCompValueChB(1000);
     b86:	88 ee       	ldi	r24, 0xE8	; 232
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TIMER1_voidSetCompValueChB>
	TIMER1_u8Init(&Local_stTimer1);
     b8e:	ce 01       	movw	r24, r28
     b90:	0f 96       	adiw	r24, 0x0f	; 15
     b92:	0e 94 2f 0b 	call	0x165e	; 0x165e <TIMER1_u8Init>
//	TIMER0_voidSetCompValue(250);
//	TIMERS_u8SetCallBack(TIMER0_COMP, Main_voidTimer0ISR);
//	TIMERS_u8IntDisable(TIMER0_COMP);

	/*Initialize motors' pins*/
	Main_stRightMotor.Pin1 = DIO_u8PIN2;
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	80 93 a3 00 	sts	0x00A3, r24
	Main_stRightMotor.Pin2 = DIO_u8PIN3;
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	80 93 a4 00 	sts	0x00A4, r24
	Main_stRightMotor.Port = DIO_u8PORTC;
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	80 93 a2 00 	sts	0x00A2, r24

	Main_stLeftMotor.Pin1 = DIO_u8PIN0;
     ba8:	10 92 a6 00 	sts	0x00A6, r1
	Main_stLeftMotor.Pin2 = DIO_u8PIN1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 a7 00 	sts	0x00A7, r24
	Main_stLeftMotor.Port = DIO_u8PORTC;
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	80 93 a5 00 	sts	0x00A5, r24

	/*Super Loop*/
	while(1)
	{
		/*Receive Character message from USART with asynchronous function*/
		USART_u8ReceiveBufferAsynch(&Main_u8ReceivedData, 1, Main_voidReceiveNotificFunc);
     bb8:	8e e7       	ldi	r24, 0x7E	; 126
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	2f e6       	ldi	r18, 0x6F	; 111
     bbe:	37 e0       	ldi	r19, 0x07	; 7
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	a9 01       	movw	r20, r18
     bc4:	0e 94 31 09 	call	0x1262	; 0x1262 <USART_u8ReceiveBufferAsynch>
		DIO_u8GetPinValue(DIO_u8PORTB, DIO_u8PIN3, &Local_u8MCPInterruptPin);
     bc8:	9e 01       	movw	r18, r28
     bca:	2f 5d       	subi	r18, 0xDF	; 223
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	63 e0       	ldi	r22, 0x03	; 3
     bd2:	a9 01       	movw	r20, r18
     bd4:	0e 94 06 18 	call	0x300c	; 0x300c <DIO_u8GetPinValue>

		if(Local_u8MCPInterruptPin == DIO_u8PIN_LOW)
     bd8:	89 a1       	ldd	r24, Y+33	; 0x21
     bda:	88 23       	and	r24, r24
     bdc:	91 f4       	brne	.+36     	; 0xc02 <main+0xbc>
		{
			Local_stTempCANMessage = MCP2515_stReceiveCANmsg();
     bde:	ce 01       	movw	r24, r28
     be0:	43 96       	adiw	r24, 0x13	; 19
     be2:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <MCP2515_stReceiveCANmsg>

			CLCD_voidClearDisplay();
     be6:	0e 94 57 1e 	call	0x3cae	; 0x3cae <CLCD_voidClearDisplay>
			CLCD_u8GoToXY(0, 0);
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <CLCD_u8GoToXY>
			CLCD_voidSendDecimalNumber(Local_stTempCANMessage.id);
     bf2:	8b 89       	ldd	r24, Y+19	; 0x13
     bf4:	9c 89       	ldd	r25, Y+20	; 0x14
     bf6:	ad 89       	ldd	r26, Y+21	; 0x15
     bf8:	be 89       	ldd	r27, Y+22	; 0x16
     bfa:	bc 01       	movw	r22, r24
     bfc:	cd 01       	movw	r24, r26
     bfe:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <CLCD_voidSendDecimalNumber>
		}

		if(Main_u8ReceivedData == 'F')
     c02:	80 91 7e 00 	lds	r24, 0x007E
     c06:	86 34       	cpi	r24, 0x46	; 70
     c08:	71 f4       	brne	.+28     	; 0xc26 <main+0xe0>
		{
			Main_voidSetMotorSpeed(RIGHT_MOTOR, 900u);
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	64 e8       	ldi	r22, 0x84	; 132
     c0e:	73 e0       	ldi	r23, 0x03	; 3
     c10:	0e 94 cb 06 	call	0xd96	; 0xd96 <Main_voidSetMotorSpeed>
			Main_voidSetMotorSpeed(LEFT_MOTOR, 900u);
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	64 e8       	ldi	r22, 0x84	; 132
     c18:	73 e0       	ldi	r23, 0x03	; 3
     c1a:	0e 94 cb 06 	call	0xd96	; 0xd96 <Main_voidSetMotorSpeed>
			Main_voidMove(MOVE_FORWARD);
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	0e 94 2a 07 	call	0xe54	; 0xe54 <Main_voidMove>
     c24:	43 c0       	rjmp	.+134    	; 0xcac <main+0x166>
		}
		else if(Main_u8ReceivedData == 'B')
     c26:	80 91 7e 00 	lds	r24, 0x007E
     c2a:	82 34       	cpi	r24, 0x42	; 66
     c2c:	71 f4       	brne	.+28     	; 0xc4a <main+0x104>
		{
			Main_voidSetMotorSpeed(RIGHT_MOTOR, 900u);
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	64 e8       	ldi	r22, 0x84	; 132
     c32:	73 e0       	ldi	r23, 0x03	; 3
     c34:	0e 94 cb 06 	call	0xd96	; 0xd96 <Main_voidSetMotorSpeed>
			Main_voidSetMotorSpeed(LEFT_MOTOR, 900u);
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	64 e8       	ldi	r22, 0x84	; 132
     c3c:	73 e0       	ldi	r23, 0x03	; 3
     c3e:	0e 94 cb 06 	call	0xd96	; 0xd96 <Main_voidSetMotorSpeed>
			Main_voidMove(MOVE_BACKWARD);
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	0e 94 2a 07 	call	0xe54	; 0xe54 <Main_voidMove>
     c48:	31 c0       	rjmp	.+98     	; 0xcac <main+0x166>
		}
		else if(Main_u8ReceivedData == 'R')
     c4a:	80 91 7e 00 	lds	r24, 0x007E
     c4e:	82 35       	cpi	r24, 0x52	; 82
     c50:	71 f4       	brne	.+28     	; 0xc6e <main+0x128>
		{
			Main_voidSetMotorSpeed(RIGHT_MOTOR, 900u);
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	64 e8       	ldi	r22, 0x84	; 132
     c56:	73 e0       	ldi	r23, 0x03	; 3
     c58:	0e 94 cb 06 	call	0xd96	; 0xd96 <Main_voidSetMotorSpeed>
			Main_voidSetMotorSpeed(LEFT_MOTOR, 900u);
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	64 e8       	ldi	r22, 0x84	; 132
     c60:	73 e0       	ldi	r23, 0x03	; 3
     c62:	0e 94 cb 06 	call	0xd96	; 0xd96 <Main_voidSetMotorSpeed>
			Main_voidMove(MOVE_RIGHT);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	0e 94 2a 07 	call	0xe54	; 0xe54 <Main_voidMove>
     c6c:	1f c0       	rjmp	.+62     	; 0xcac <main+0x166>
		}
		else if(Main_u8ReceivedData == 'L')
     c6e:	80 91 7e 00 	lds	r24, 0x007E
     c72:	8c 34       	cpi	r24, 0x4C	; 76
     c74:	71 f4       	brne	.+28     	; 0xc92 <main+0x14c>
		{
			Main_voidSetMotorSpeed(RIGHT_MOTOR, 900u);
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	64 e8       	ldi	r22, 0x84	; 132
     c7a:	73 e0       	ldi	r23, 0x03	; 3
     c7c:	0e 94 cb 06 	call	0xd96	; 0xd96 <Main_voidSetMotorSpeed>
			Main_voidSetMotorSpeed(LEFT_MOTOR, 900u);
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	64 e8       	ldi	r22, 0x84	; 132
     c84:	73 e0       	ldi	r23, 0x03	; 3
     c86:	0e 94 cb 06 	call	0xd96	; 0xd96 <Main_voidSetMotorSpeed>
			Main_voidMove(MOVE_LEFT);
     c8a:	84 e0       	ldi	r24, 0x04	; 4
     c8c:	0e 94 2a 07 	call	0xe54	; 0xe54 <Main_voidMove>
     c90:	0d c0       	rjmp	.+26     	; 0xcac <main+0x166>
		}
		else
		{
			Main_voidSetMotorSpeed(RIGHT_MOTOR, 0u);
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	0e 94 cb 06 	call	0xd96	; 0xd96 <Main_voidSetMotorSpeed>
			Main_voidSetMotorSpeed(LEFT_MOTOR, 0u);
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	0e 94 cb 06 	call	0xd96	; 0xd96 <Main_voidSetMotorSpeed>
			Main_voidMove(STOP);
     ca6:	85 e0       	ldi	r24, 0x05	; 5
     ca8:	0e 94 2a 07 	call	0xe54	; 0xe54 <Main_voidMove>
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	a8 e4       	ldi	r26, 0x48	; 72
     cb2:	b2 e4       	ldi	r27, 0x42	; 66
     cb4:	8b 87       	std	Y+11, r24	; 0x0b
     cb6:	9c 87       	std	Y+12, r25	; 0x0c
     cb8:	ad 87       	std	Y+13, r26	; 0x0d
     cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
     cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	4a ef       	ldi	r20, 0xFA	; 250
     cca:	54 e4       	ldi	r21, 0x44	; 68
     ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	8f 83       	std	Y+7, r24	; 0x07
     cd6:	98 87       	std	Y+8, r25	; 0x08
     cd8:	a9 87       	std	Y+9, r26	; 0x09
     cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cdc:	6f 81       	ldd	r22, Y+7	; 0x07
     cde:	78 85       	ldd	r23, Y+8	; 0x08
     ce0:	89 85       	ldd	r24, Y+9	; 0x09
     ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e8       	ldi	r20, 0x80	; 128
     cea:	5f e3       	ldi	r21, 0x3F	; 63
     cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf0:	88 23       	and	r24, r24
     cf2:	2c f4       	brge	.+10     	; 0xcfe <main+0x1b8>
		__ticks = 1;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9e 83       	std	Y+6, r25	; 0x06
     cfa:	8d 83       	std	Y+5, r24	; 0x05
     cfc:	3f c0       	rjmp	.+126    	; 0xd7c <main+0x236>
	else if (__tmp > 65535)
     cfe:	6f 81       	ldd	r22, Y+7	; 0x07
     d00:	78 85       	ldd	r23, Y+8	; 0x08
     d02:	89 85       	ldd	r24, Y+9	; 0x09
     d04:	9a 85       	ldd	r25, Y+10	; 0x0a
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	3f ef       	ldi	r19, 0xFF	; 255
     d0a:	4f e7       	ldi	r20, 0x7F	; 127
     d0c:	57 e4       	ldi	r21, 0x47	; 71
     d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d12:	18 16       	cp	r1, r24
     d14:	4c f5       	brge	.+82     	; 0xd68 <main+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d16:	6b 85       	ldd	r22, Y+11	; 0x0b
     d18:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e2       	ldi	r20, 0x20	; 32
     d24:	51 e4       	ldi	r21, 0x41	; 65
     d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	bc 01       	movw	r22, r24
     d30:	cd 01       	movw	r24, r26
     d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	9e 83       	std	Y+6, r25	; 0x06
     d3c:	8d 83       	std	Y+5, r24	; 0x05
     d3e:	0f c0       	rjmp	.+30     	; 0xd5e <main+0x218>
     d40:	88 ec       	ldi	r24, 0xC8	; 200
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	9c 83       	std	Y+4, r25	; 0x04
     d46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	9c 81       	ldd	r25, Y+4	; 0x04
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <main+0x206>
     d50:	9c 83       	std	Y+4, r25	; 0x04
     d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	9e 81       	ldd	r25, Y+6	; 0x06
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	9e 83       	std	Y+6, r25	; 0x06
     d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	69 f7       	brne	.-38     	; 0xd40 <main+0x1fa>
     d66:	14 c0       	rjmp	.+40     	; 0xd90 <main+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d68:	6f 81       	ldd	r22, Y+7	; 0x07
     d6a:	78 85       	ldd	r23, Y+8	; 0x08
     d6c:	89 85       	ldd	r24, Y+9	; 0x09
     d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	9e 83       	std	Y+6, r25	; 0x06
     d7a:	8d 83       	std	Y+5, r24	; 0x05
     d7c:	8d 81       	ldd	r24, Y+5	; 0x05
     d7e:	9e 81       	ldd	r25, Y+6	; 0x06
     d80:	9a 83       	std	Y+2, r25	; 0x02
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <main+0x242>
     d8c:	9a 83       	std	Y+2, r25	; 0x02
     d8e:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(50);
		Main_u8ReceivedData = 0u;
     d90:	10 92 7e 00 	sts	0x007E, r1
     d94:	11 cf       	rjmp	.-478    	; 0xbb8 <main+0x72>

00000d96 <Main_voidSetMotorSpeed>:
	}
}

void Main_voidSetMotorSpeed(uint8 Copy_u8Motor, uint16 Copy_u8Speed)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <Main_voidSetMotorSpeed+0x6>
     d9c:	0f 92       	push	r0
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	7b 83       	std	Y+3, r23	; 0x03
     da6:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8Motor == RIGHT_MOTOR)
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	29 f4       	brne	.+10     	; 0xdb8 <Main_voidSetMotorSpeed+0x22>
    {
    	TIMER1_voidSetCompValueChA(Copy_u8Speed);
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	9b 81       	ldd	r25, Y+3	; 0x03
     db2:	0e 94 69 12 	call	0x24d2	; 0x24d2 <TIMER1_voidSetCompValueChA>
     db6:	07 c0       	rjmp	.+14     	; 0xdc6 <Main_voidSetMotorSpeed+0x30>
    }
    else if(Copy_u8Motor == LEFT_MOTOR)
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	21 f4       	brne	.+8      	; 0xdc6 <Main_voidSetMotorSpeed+0x30>
    {
    	TIMER1_voidSetCompValueChB(Copy_u8Speed);
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b 81       	ldd	r25, Y+3	; 0x03
     dc2:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TIMER1_voidSetCompValueChB>
    }
}
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <Main_voidSetMotorDirection>:

void Main_voidSetMotorDirection(uint8 Copy_u8Motor, uint8 Copy_u8Direction)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <Main_voidSetMotorDirection+0x6>
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8Motor == RIGHT_MOTOR)
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	c1 f4       	brne	.+48     	; 0xe16 <Main_voidSetMotorDirection+0x44>
    {
        if(Copy_u8Direction == FORWARD_DIRECTION)
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	29 f4       	brne	.+10     	; 0xdf6 <Main_voidSetMotorDirection+0x24>
        {
        	MOTOR_u8RotateCW(&Main_stRightMotor);
     dec:	82 ea       	ldi	r24, 0xA2	; 162
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 29 19 	call	0x3252	; 0x3252 <MOTOR_u8RotateCW>
     df4:	2a c0       	rjmp	.+84     	; 0xe4a <Main_voidSetMotorDirection+0x78>
        }
        else if(Copy_u8Direction == BACKWARD_DIRECTION)
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	82 30       	cpi	r24, 0x02	; 2
     dfa:	29 f4       	brne	.+10     	; 0xe06 <Main_voidSetMotorDirection+0x34>
        {
        	MOTOR_u8RotateCCW(&Main_stRightMotor);
     dfc:	82 ea       	ldi	r24, 0xA2	; 162
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 54 19 	call	0x32a8	; 0x32a8 <MOTOR_u8RotateCCW>
     e04:	22 c0       	rjmp	.+68     	; 0xe4a <Main_voidSetMotorDirection+0x78>
        }
        else if(Copy_u8Direction == STOP)
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	85 30       	cpi	r24, 0x05	; 5
     e0a:	f9 f4       	brne	.+62     	; 0xe4a <Main_voidSetMotorDirection+0x78>
        {
        	MOTOR_u8Stop(&Main_stRightMotor);
     e0c:	82 ea       	ldi	r24, 0xA2	; 162
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 7f 19 	call	0x32fe	; 0x32fe <MOTOR_u8Stop>
     e14:	1a c0       	rjmp	.+52     	; 0xe4a <Main_voidSetMotorDirection+0x78>
        }
    }
    else if(Copy_u8Motor == LEFT_MOTOR)
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	82 30       	cpi	r24, 0x02	; 2
     e1a:	b9 f4       	brne	.+46     	; 0xe4a <Main_voidSetMotorDirection+0x78>
    {
        if (Copy_u8Direction == FORWARD_DIRECTION)
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	29 f4       	brne	.+10     	; 0xe2c <Main_voidSetMotorDirection+0x5a>
        {
        	MOTOR_u8RotateCCW(&Main_stLeftMotor);
     e22:	85 ea       	ldi	r24, 0xA5	; 165
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 54 19 	call	0x32a8	; 0x32a8 <MOTOR_u8RotateCCW>
     e2a:	0f c0       	rjmp	.+30     	; 0xe4a <Main_voidSetMotorDirection+0x78>
        }
        else if(Copy_u8Direction == BACKWARD_DIRECTION)
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	82 30       	cpi	r24, 0x02	; 2
     e30:	29 f4       	brne	.+10     	; 0xe3c <Main_voidSetMotorDirection+0x6a>
        {
        	MOTOR_u8RotateCW(&Main_stLeftMotor);
     e32:	85 ea       	ldi	r24, 0xA5	; 165
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 29 19 	call	0x3252	; 0x3252 <MOTOR_u8RotateCW>
     e3a:	07 c0       	rjmp	.+14     	; 0xe4a <Main_voidSetMotorDirection+0x78>
        }
        else if(Copy_u8Direction == STOP)
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	85 30       	cpi	r24, 0x05	; 5
     e40:	21 f4       	brne	.+8      	; 0xe4a <Main_voidSetMotorDirection+0x78>
        {
        	MOTOR_u8Stop(&Main_stLeftMotor);
     e42:	85 ea       	ldi	r24, 0xA5	; 165
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 7f 19 	call	0x32fe	; 0x32fe <MOTOR_u8Stop>
        }
    }
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <Main_voidMove>:

/*
 * you can set the speed here, with a variable
 */
void Main_voidMove(uint8 Copy_u8Direction)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	0f 92       	push	r0
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Direction == MOVE_FORWARD)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	49 f4       	brne	.+18     	; 0xe78 <Main_voidMove+0x24>
	{
		Main_voidSetMotorDirection(RIGHT_MOTOR, FORWARD_DIRECTION);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Main_voidSetMotorDirection>
		Main_voidSetMotorDirection(LEFT_MOTOR, FORWARD_DIRECTION);
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Main_voidSetMotorDirection>
     e76:	2f c0       	rjmp	.+94     	; 0xed6 <Main_voidMove+0x82>
	}
	else if(Copy_u8Direction == MOVE_BACKWARD)
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	82 30       	cpi	r24, 0x02	; 2
     e7c:	49 f4       	brne	.+18     	; 0xe90 <Main_voidMove+0x3c>
	{
		Main_voidSetMotorDirection(RIGHT_MOTOR, BACKWARD_DIRECTION);
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	62 e0       	ldi	r22, 0x02	; 2
     e82:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Main_voidSetMotorDirection>
		Main_voidSetMotorDirection(LEFT_MOTOR, BACKWARD_DIRECTION);
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	62 e0       	ldi	r22, 0x02	; 2
     e8a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Main_voidSetMotorDirection>
     e8e:	23 c0       	rjmp	.+70     	; 0xed6 <Main_voidMove+0x82>
	}
	else if(Copy_u8Direction == MOVE_RIGHT)
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	83 30       	cpi	r24, 0x03	; 3
     e94:	49 f4       	brne	.+18     	; 0xea8 <Main_voidMove+0x54>
	{
		Main_voidSetMotorDirection(RIGHT_MOTOR, BACKWARD_DIRECTION);
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	62 e0       	ldi	r22, 0x02	; 2
     e9a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Main_voidSetMotorDirection>
		Main_voidSetMotorDirection(LEFT_MOTOR, FORWARD_DIRECTION);
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Main_voidSetMotorDirection>
     ea6:	17 c0       	rjmp	.+46     	; 0xed6 <Main_voidMove+0x82>
	}
	else if(Copy_u8Direction == MOVE_LEFT)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	84 30       	cpi	r24, 0x04	; 4
     eac:	49 f4       	brne	.+18     	; 0xec0 <Main_voidMove+0x6c>
	{
		Main_voidSetMotorDirection(RIGHT_MOTOR, FORWARD_DIRECTION);
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Main_voidSetMotorDirection>
		Main_voidSetMotorDirection(LEFT_MOTOR, BACKWARD_DIRECTION);
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	62 e0       	ldi	r22, 0x02	; 2
     eba:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Main_voidSetMotorDirection>
     ebe:	0b c0       	rjmp	.+22     	; 0xed6 <Main_voidMove+0x82>
	}
	else if(Copy_u8Direction == STOP)
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	85 30       	cpi	r24, 0x05	; 5
     ec4:	41 f4       	brne	.+16     	; 0xed6 <Main_voidMove+0x82>
	{
		Main_voidSetMotorDirection(RIGHT_MOTOR, STOP);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	65 e0       	ldi	r22, 0x05	; 5
     eca:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Main_voidSetMotorDirection>
		Main_voidSetMotorDirection(LEFT_MOTOR, STOP);
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	65 e0       	ldi	r22, 0x05	; 5
     ed2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Main_voidSetMotorDirection>
	}
}
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <Main_voidReceiveNotificFunc>:

/*USART Receive ISR*/
void Main_voidReceiveNotificFunc(void)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62

}
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <USART_voidInit>:

/**
 * @brief Function to initialize the USART peripheral.
 */
void USART_voidInit(void)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	/*Define Temporary Variable for UCSRC*/
	uint8 Local_u8TempUCSRC = 0u;
     ef6:	19 82       	std	Y+1, r1	; 0x01

	/*Enable Receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
     ef8:	aa e2       	ldi	r26, 0x2A	; 42
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ea e2       	ldi	r30, 0x2A	; 42
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	8c 93       	st	X, r24

	/*Enable Transmitter*/
	SET_BIT(UCSRB,UCSRB_TXEN);
     f06:	aa e2       	ldi	r26, 0x2A	; 42
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ea e2       	ldi	r30, 0x2A	; 42
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	88 60       	ori	r24, 0x08	; 8
     f12:	8c 93       	st	X, r24

	/*Disable Double Transmission Speed*/
	CLR_BIT(UCSRA,UCSRA_U2X);
     f14:	ab e2       	ldi	r26, 0x2B	; 43
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	eb e2       	ldi	r30, 0x2B	; 43
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8d 7f       	andi	r24, 0xFD	; 253
     f20:	8c 93       	st	X, r24
	CLR_BIT(Local_u8TempUCSRC, UCSRC_UCSZ0);
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ1);
	CLR_BIT(UCSRB,UCSRB_UCSZ2);

#elif USART_u8CHAR_SIZE == EIGHT_BITS_CHAR_SIZE
	Local_u8TempUCSRC &= CHAR_SIZE_MASK;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	89 7f       	andi	r24, 0xF9	; 249
     f26:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ0);
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	82 60       	ori	r24, 0x02	; 2
     f2c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ1);
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	84 60       	ori	r24, 0x04	; 4
     f32:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
     f34:	aa e2       	ldi	r26, 0x2A	; 42
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ea e2       	ldi	r30, 0x2A	; 42
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8b 7f       	andi	r24, 0xFB	; 251
     f40:	8c 93       	st	X, r24
	/*Select Synchronization Mode*/
#if USART_u8SYNCH_MODE == SYNCHRONOUS_MODE
	SET_BIT(Local_u8TempUCSRC,UCSRC_UMSEL);

#elif USART_u8SYNCH_MODE == ASYNCHRONOUS_MODE
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UMSEL);
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	8f 7b       	andi	r24, 0xBF	; 191
     f46:	89 83       	std	Y+1, r24	; 0x01
#error Wrong USART_u8SYNCH_MODE configuration type
#endif

	/*Select Parity Mode*/
#if USART_u8PARITY_MODE == DISABLED
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UPM0);
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	8f 7e       	andi	r24, 0xEF	; 239
     f4c:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UPM1);
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	8f 7d       	andi	r24, 0xDF	; 223
     f52:	89 83       	std	Y+1, r24	; 0x01
#error Wrong USART_u8PARITY_MODE configuration type
#endif

	/*Select Stop Bit Mode*/
#if USART_u8STOP_BITS_NUM == ONE_BIT
	CLR_BIT(Local_u8TempUCSRC,UCSRC_USBS);
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	87 7f       	andi	r24, 0xF7	; 247
     f58:	89 83       	std	Y+1, r24	; 0x01
#else
#error Wrong USART_u8STOP_BITS_NUM configuration type
#endif

	/*Select Mode of UCSRC Register to write on it*/
	SET_BIT(Local_u8TempUCSRC,UCSRC_URSEL);
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	80 68       	ori	r24, 0x80	; 128
     f5e:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = Local_u8TempUCSRC;
     f60:	e0 e4       	ldi	r30, 0x40	; 64
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	80 83       	st	Z, r24

	/*Set Baud Rate*/
	UBRRL = USART_u8BAUD_RATE;
     f68:	e9 e2       	ldi	r30, 0x29	; 41
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	83 e3       	ldi	r24, 0x33	; 51
     f6e:	80 83       	st	Z, r24
}
     f70:	0f 90       	pop	r0
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <USART_u8Send>:
 * @brief 				Function to transmit data by USART up to nine bits.
 * @param Copy_u16Data	Data that will be transmitted by USART.
 * @return				Error State.
 */
uint8 USART_u8Send(uint16 Copy_u16Data)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	27 97       	sbiw	r28, 0x07	; 7
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	9f 83       	std	Y+7, r25	; 0x07
     f8e:	8e 83       	std	Y+6, r24	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
     f90:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeoutCounter = 0u;
     f92:	19 82       	std	Y+1, r1	; 0x01
     f94:	1a 82       	std	Y+2, r1	; 0x02
     f96:	1b 82       	std	Y+3, r1	; 0x03
     f98:	1c 82       	std	Y+4, r1	; 0x04

	/*Check if USART Transmitter is idle or not*/
	if((USART_u8TransmitBusyState == IDLE) || (USART_u8TransmitCallSrc == SYNCH_FUNC_CALL))
     f9a:	80 91 8b 00 	lds	r24, 0x008B
     f9e:	88 23       	and	r24, r24
     fa0:	29 f0       	breq	.+10     	; 0xfac <USART_u8Send+0x34>
     fa2:	80 91 8d 00 	lds	r24, 0x008D
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	09 f0       	breq	.+2      	; 0xfac <USART_u8Send+0x34>
     faa:	41 c0       	rjmp	.+130    	; 0x102e <USART_u8Send+0xb6>
	{
		/*Inform Others that transmit channel is busy from now*/
		USART_u8TransmitBusyState = BUSY;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	80 93 8b 00 	sts	0x008B, r24
     fb2:	0b c0       	rjmp	.+22     	; 0xfca <USART_u8Send+0x52>

		/*Polling until Transmit Buffer is ready*/
		while(((GET_BIT(UCSRA,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	ab 81       	ldd	r26, Y+3	; 0x03
     fba:	bc 81       	ldd	r27, Y+4	; 0x04
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	a1 1d       	adc	r26, r1
     fc0:	b1 1d       	adc	r27, r1
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	ab 83       	std	Y+3, r26	; 0x03
     fc8:	bc 83       	std	Y+4, r27	; 0x04
	{
		/*Inform Others that transmit channel is busy from now*/
		USART_u8TransmitBusyState = BUSY;

		/*Polling until Transmit Buffer is ready*/
		while(((GET_BIT(UCSRA,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
     fca:	eb e2       	ldi	r30, 0x2B	; 43
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	82 95       	swap	r24
     fd2:	86 95       	lsr	r24
     fd4:	87 70       	andi	r24, 0x07	; 7
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	81 70       	andi	r24, 0x01	; 1
     fdc:	90 70       	andi	r25, 0x00	; 0
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	61 f4       	brne	.+24     	; 0xffa <USART_u8Send+0x82>
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	ab 81       	ldd	r26, Y+3	; 0x03
     fe8:	bc 81       	ldd	r27, Y+4	; 0x04
     fea:	80 3a       	cpi	r24, 0xA0	; 160
     fec:	26 e8       	ldi	r18, 0x86	; 134
     fee:	92 07       	cpc	r25, r18
     ff0:	21 e0       	ldi	r18, 0x01	; 1
     ff2:	a2 07       	cpc	r26, r18
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	b2 07       	cpc	r27, r18
     ff8:	e8 f2       	brcs	.-70     	; 0xfb4 <USART_u8Send+0x3c>
		{
			Local_u32TimeoutCounter++;
		}

		/*Check why the loop has been broken*/
		if(Local_u32TimeoutCounter == USART_u32TIMEOUT)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	ab 81       	ldd	r26, Y+3	; 0x03
    1000:	bc 81       	ldd	r27, Y+4	; 0x04
    1002:	80 3a       	cpi	r24, 0xA0	; 160
    1004:	26 e8       	ldi	r18, 0x86	; 134
    1006:	92 07       	cpc	r25, r18
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	a2 07       	cpc	r26, r18
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	b2 07       	cpc	r27, r18
    1010:	19 f4       	brne	.+6      	; 0x1018 <USART_u8Send+0xa0>
		{
			/*Loop is broken because the counter exceed timeout counts*/
			Local_u8ErrorState = TIMEOUT_ERR;
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	8d 83       	std	Y+5, r24	; 0x05
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <USART_u8Send+0xa8>
		else
		{
			/*Loop is broken because the transmit buffer is ready*/

			/*Set the transmit data*/
			UDR = (uint8) Copy_u16Data;
    1018:	ec e2       	ldi	r30, 0x2C	; 44
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	8e 81       	ldd	r24, Y+6	; 0x06
    101e:	80 83       	st	Z, r24
			}
#endif
		}


		if(USART_u8TransmitCallSrc == MAIN_CALL)
    1020:	80 91 8d 00 	lds	r24, 0x008D
    1024:	88 23       	and	r24, r24
    1026:	29 f4       	brne	.+10     	; 0x1032 <USART_u8Send+0xba>
		{
			/*Reset busy flag to be idle*/
			USART_u8TransmitBusyState = IDLE;
    1028:	10 92 8b 00 	sts	0x008B, r1
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <USART_u8Send+0xba>
		}

	}
	else
	{
		Local_u8ErrorState = BUSY_STATE_ERR;
    102e:	84 e0       	ldi	r24, 0x04	; 4
    1030:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return Error state*/
	return Local_u8ErrorState;
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1034:	27 96       	adiw	r28, 0x07	; 7
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <USART_u8Receive>:
 * @brief 				Function to receive data by USART up to nine bits.
 * @param Copy_pvData 	Pointer to return the data received.
 * @return 				Error State.
 */
uint8 USART_u8Receive(void *Copy_pvData)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <USART_u8Receive+0x6>
    104c:	0f 92       	push	r0
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9b 83       	std	Y+3, r25	; 0x03
    1054:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1056:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pvData != NULL)
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	01 f1       	breq	.+64     	; 0x10a0 <USART_u8Receive+0x5a>
	{
		if((USART_u8ReceiveBusyState == IDLE) || (USART_u8ReceiveCallSrc == SYNCH_FUNC_CALL))
    1060:	80 91 8c 00 	lds	r24, 0x008C
    1064:	88 23       	and	r24, r24
    1066:	21 f0       	breq	.+8      	; 0x1070 <USART_u8Receive+0x2a>
    1068:	80 91 8e 00 	lds	r24, 0x008E
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	a9 f4       	brne	.+42     	; 0x109a <USART_u8Receive+0x54>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 8c 00 	sts	0x008C, r24

			/*Polling until USART receive data in receive buffer*/
			while((GET_BIT(UCSRA,UCSRA_RXC)) == 0);
    1076:	eb e2       	ldi	r30, 0x2B	; 43
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	88 23       	and	r24, r24
    107e:	dc f7       	brge	.-10     	; 0x1076 <USART_u8Receive+0x30>

			/*Return data received*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
			*(uint8 *) Copy_pvData = UDR;
    1080:	aa 81       	ldd	r26, Y+2	; 0x02
    1082:	bb 81       	ldd	r27, Y+3	; 0x03
    1084:	ec e2       	ldi	r30, 0x2C	; 44
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8c 93       	st	X, r24
			case 0u: CLR_BIT((*(uint16 *) Copy_pvData),8u);	break;
			case 1u: SET_BIT((*(uint16 *) Copy_pvData),8u);	break;
			}
#endif

			if(USART_u8ReceiveCallSrc == MAIN_CALL)
    108c:	80 91 8e 00 	lds	r24, 0x008E
    1090:	88 23       	and	r24, r24
    1092:	41 f4       	brne	.+16     	; 0x10a4 <USART_u8Receive+0x5e>
			{
				/*Reset busy flag to be idle*/
				USART_u8ReceiveBusyState = IDLE;
    1094:	10 92 8c 00 	sts	0x008C, r1
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <USART_u8Receive+0x5e>
			}
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    109a:	84 e0       	ldi	r24, 0x04	; 4
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <USART_u8Receive+0x5e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <USART_u8SendBufferSynch>:
 * @param Copy_pvBufferArr	Pointer to buffer array to be transmitted.
 * @param Copy_u8BufferSize Size of the buffer array.
 * @return 					Error State.
 */
uint8 USART_u8SendBufferSynch(const void *Copy_pvBufferArr, uint8 Copy_u8BufferSize)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <USART_u8SendBufferSynch+0x6>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <USART_u8SendBufferSynch+0x8>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <USART_u8SendBufferSynch+0xa>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	9d 83       	std	Y+5, r25	; 0x05
    10c2:	8c 83       	std	Y+4, r24	; 0x04
    10c4:	6e 83       	std	Y+6, r22	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    10c6:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8ErrorFounder = OK;
    10c8:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Counter = 0u;
    10ca:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pvBufferArr != NULL)
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	9d 81       	ldd	r25, Y+5	; 0x05
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	79 f1       	breq	.+94     	; 0x1132 <USART_u8SendBufferSynch+0x80>
	{
		if(USART_u8TransmitBusyState == IDLE)
    10d4:	80 91 8b 00 	lds	r24, 0x008B
    10d8:	88 23       	and	r24, r24
    10da:	41 f5       	brne	.+80     	; 0x112c <USART_u8SendBufferSynch+0x7a>
		{
			/*Inform Others that transmit channel is busy from now*/
			USART_u8TransmitBusyState = BUSY;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 8b 00 	sts	0x008B, r24

			/*Inform function USART_u8Send that I am the caller*/
			USART_u8TransmitCallSrc = SYNCH_FUNC_CALL;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 93 8d 00 	sts	0x008D, r24

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    10e8:	19 82       	std	Y+1, r1	; 0x01
    10ea:	17 c0       	rjmp	.+46     	; 0x111a <USART_u8SendBufferSynch+0x68>
			{
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
				/*Transmit each element with function USART_u8Send*/
				Local_u8ErrorFounder = USART_u8Send((uint8) (*((uint8 *) Copy_pvBufferArr + Local_u8Counter)));
    10ec:	2c 81       	ldd	r18, Y+4	; 0x04
    10ee:	3d 81       	ldd	r19, Y+5	; 0x05
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	f9 01       	movw	r30, r18
    10f8:	e8 0f       	add	r30, r24
    10fa:	f9 1f       	adc	r31, r25
    10fc:	80 81       	ld	r24, Z
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 bc 07 	call	0xf78	; 0xf78 <USART_u8Send>
    1106:	8a 83       	std	Y+2, r24	; 0x02
				Local_u8ErrorFounder = USART_u8Send(*((uint16 *) Copy_pvBufferArr + Local_u8Counter));

#endif

				/*Check that the transmission operation goes well*/
				if(Local_u8ErrorFounder != OK)
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	88 23       	and	r24, r24
    110c:	19 f0       	breq	.+6      	; 0x1114 <USART_u8SendBufferSynch+0x62>
				{
					Local_u8ErrorState = NOK;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	07 c0       	rjmp	.+14     	; 0x1122 <USART_u8SendBufferSynch+0x70>

			/*Inform function USART_u8Send that I am the caller*/
			USART_u8TransmitCallSrc = SYNCH_FUNC_CALL;

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	99 81       	ldd	r25, Y+1	; 0x01
    111c:	8e 81       	ldd	r24, Y+6	; 0x06
    111e:	98 17       	cp	r25, r24
    1120:	28 f3       	brcs	.-54     	; 0x10ec <USART_u8SendBufferSynch+0x3a>
					break;
				}
			}

			/*Inform function USART_u8Send that main is the caller from now*/
			USART_u8TransmitCallSrc = MAIN_CALL;
    1122:	10 92 8d 00 	sts	0x008D, r1

			/*Reset busy flag to be idle*/
			USART_u8TransmitBusyState = IDLE;
    1126:	10 92 8b 00 	sts	0x008B, r1
    112a:	05 c0       	rjmp	.+10     	; 0x1136 <USART_u8SendBufferSynch+0x84>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8b 83       	std	Y+3, r24	; 0x03
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <USART_u8SendBufferSynch+0x84>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1138:	26 96       	adiw	r28, 0x06	; 6
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <USART_u8ReceiveBufferSynch>:
 * @param Copy_pu16BufferArr 	Pointer to buffer array to be transmitted.
 * @param Copy_u8BufferSize 	Size of the buffer array.
 * @return 						Error State.
 */
uint8 USART_u8ReceiveBufferSynch(uint8 *Copy_pu8BufferArr, uint8 Copy_u8BufferSize)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	00 d0       	rcall	.+0      	; 0x1150 <USART_u8ReceiveBufferSynch+0x6>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <USART_u8ReceiveBufferSynch+0x8>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <USART_u8ReceiveBufferSynch+0xa>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9d 83       	std	Y+5, r25	; 0x05
    115a:	8c 83       	std	Y+4, r24	; 0x04
    115c:	6e 83       	std	Y+6, r22	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    115e:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8ErrorFounder = OK;
    1160:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Counter = 0u;
    1162:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pu8BufferArr != NULL)
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	59 f1       	breq	.+86     	; 0x11c2 <USART_u8ReceiveBufferSynch+0x78>
	{
		if(USART_u8ReceiveBusyState == IDLE)
    116c:	80 91 8c 00 	lds	r24, 0x008C
    1170:	88 23       	and	r24, r24
    1172:	21 f5       	brne	.+72     	; 0x11bc <USART_u8ReceiveBufferSynch+0x72>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	80 93 8c 00 	sts	0x008C, r24

			/*Inform function USART_u8Receive that I am the caller*/
			USART_u8ReceiveCallSrc = SYNCH_FUNC_CALL;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	80 93 8e 00 	sts	0x008E, r24

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    1180:	19 82       	std	Y+1, r1	; 0x01
    1182:	13 c0       	rjmp	.+38     	; 0x11aa <USART_u8ReceiveBufferSynch+0x60>
			{
				/*Transmit each element with function USART_u8Transmit*/
				Local_u8ErrorFounder = USART_u8Receive(&Copy_pu8BufferArr[Local_u8Counter]);
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	82 0f       	add	r24, r18
    1190:	93 1f       	adc	r25, r19
    1192:	0e 94 23 08 	call	0x1046	; 0x1046 <USART_u8Receive>
    1196:	8a 83       	std	Y+2, r24	; 0x02

				/*Check that the Receive operation goes well*/
				if(Local_u8ErrorFounder != OK)
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	88 23       	and	r24, r24
    119c:	19 f0       	breq	.+6      	; 0x11a4 <USART_u8ReceiveBufferSynch+0x5a>
				{
					Local_u8ErrorState = NOK;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	07 c0       	rjmp	.+14     	; 0x11b2 <USART_u8ReceiveBufferSynch+0x68>

			/*Inform function USART_u8Receive that I am the caller*/
			USART_u8ReceiveCallSrc = SYNCH_FUNC_CALL;

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	8f 5f       	subi	r24, 0xFF	; 255
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	99 81       	ldd	r25, Y+1	; 0x01
    11ac:	8e 81       	ldd	r24, Y+6	; 0x06
    11ae:	98 17       	cp	r25, r24
    11b0:	48 f3       	brcs	.-46     	; 0x1184 <USART_u8ReceiveBufferSynch+0x3a>
					break;
				}
			}

			/*Inform function USART_u8Receive that main is the caller from now*/
			USART_u8ReceiveCallSrc = MAIN_CALL;
    11b2:	10 92 8e 00 	sts	0x008E, r1

			/*Reset busy flag to be idle*/
			USART_u8ReceiveBusyState = IDLE;
    11b6:	10 92 8c 00 	sts	0x008C, r1
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <USART_u8ReceiveBufferSynch+0x7c>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    11bc:	84 e0       	ldi	r24, 0x04	; 4
    11be:	8b 83       	std	Y+3, r24	; 0x03
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <USART_u8ReceiveBufferSynch+0x7c>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    11c8:	26 96       	adiw	r28, 0x06	; 6
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <USART_u8SendBufferAsynch>:
 * @param Copy_u8BufferSize			Size of the buffer array.
 * @param Copy_pvNotificationFunc	Pointer to the notification function.
 * @return 							Error state.
 */
uint8 USART_u8SendBufferAsynch(void *Copy_pvBufferArr, uint8 Copy_u8BufferSize, void (*Copy_pvNotificationFunc)(void))
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <USART_u8SendBufferAsynch+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <USART_u8SendBufferAsynch+0x8>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <USART_u8SendBufferAsynch+0xa>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9b 83       	std	Y+3, r25	; 0x03
    11ea:	8a 83       	std	Y+2, r24	; 0x02
    11ec:	6c 83       	std	Y+4, r22	; 0x04
    11ee:	5e 83       	std	Y+6, r21	; 0x06
    11f0:	4d 83       	std	Y+5, r20	; 0x05
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    11f2:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers passed*/
	if((Copy_pvBufferArr != NULL) && (Copy_pvNotificationFunc != NULL))
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	9b 81       	ldd	r25, Y+3	; 0x03
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	39 f1       	breq	.+78     	; 0x124a <USART_u8SendBufferAsynch+0x70>
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	19 f1       	breq	.+70     	; 0x124a <USART_u8SendBufferAsynch+0x70>
	{
		if(USART_u8TransmitBusyState == IDLE)
    1204:	80 91 8b 00 	lds	r24, 0x008B
    1208:	88 23       	and	r24, r24
    120a:	e1 f4       	brne	.+56     	; 0x1244 <USART_u8SendBufferAsynch+0x6a>
		{
			/*Inform Others that Transmit channel is busy from now*/
			USART_u8TransmitBusyState = BUSY;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	80 93 8b 00 	sts	0x008B, r24

			/*Initialize buffer pointer as global*/
			USART_pvTransmitBufferArr = Copy_pvBufferArr;
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	9b 81       	ldd	r25, Y+3	; 0x03
    1216:	90 93 83 00 	sts	0x0083, r25
    121a:	80 93 82 00 	sts	0x0082, r24

			/*Initialize buffer size as global*/
			USART_u8TransmitBufferSize = Copy_u8BufferSize;
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	80 93 81 00 	sts	0x0081, r24

			/*Initialize notification function as global*/
			USART_pvTransmitNotificationFunc = Copy_pvNotificationFunc;
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	90 93 80 00 	sts	0x0080, r25
    122c:	80 93 7f 00 	sts	0x007F, r24

			/*Set the buffer counter to 0*/
			USART_u8TransmitBufferCounter = 0u;
    1230:	10 92 84 00 	sts	0x0084, r1

			/*Enable USART Data Register Empty Interrupt*/
			SET_BIT(UCSRB,UCSRB_UDRIE);
    1234:	aa e2       	ldi	r26, 0x2A	; 42
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	ea e2       	ldi	r30, 0x2A	; 42
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	80 62       	ori	r24, 0x20	; 32
    1240:	8c 93       	st	X, r24
    1242:	05 c0       	rjmp	.+10     	; 0x124e <USART_u8SendBufferAsynch+0x74>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    1244:	84 e0       	ldi	r24, 0x04	; 4
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	02 c0       	rjmp	.+4      	; 0x124e <USART_u8SendBufferAsynch+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1250:	26 96       	adiw	r28, 0x06	; 6
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <USART_u8ReceiveBufferAsynch>:
 * @param Copy_u8Bufferize 			Size of the buffer array.
 * @param Copy_pvNotificationFunc 	Pointer to the notification function.
 * @return 							Error State.
 */
uint8 USART_u8ReceiveBufferAsynch(void *Copy_pvBufferArr, uint8 Copy_u8Bufferize, void (*Copy_pvNotificationFunc)(void))
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <USART_u8ReceiveBufferAsynch+0x6>
    1268:	00 d0       	rcall	.+0      	; 0x126a <USART_u8ReceiveBufferAsynch+0x8>
    126a:	00 d0       	rcall	.+0      	; 0x126c <USART_u8ReceiveBufferAsynch+0xa>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	9b 83       	std	Y+3, r25	; 0x03
    1272:	8a 83       	std	Y+2, r24	; 0x02
    1274:	6c 83       	std	Y+4, r22	; 0x04
    1276:	5e 83       	std	Y+6, r21	; 0x06
    1278:	4d 83       	std	Y+5, r20	; 0x05
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    127a:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers passed*/
	if((Copy_pvBufferArr != NULL) && (Copy_pvNotificationFunc != NULL))
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	39 f1       	breq	.+78     	; 0x12d2 <USART_u8ReceiveBufferAsynch+0x70>
    1284:	8d 81       	ldd	r24, Y+5	; 0x05
    1286:	9e 81       	ldd	r25, Y+6	; 0x06
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	19 f1       	breq	.+70     	; 0x12d2 <USART_u8ReceiveBufferAsynch+0x70>
	{
		if(USART_u8ReceiveBusyState == IDLE)
    128c:	80 91 8c 00 	lds	r24, 0x008C
    1290:	88 23       	and	r24, r24
    1292:	e1 f4       	brne	.+56     	; 0x12cc <USART_u8ReceiveBufferAsynch+0x6a>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 8c 00 	sts	0x008C, r24

			/*Initialize buffer pointer as global*/
			USART_pvReceiveBufferArr = Copy_pvBufferArr;
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	9b 81       	ldd	r25, Y+3	; 0x03
    129e:	90 93 89 00 	sts	0x0089, r25
    12a2:	80 93 88 00 	sts	0x0088, r24

			/*Initialize buffer size as global*/
			USART_u8ReceiveBufferSize = Copy_u8Bufferize;
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	80 93 87 00 	sts	0x0087, r24

			/*Initialize notification function as global*/
			USART_pvReceiveNotificationFunc = Copy_pvNotificationFunc;
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
    12ae:	9e 81       	ldd	r25, Y+6	; 0x06
    12b0:	90 93 86 00 	sts	0x0086, r25
    12b4:	80 93 85 00 	sts	0x0085, r24

			/*Set the buffer counter to 0*/
			USART_u8ReceiveBufferCounter = 0u;
    12b8:	10 92 8a 00 	sts	0x008A, r1

			/*Enable USART RX Complete Interrupt*/
			SET_BIT(UCSRB,UCSRB_RXCIE);
    12bc:	aa e2       	ldi	r26, 0x2A	; 42
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ea e2       	ldi	r30, 0x2A	; 42
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	80 68       	ori	r24, 0x80	; 128
    12c8:	8c 93       	st	X, r24
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <USART_u8ReceiveBufferAsynch+0x74>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    12cc:	84 e0       	ldi	r24, 0x04	; 4
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <USART_u8ReceiveBufferAsynch+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d8:	26 96       	adiw	r28, 0x06	; 6
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <__vector_13>:
/**
 * @brief USART Receive Complete ISR.
 */
void __vector_13 (void) __attribute((signal));
void __vector_13 (void)
{
    12ea:	1f 92       	push	r1
    12ec:	0f 92       	push	r0
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	0f 92       	push	r0
    12f2:	11 24       	eor	r1, r1
    12f4:	2f 93       	push	r18
    12f6:	3f 93       	push	r19
    12f8:	4f 93       	push	r20
    12fa:	5f 93       	push	r21
    12fc:	6f 93       	push	r22
    12fe:	7f 93       	push	r23
    1300:	8f 93       	push	r24
    1302:	9f 93       	push	r25
    1304:	af 93       	push	r26
    1306:	bf 93       	push	r27
    1308:	ef 93       	push	r30
    130a:	ff 93       	push	r31
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	/*Return data received*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
	*((uint8 *) USART_pvReceiveBufferArr + USART_u8ReceiveBufferCounter) = UDR;
    1314:	80 91 88 00 	lds	r24, 0x0088
    1318:	90 91 89 00 	lds	r25, 0x0089
    131c:	9c 01       	movw	r18, r24
    131e:	80 91 8a 00 	lds	r24, 0x008A
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	d9 01       	movw	r26, r18
    1328:	a8 0f       	add	r26, r24
    132a:	b9 1f       	adc	r27, r25
    132c:	ec e2       	ldi	r30, 0x2C	; 44
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8c 93       	st	X, r24
	case 1u: SET_BIT(*(((uint16 *) USART_pvReceiveBufferArr) + USART_u8ReceiveBufferCounter),8u);	break;
	}
#endif

	/*Increment Receive Buffer Counter*/
	USART_u8ReceiveBufferCounter++;
    1334:	80 91 8a 00 	lds	r24, 0x008A
    1338:	8f 5f       	subi	r24, 0xFF	; 255
    133a:	80 93 8a 00 	sts	0x008A, r24

	/*If USART reached the end of the buffer*/
	if(USART_u8ReceiveBufferCounter == USART_u8ReceiveBufferSize)
    133e:	90 91 8a 00 	lds	r25, 0x008A
    1342:	80 91 87 00 	lds	r24, 0x0087
    1346:	98 17       	cp	r25, r24
    1348:	a1 f4       	brne	.+40     	; 0x1372 <__vector_13+0x88>
	{
		/*Reset busy flag for receive channel to be idle*/
		USART_u8ReceiveBusyState = IDLE;
    134a:	10 92 8c 00 	sts	0x008C, r1

		/*Disable USART Data Register Empty Interrupt*/
		CLR_BIT(UCSRB,UCSRB_RXCIE);
    134e:	aa e2       	ldi	r26, 0x2A	; 42
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	ea e2       	ldi	r30, 0x2A	; 42
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8f 77       	andi	r24, 0x7F	; 127
    135a:	8c 93       	st	X, r24

		/*Call Notification Function*/
		if(USART_pvReceiveNotificationFunc != NULL)
    135c:	80 91 85 00 	lds	r24, 0x0085
    1360:	90 91 86 00 	lds	r25, 0x0086
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	29 f0       	breq	.+10     	; 0x1372 <__vector_13+0x88>
		{
			USART_pvReceiveNotificationFunc();
    1368:	e0 91 85 00 	lds	r30, 0x0085
    136c:	f0 91 86 00 	lds	r31, 0x0086
    1370:	09 95       	icall
		else
		{
			/*Do nothing*/
		}
	}
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	ff 91       	pop	r31
    1378:	ef 91       	pop	r30
    137a:	bf 91       	pop	r27
    137c:	af 91       	pop	r26
    137e:	9f 91       	pop	r25
    1380:	8f 91       	pop	r24
    1382:	7f 91       	pop	r23
    1384:	6f 91       	pop	r22
    1386:	5f 91       	pop	r21
    1388:	4f 91       	pop	r20
    138a:	3f 91       	pop	r19
    138c:	2f 91       	pop	r18
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <__vector_14>:
/**
 * @brief USART Data Register Empty ISR.
 */
void __vector_14 (void) __attribute((signal));
void __vector_14 (void)
{
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	/*Set the data to the transmit register*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
	UDR = *(((uint8 *) USART_pvTransmitBufferArr) + USART_u8TransmitBufferCounter);
    13c2:	ac e2       	ldi	r26, 0x2C	; 44
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	80 91 82 00 	lds	r24, 0x0082
    13ca:	90 91 83 00 	lds	r25, 0x0083
    13ce:	9c 01       	movw	r18, r24
    13d0:	80 91 84 00 	lds	r24, 0x0084
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	f9 01       	movw	r30, r18
    13da:	e8 0f       	add	r30, r24
    13dc:	f9 1f       	adc	r31, r25
    13de:	80 81       	ld	r24, Z
    13e0:	8c 93       	st	X, r24
	case 1u: SET_BIT(UCSRB,UCSRB_TXB8);	break;
	}
#endif

	/*Increment Transmit Buffer Counter*/
	USART_u8TransmitBufferCounter++;
    13e2:	80 91 84 00 	lds	r24, 0x0084
    13e6:	8f 5f       	subi	r24, 0xFF	; 255
    13e8:	80 93 84 00 	sts	0x0084, r24

	/*If USART reached the end of the buffer*/
	if(USART_u8TransmitBufferCounter == USART_u8TransmitBufferSize)
    13ec:	90 91 84 00 	lds	r25, 0x0084
    13f0:	80 91 81 00 	lds	r24, 0x0081
    13f4:	98 17       	cp	r25, r24
    13f6:	a1 f4       	brne	.+40     	; 0x1420 <__vector_14+0x88>
	{
		/*Reset busy flag for transmit channel to be idle*/
		USART_u8TransmitBusyState = IDLE;
    13f8:	10 92 8b 00 	sts	0x008B, r1

		/*Disable USART Data Register Empty Interrupt*/
		CLR_BIT(UCSRB,UCSRB_UDRIE);
    13fc:	aa e2       	ldi	r26, 0x2A	; 42
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ea e2       	ldi	r30, 0x2A	; 42
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	8f 7d       	andi	r24, 0xDF	; 223
    1408:	8c 93       	st	X, r24

		/*Call Notification Function*/
		if(USART_pvTransmitNotificationFunc != NULL)
    140a:	80 91 7f 00 	lds	r24, 0x007F
    140e:	90 91 80 00 	lds	r25, 0x0080
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	29 f0       	breq	.+10     	; 0x1420 <__vector_14+0x88>
		{
			USART_pvTransmitNotificationFunc();
    1416:	e0 91 7f 00 	lds	r30, 0x007F
    141a:	f0 91 80 00 	lds	r31, 0x0080
    141e:	09 95       	icall
		else
		{
			/*Do nothing*/
		}
	}
}
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	ff 91       	pop	r31
    1426:	ef 91       	pop	r30
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti

00001446 <__vector_15>:
/**
 * @brief USART transmission Complete ISR.
 */
void __vector_15 (void) __attribute((signal));
void __vector_15 (void)
{
    1446:	1f 92       	push	r1
    1448:	0f 92       	push	r0
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	0f 92       	push	r0
    144e:	11 24       	eor	r1, r1
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62

}
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti

00001466 <TIMER0_u8Init>:
 * @brief 						Function to initialize timer 0 peripheral.
 * @param Copy_pstTimerConfig	Struct to configure timer 0 options.
 * @return						Error State.
 */
uint8 TIMER0_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	27 97       	sbiw	r28, 0x07	; 7
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	9b 83       	std	Y+3, r25	; 0x03
    147c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    147e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	9b 81       	ldd	r25, Y+3	; 0x03
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	09 f4       	brne	.+2      	; 0x148a <TIMER0_u8Init+0x24>
    1488:	de c0       	rjmp	.+444    	; 0x1646 <TIMER0_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER0] == IDLE)
    148a:	80 91 8f 00 	lds	r24, 0x008F
    148e:	88 23       	and	r24, r24
    1490:	09 f0       	breq	.+2      	; 0x1494 <TIMER0_u8Init+0x2e>
    1492:	d6 c0       	rjmp	.+428    	; 0x1640 <TIMER0_u8Init+0x1da>
		{
			/*Inform others that timer 0 is busy*/
			TIMERS_u8StateArr[TIMER0] = BUSY;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	80 93 8f 00 	sts	0x008F, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    149a:	ea 81       	ldd	r30, Y+2	; 0x02
    149c:	fb 81       	ldd	r31, Y+3	; 0x03
    149e:	81 81       	ldd	r24, Z+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3f 83       	std	Y+7, r19	; 0x07
    14a6:	2e 83       	std	Y+6, r18	; 0x06
    14a8:	8e 81       	ldd	r24, Y+6	; 0x06
    14aa:	9f 81       	ldd	r25, Y+7	; 0x07
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	21 f1       	breq	.+72     	; 0x14fa <TIMER0_u8Init+0x94>
    14b2:	2e 81       	ldd	r18, Y+6	; 0x06
    14b4:	3f 81       	ldd	r19, Y+7	; 0x07
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <TIMER0_u8Init+0x60>
    14bc:	8e 81       	ldd	r24, Y+6	; 0x06
    14be:	9f 81       	ldd	r25, Y+7	; 0x07
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	61 f0       	breq	.+24     	; 0x14dc <TIMER0_u8Init+0x76>
    14c4:	46 c0       	rjmp	.+140    	; 0x1552 <TIMER0_u8Init+0xec>
    14c6:	2e 81       	ldd	r18, Y+6	; 0x06
    14c8:	3f 81       	ldd	r19, Y+7	; 0x07
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	21 f1       	breq	.+72     	; 0x1518 <TIMER0_u8Init+0xb2>
    14d0:	8e 81       	ldd	r24, Y+6	; 0x06
    14d2:	9f 81       	ldd	r25, Y+7	; 0x07
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	91 05       	cpc	r25, r1
    14d8:	71 f1       	breq	.+92     	; 0x1536 <TIMER0_u8Init+0xd0>
    14da:	3b c0       	rjmp	.+118    	; 0x1552 <TIMER0_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    14dc:	a3 e5       	ldi	r26, 0x53	; 83
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e3 e5       	ldi	r30, 0x53	; 83
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 7b       	andi	r24, 0xBF	; 191
    14e8:	8c 93       	st	X, r24
    14ea:	a3 e5       	ldi	r26, 0x53	; 83
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e3 e5       	ldi	r30, 0x53	; 83
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	87 7f       	andi	r24, 0xF7	; 247
    14f6:	8c 93       	st	X, r24
    14f8:	2c c0       	rjmp	.+88     	; 0x1552 <TIMER0_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    14fa:	a3 e5       	ldi	r26, 0x53	; 83
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e3 e5       	ldi	r30, 0x53	; 83
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 64       	ori	r24, 0x40	; 64
    1506:	8c 93       	st	X, r24
    1508:	a3 e5       	ldi	r26, 0x53	; 83
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e3 e5       	ldi	r30, 0x53	; 83
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	87 7f       	andi	r24, 0xF7	; 247
    1514:	8c 93       	st	X, r24
    1516:	1d c0       	rjmp	.+58     	; 0x1552 <TIMER0_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    1518:	a3 e5       	ldi	r26, 0x53	; 83
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e3 e5       	ldi	r30, 0x53	; 83
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8f 7b       	andi	r24, 0xBF	; 191
    1524:	8c 93       	st	X, r24
    1526:	a3 e5       	ldi	r26, 0x53	; 83
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e3 e5       	ldi	r30, 0x53	; 83
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	88 60       	ori	r24, 0x08	; 8
    1532:	8c 93       	st	X, r24
    1534:	0e c0       	rjmp	.+28     	; 0x1552 <TIMER0_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    1536:	a3 e5       	ldi	r26, 0x53	; 83
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e3 e5       	ldi	r30, 0x53	; 83
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 64       	ori	r24, 0x40	; 64
    1542:	8c 93       	st	X, r24
    1544:	a3 e5       	ldi	r26, 0x53	; 83
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e3 e5       	ldi	r30, 0x53	; 83
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	88 60       	ori	r24, 0x08	; 8
    1550:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR0 &= TIMER0_2_OCMATCH_MASK;
    1552:	a3 e5       	ldi	r26, 0x53	; 83
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e3 e5       	ldi	r30, 0x53	; 83
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8f 7c       	andi	r24, 0xCF	; 207
    155e:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    1560:	ea 81       	ldd	r30, Y+2	; 0x02
    1562:	fb 81       	ldd	r31, Y+3	; 0x03
    1564:	81 81       	ldd	r24, Z+1	; 0x01
    1566:	88 23       	and	r24, r24
    1568:	29 f0       	breq	.+10     	; 0x1574 <TIMER0_u8Init+0x10e>
    156a:	ea 81       	ldd	r30, Y+2	; 0x02
    156c:	fb 81       	ldd	r31, Y+3	; 0x03
    156e:	81 81       	ldd	r24, Z+1	; 0x01
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	e1 f4       	brne	.+56     	; 0x15ac <TIMER0_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    1574:	ea 81       	ldd	r30, Y+2	; 0x02
    1576:	fb 81       	ldd	r31, Y+3	; 0x03
    1578:	82 81       	ldd	r24, Z+2	; 0x02
    157a:	84 30       	cpi	r24, 0x04	; 4
    157c:	a0 f4       	brcc	.+40     	; 0x15a6 <TIMER0_u8Init+0x140>
				{
					TCCR0 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    157e:	a3 e5       	ldi	r26, 0x53	; 83
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e3 e5       	ldi	r30, 0x53	; 83
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	28 2f       	mov	r18, r24
    158a:	ea 81       	ldd	r30, Y+2	; 0x02
    158c:	fb 81       	ldd	r31, Y+3	; 0x03
    158e:	82 81       	ldd	r24, Z+2	; 0x02
    1590:	88 2f       	mov	r24, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	82 95       	swap	r24
    1596:	92 95       	swap	r25
    1598:	90 7f       	andi	r25, 0xF0	; 240
    159a:	98 27       	eor	r25, r24
    159c:	80 7f       	andi	r24, 0xF0	; 240
    159e:	98 27       	eor	r25, r24
    15a0:	82 2b       	or	r24, r18
    15a2:	8c 93       	st	X, r24
    15a4:	3b c0       	rjmp	.+118    	; 0x161c <TIMER0_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	38 c0       	rjmp	.+112    	; 0x161c <TIMER0_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    15ac:	ea 81       	ldd	r30, Y+2	; 0x02
    15ae:	fb 81       	ldd	r31, Y+3	; 0x03
    15b0:	81 81       	ldd	r24, Z+1	; 0x01
    15b2:	83 30       	cpi	r24, 0x03	; 3
    15b4:	29 f0       	breq	.+10     	; 0x15c0 <TIMER0_u8Init+0x15a>
    15b6:	ea 81       	ldd	r30, Y+2	; 0x02
    15b8:	fb 81       	ldd	r31, Y+3	; 0x03
    15ba:	81 81       	ldd	r24, Z+1	; 0x01
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	71 f5       	brne	.+92     	; 0x161c <TIMER0_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    15c0:	ea 81       	ldd	r30, Y+2	; 0x02
    15c2:	fb 81       	ldd	r31, Y+3	; 0x03
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3d 83       	std	Y+5, r19	; 0x05
    15cc:	2c 83       	std	Y+4, r18	; 0x04
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	84 30       	cpi	r24, 0x04	; 4
    15d4:	91 05       	cpc	r25, r1
    15d6:	81 f0       	breq	.+32     	; 0x15f8 <TIMER0_u8Init+0x192>
    15d8:	2c 81       	ldd	r18, Y+4	; 0x04
    15da:	3d 81       	ldd	r19, Y+5	; 0x05
    15dc:	25 30       	cpi	r18, 0x05	; 5
    15de:	31 05       	cpc	r19, r1
    15e0:	99 f0       	breq	.+38     	; 0x1608 <TIMER0_u8Init+0x1a2>
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	b9 f4       	brne	.+46     	; 0x1618 <TIMER0_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    15ea:	e3 e5       	ldi	r30, 0x53	; 83
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	a3 e5       	ldi	r26, 0x53	; 83
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	8c 91       	ld	r24, X
    15f4:	80 83       	st	Z, r24
    15f6:	12 c0       	rjmp	.+36     	; 0x161c <TIMER0_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    15f8:	a3 e5       	ldi	r26, 0x53	; 83
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e3 e5       	ldi	r30, 0x53	; 83
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	80 62       	ori	r24, 0x20	; 32
    1604:	8c 93       	st	X, r24
    1606:	0a c0       	rjmp	.+20     	; 0x161c <TIMER0_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    1608:	a3 e5       	ldi	r26, 0x53	; 83
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e3 e5       	ldi	r30, 0x53	; 83
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	80 63       	ori	r24, 0x30	; 48
    1614:	8c 93       	st	X, r24
    1616:	02 c0       	rjmp	.+4      	; 0x161c <TIMER0_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR0 &= PRESCALER_MASK;
    161c:	a3 e5       	ldi	r26, 0x53	; 83
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e3 e5       	ldi	r30, 0x53	; 83
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	88 7f       	andi	r24, 0xF8	; 248
    1628:	8c 93       	st	X, r24
			TCCR0 |= Copy_pstTimerConfig -> ClkSelect;
    162a:	a3 e5       	ldi	r26, 0x53	; 83
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e3 e5       	ldi	r30, 0x53	; 83
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	90 81       	ld	r25, Z
    1634:	ea 81       	ldd	r30, Y+2	; 0x02
    1636:	fb 81       	ldd	r31, Y+3	; 0x03
    1638:	80 81       	ld	r24, Z
    163a:	89 2b       	or	r24, r25
    163c:	8c 93       	st	X, r24
    163e:	05 c0       	rjmp	.+10     	; 0x164a <TIMER0_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    1640:	84 e0       	ldi	r24, 0x04	; 4
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	02 c0       	rjmp	.+4      	; 0x164a <TIMER0_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    164a:	89 81       	ldd	r24, Y+1	; 0x01
}
    164c:	27 96       	adiw	r28, 0x07	; 7
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <TIMER1_u8Init>:
 * @brief 						Function to initialize timer 1 peripheral.
 * @param Copy_pstTimerConfig	Struct to configure timer 1 options.
 * @return						Error State.
 */
uint8 TIMER1_u8Init(const TIMER1_CFG_t *Copy_pstTimerConfig)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	29 97       	sbiw	r28, 0x09	; 9
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	9b 83       	std	Y+3, r25	; 0x03
    1674:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1676:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	09 f4       	brne	.+2      	; 0x1682 <TIMER1_u8Init+0x24>
    1680:	71 c1       	rjmp	.+738    	; 0x1964 <TIMER1_u8Init+0x306>
	{
		if(TIMERS_u8StateArr[TIMER1] == IDLE)
    1682:	80 91 90 00 	lds	r24, 0x0090
    1686:	88 23       	and	r24, r24
    1688:	09 f0       	breq	.+2      	; 0x168c <TIMER1_u8Init+0x2e>
    168a:	69 c1       	rjmp	.+722    	; 0x195e <TIMER1_u8Init+0x300>
		{
			/*Inform others that timer 1 is busy from now*/
			TIMERS_u8StateArr[TIMER1] = BUSY;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	80 93 90 00 	sts	0x0090, r24

			/*Select Wave Generation Mode*/
			TCCR1A &= TIMER1_WGM_MASK_A;
    1692:	af e4       	ldi	r26, 0x4F	; 79
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ef e4       	ldi	r30, 0x4F	; 79
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	8c 7f       	andi	r24, 0xFC	; 252
    169e:	8c 93       	st	X, r24
			TCCR1B &= TIMER1_WGM_MASK_B;
    16a0:	ae e4       	ldi	r26, 0x4E	; 78
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	ee e4       	ldi	r30, 0x4E	; 78
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	87 7e       	andi	r24, 0xE7	; 231
    16ac:	8c 93       	st	X, r24
			TCCR1A |= ((Copy_pstTimerConfig -> WGM) & 3);
    16ae:	af e4       	ldi	r26, 0x4F	; 79
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ef e4       	ldi	r30, 0x4F	; 79
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	98 2f       	mov	r25, r24
    16ba:	ea 81       	ldd	r30, Y+2	; 0x02
    16bc:	fb 81       	ldd	r31, Y+3	; 0x03
    16be:	81 81       	ldd	r24, Z+1	; 0x01
    16c0:	83 70       	andi	r24, 0x03	; 3
    16c2:	89 2b       	or	r24, r25
    16c4:	8c 93       	st	X, r24
			TCCR1B |= ((((Copy_pstTimerConfig -> WGM) >> 2) & 3) << 3);
    16c6:	ae e4       	ldi	r26, 0x4E	; 78
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ee e4       	ldi	r30, 0x4E	; 78
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	28 2f       	mov	r18, r24
    16d2:	ea 81       	ldd	r30, Y+2	; 0x02
    16d4:	fb 81       	ldd	r31, Y+3	; 0x03
    16d6:	81 81       	ldd	r24, Z+1	; 0x01
    16d8:	86 95       	lsr	r24
    16da:	86 95       	lsr	r24
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	83 70       	andi	r24, 0x03	; 3
    16e2:	90 70       	andi	r25, 0x00	; 0
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	82 2b       	or	r24, r18
    16f2:	8c 93       	st	X, r24

			/*Select Output Compare Match Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    16f4:	ea 81       	ldd	r30, Y+2	; 0x02
    16f6:	fb 81       	ldd	r31, Y+3	; 0x03
    16f8:	81 81       	ldd	r24, Z+1	; 0x01
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	39 87       	std	Y+9, r19	; 0x09
    1700:	28 87       	std	Y+8, r18	; 0x08
    1702:	88 85       	ldd	r24, Y+8	; 0x08
    1704:	99 85       	ldd	r25, Y+9	; 0x09
    1706:	8c 30       	cpi	r24, 0x0C	; 12
    1708:	91 05       	cpc	r25, r1
    170a:	b4 f4       	brge	.+44     	; 0x1738 <TIMER1_u8Init+0xda>
    170c:	28 85       	ldd	r18, Y+8	; 0x08
    170e:	39 85       	ldd	r19, Y+9	; 0x09
    1710:	25 30       	cpi	r18, 0x05	; 5
    1712:	31 05       	cpc	r19, r1
    1714:	0c f0       	brlt	.+2      	; 0x1718 <TIMER1_u8Init+0xba>
    1716:	70 c0       	rjmp	.+224    	; 0x17f8 <TIMER1_u8Init+0x19a>
    1718:	88 85       	ldd	r24, Y+8	; 0x08
    171a:	99 85       	ldd	r25, Y+9	; 0x09
    171c:	84 30       	cpi	r24, 0x04	; 4
    171e:	91 05       	cpc	r25, r1
    1720:	c4 f4       	brge	.+48     	; 0x1752 <TIMER1_u8Init+0xf4>
    1722:	28 85       	ldd	r18, Y+8	; 0x08
    1724:	39 85       	ldd	r19, Y+9	; 0x09
    1726:	21 30       	cpi	r18, 0x01	; 1
    1728:	31 05       	cpc	r19, r1
    172a:	0c f0       	brlt	.+2      	; 0x172e <TIMER1_u8Init+0xd0>
    172c:	65 c0       	rjmp	.+202    	; 0x17f8 <TIMER1_u8Init+0x19a>
    172e:	88 85       	ldd	r24, Y+8	; 0x08
    1730:	99 85       	ldd	r25, Y+9	; 0x09
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	71 f0       	breq	.+28     	; 0x1752 <TIMER1_u8Init+0xf4>
    1736:	ff c0       	rjmp	.+510    	; 0x1936 <TIMER1_u8Init+0x2d8>
    1738:	28 85       	ldd	r18, Y+8	; 0x08
    173a:	39 85       	ldd	r19, Y+9	; 0x09
    173c:	2c 30       	cpi	r18, 0x0C	; 12
    173e:	31 05       	cpc	r19, r1
    1740:	41 f0       	breq	.+16     	; 0x1752 <TIMER1_u8Init+0xf4>
    1742:	88 85       	ldd	r24, Y+8	; 0x08
    1744:	99 85       	ldd	r25, Y+9	; 0x09
    1746:	0e 97       	sbiw	r24, 0x0e	; 14
    1748:	82 30       	cpi	r24, 0x02	; 2
    174a:	91 05       	cpc	r25, r1
    174c:	08 f0       	brcs	.+2      	; 0x1750 <TIMER1_u8Init+0xf2>
    174e:	f3 c0       	rjmp	.+486    	; 0x1936 <TIMER1_u8Init+0x2d8>
    1750:	53 c0       	rjmp	.+166    	; 0x17f8 <TIMER1_u8Init+0x19a>
			{
			case NORMAL_16_BITS:
			case CTC_OCR1A:
			case CTC_ICR1:
				/*For Channel A*/
				if((Copy_pstTimerConfig -> OCAMode) < NON_INVERTED_PWM)
    1752:	ea 81       	ldd	r30, Y+2	; 0x02
    1754:	fb 81       	ldd	r31, Y+3	; 0x03
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	84 30       	cpi	r24, 0x04	; 4
    175a:	f0 f4       	brcc	.+60     	; 0x1798 <TIMER1_u8Init+0x13a>
				{
					TCCR1A &= TIMER1_OCMATCH_A_MASK;
    175c:	af e4       	ldi	r26, 0x4F	; 79
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	ef e4       	ldi	r30, 0x4F	; 79
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8f 73       	andi	r24, 0x3F	; 63
    1768:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCAMode) << 6);
    176a:	af e4       	ldi	r26, 0x4F	; 79
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	ef e4       	ldi	r30, 0x4F	; 79
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	28 2f       	mov	r18, r24
    1776:	ea 81       	ldd	r30, Y+2	; 0x02
    1778:	fb 81       	ldd	r31, Y+3	; 0x03
    177a:	82 81       	ldd	r24, Z+2	; 0x02
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	00 24       	eor	r0, r0
    1782:	96 95       	lsr	r25
    1784:	87 95       	ror	r24
    1786:	07 94       	ror	r0
    1788:	96 95       	lsr	r25
    178a:	87 95       	ror	r24
    178c:	07 94       	ror	r0
    178e:	98 2f       	mov	r25, r24
    1790:	80 2d       	mov	r24, r0
    1792:	82 2b       	or	r24, r18
    1794:	8c 93       	st	X, r24
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <TIMER1_u8Init+0x148>
				}
				else if((Copy_pstTimerConfig -> OCAMode) == DO_NOT_CHANGE)
    1798:	ea 81       	ldd	r30, Y+2	; 0x02
    179a:	fb 81       	ldd	r31, Y+3	; 0x03
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	86 30       	cpi	r24, 0x06	; 6
    17a0:	11 f0       	breq	.+4      	; 0x17a6 <TIMER1_u8Init+0x148>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				if((Copy_pstTimerConfig -> OCBMode) < NON_INVERTED_PWM)
    17a6:	ea 81       	ldd	r30, Y+2	; 0x02
    17a8:	fb 81       	ldd	r31, Y+3	; 0x03
    17aa:	83 81       	ldd	r24, Z+3	; 0x03
    17ac:	84 30       	cpi	r24, 0x04	; 4
    17ae:	d8 f4       	brcc	.+54     	; 0x17e6 <TIMER1_u8Init+0x188>
				{
					TCCR1A &= TIMER1_OCMATCH_B_MASK;
    17b0:	af e4       	ldi	r26, 0x4F	; 79
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ef e4       	ldi	r30, 0x4F	; 79
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8f 7c       	andi	r24, 0xCF	; 207
    17bc:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCBMode) << 4);
    17be:	af e4       	ldi	r26, 0x4F	; 79
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ef e4       	ldi	r30, 0x4F	; 79
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	28 2f       	mov	r18, r24
    17ca:	ea 81       	ldd	r30, Y+2	; 0x02
    17cc:	fb 81       	ldd	r31, Y+3	; 0x03
    17ce:	83 81       	ldd	r24, Z+3	; 0x03
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	82 95       	swap	r24
    17d6:	92 95       	swap	r25
    17d8:	90 7f       	andi	r25, 0xF0	; 240
    17da:	98 27       	eor	r25, r24
    17dc:	80 7f       	andi	r24, 0xF0	; 240
    17de:	98 27       	eor	r25, r24
    17e0:	82 2b       	or	r24, r18
    17e2:	8c 93       	st	X, r24
    17e4:	aa c0       	rjmp	.+340    	; 0x193a <TIMER1_u8Init+0x2dc>
				}
				else if((Copy_pstTimerConfig -> OCBMode) == DO_NOT_CHANGE)
    17e6:	ea 81       	ldd	r30, Y+2	; 0x02
    17e8:	fb 81       	ldd	r31, Y+3	; 0x03
    17ea:	83 81       	ldd	r24, Z+3	; 0x03
    17ec:	86 30       	cpi	r24, 0x06	; 6
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <TIMER1_u8Init+0x194>
    17f0:	a4 c0       	rjmp	.+328    	; 0x193a <TIMER1_u8Init+0x2dc>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	a1 c0       	rjmp	.+322    	; 0x193a <TIMER1_u8Init+0x2dc>
			case PHASE_FREQ_CORR_ICR1:
			case PHASE_FREQ_CORR_OCR1A:
			case PHASE_CORR_ICR1:
			case PHASE_CORR_OCR1A:
				/*For Channel A*/
				switch(Copy_pstTimerConfig -> OCAMode)
    17f8:	ea 81       	ldd	r30, Y+2	; 0x02
    17fa:	fb 81       	ldd	r31, Y+3	; 0x03
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	3f 83       	std	Y+7, r19	; 0x07
    1804:	2e 83       	std	Y+6, r18	; 0x06
    1806:	8e 81       	ldd	r24, Y+6	; 0x06
    1808:	9f 81       	ldd	r25, Y+7	; 0x07
    180a:	84 30       	cpi	r24, 0x04	; 4
    180c:	91 05       	cpc	r25, r1
    180e:	19 f1       	breq	.+70     	; 0x1856 <TIMER1_u8Init+0x1f8>
    1810:	2e 81       	ldd	r18, Y+6	; 0x06
    1812:	3f 81       	ldd	r19, Y+7	; 0x07
    1814:	25 30       	cpi	r18, 0x05	; 5
    1816:	31 05       	cpc	r19, r1
    1818:	2c f4       	brge	.+10     	; 0x1824 <TIMER1_u8Init+0x1c6>
    181a:	8e 81       	ldd	r24, Y+6	; 0x06
    181c:	9f 81       	ldd	r25, Y+7	; 0x07
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	61 f0       	breq	.+24     	; 0x183a <TIMER1_u8Init+0x1dc>
    1822:	37 c0       	rjmp	.+110    	; 0x1892 <TIMER1_u8Init+0x234>
    1824:	2e 81       	ldd	r18, Y+6	; 0x06
    1826:	3f 81       	ldd	r19, Y+7	; 0x07
    1828:	25 30       	cpi	r18, 0x05	; 5
    182a:	31 05       	cpc	r19, r1
    182c:	19 f1       	breq	.+70     	; 0x1874 <TIMER1_u8Init+0x216>
    182e:	8e 81       	ldd	r24, Y+6	; 0x06
    1830:	9f 81       	ldd	r25, Y+7	; 0x07
    1832:	86 30       	cpi	r24, 0x06	; 6
    1834:	91 05       	cpc	r25, r1
    1836:	79 f1       	breq	.+94     	; 0x1896 <TIMER1_u8Init+0x238>
    1838:	2c c0       	rjmp	.+88     	; 0x1892 <TIMER1_u8Init+0x234>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    183a:	af e4       	ldi	r26, 0x4F	; 79
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	ef e4       	ldi	r30, 0x4F	; 79
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	8f 73       	andi	r24, 0x3F	; 63
    1846:	8c 93       	st	X, r24
    1848:	af e4       	ldi	r26, 0x4F	; 79
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	ef e4       	ldi	r30, 0x4F	; 79
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8c 93       	st	X, r24
    1854:	20 c0       	rjmp	.+64     	; 0x1896 <TIMER1_u8Init+0x238>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    1856:	af e4       	ldi	r26, 0x4F	; 79
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	ef e4       	ldi	r30, 0x4F	; 79
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8f 73       	andi	r24, 0x3F	; 63
    1862:	8c 93       	st	X, r24
    1864:	af e4       	ldi	r26, 0x4F	; 79
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	ef e4       	ldi	r30, 0x4F	; 79
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	80 68       	ori	r24, 0x80	; 128
    1870:	8c 93       	st	X, r24
    1872:	11 c0       	rjmp	.+34     	; 0x1896 <TIMER1_u8Init+0x238>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    1874:	af e4       	ldi	r26, 0x4F	; 79
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	ef e4       	ldi	r30, 0x4F	; 79
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8f 73       	andi	r24, 0x3F	; 63
    1880:	8c 93       	st	X, r24
    1882:	af e4       	ldi	r26, 0x4F	; 79
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ef e4       	ldi	r30, 0x4F	; 79
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	80 6c       	ori	r24, 0xC0	; 192
    188e:	8c 93       	st	X, r24
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <TIMER1_u8Init+0x238>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				switch(Copy_pstTimerConfig -> OCBMode)
    1896:	ea 81       	ldd	r30, Y+2	; 0x02
    1898:	fb 81       	ldd	r31, Y+3	; 0x03
    189a:	83 81       	ldd	r24, Z+3	; 0x03
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	3d 83       	std	Y+5, r19	; 0x05
    18a2:	2c 83       	std	Y+4, r18	; 0x04
    18a4:	8c 81       	ldd	r24, Y+4	; 0x04
    18a6:	9d 81       	ldd	r25, Y+5	; 0x05
    18a8:	84 30       	cpi	r24, 0x04	; 4
    18aa:	91 05       	cpc	r25, r1
    18ac:	19 f1       	breq	.+70     	; 0x18f4 <TIMER1_u8Init+0x296>
    18ae:	2c 81       	ldd	r18, Y+4	; 0x04
    18b0:	3d 81       	ldd	r19, Y+5	; 0x05
    18b2:	25 30       	cpi	r18, 0x05	; 5
    18b4:	31 05       	cpc	r19, r1
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <TIMER1_u8Init+0x264>
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	9d 81       	ldd	r25, Y+5	; 0x05
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	61 f0       	breq	.+24     	; 0x18d8 <TIMER1_u8Init+0x27a>
    18c0:	37 c0       	rjmp	.+110    	; 0x1930 <TIMER1_u8Init+0x2d2>
    18c2:	2c 81       	ldd	r18, Y+4	; 0x04
    18c4:	3d 81       	ldd	r19, Y+5	; 0x05
    18c6:	25 30       	cpi	r18, 0x05	; 5
    18c8:	31 05       	cpc	r19, r1
    18ca:	19 f1       	breq	.+70     	; 0x1912 <TIMER1_u8Init+0x2b4>
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	86 30       	cpi	r24, 0x06	; 6
    18d2:	91 05       	cpc	r25, r1
    18d4:	91 f1       	breq	.+100    	; 0x193a <TIMER1_u8Init+0x2dc>
    18d6:	2c c0       	rjmp	.+88     	; 0x1930 <TIMER1_u8Init+0x2d2>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    18d8:	af e4       	ldi	r26, 0x4F	; 79
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	ef e4       	ldi	r30, 0x4F	; 79
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8f 7c       	andi	r24, 0xCF	; 207
    18e4:	8c 93       	st	X, r24
    18e6:	af e4       	ldi	r26, 0x4F	; 79
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	ef e4       	ldi	r30, 0x4F	; 79
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8c 93       	st	X, r24
    18f2:	23 c0       	rjmp	.+70     	; 0x193a <TIMER1_u8Init+0x2dc>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    18f4:	af e4       	ldi	r26, 0x4F	; 79
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	ef e4       	ldi	r30, 0x4F	; 79
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	8f 7c       	andi	r24, 0xCF	; 207
    1900:	8c 93       	st	X, r24
    1902:	af e4       	ldi	r26, 0x4F	; 79
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ef e4       	ldi	r30, 0x4F	; 79
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	80 62       	ori	r24, 0x20	; 32
    190e:	8c 93       	st	X, r24
    1910:	14 c0       	rjmp	.+40     	; 0x193a <TIMER1_u8Init+0x2dc>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    1912:	af e4       	ldi	r26, 0x4F	; 79
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	ef e4       	ldi	r30, 0x4F	; 79
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	8f 7c       	andi	r24, 0xCF	; 207
    191e:	8c 93       	st	X, r24
    1920:	af e4       	ldi	r26, 0x4F	; 79
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	ef e4       	ldi	r30, 0x4F	; 79
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	80 63       	ori	r24, 0x30	; 48
    192c:	8c 93       	st	X, r24
    192e:	05 c0       	rjmp	.+10     	; 0x193a <TIMER1_u8Init+0x2dc>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	02 c0       	rjmp	.+4      	; 0x193a <TIMER1_u8Init+0x2dc>
				}
				break;

			default:Local_u8ErrorState = NOK;	break;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01
			}

			/*Select the clock*/
			TCCR1B &= PRESCALER_MASK;
    193a:	ae e4       	ldi	r26, 0x4E	; 78
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	ee e4       	ldi	r30, 0x4E	; 78
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	88 7f       	andi	r24, 0xF8	; 248
    1946:	8c 93       	st	X, r24
			TCCR1B |= Copy_pstTimerConfig -> ClkSelect;
    1948:	ae e4       	ldi	r26, 0x4E	; 78
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	ee e4       	ldi	r30, 0x4E	; 78
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	90 81       	ld	r25, Z
    1952:	ea 81       	ldd	r30, Y+2	; 0x02
    1954:	fb 81       	ldd	r31, Y+3	; 0x03
    1956:	80 81       	ld	r24, Z
    1958:	89 2b       	or	r24, r25
    195a:	8c 93       	st	X, r24
    195c:	05 c0       	rjmp	.+10     	; 0x1968 <TIMER1_u8Init+0x30a>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    195e:	84 e0       	ldi	r24, 0x04	; 4
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <TIMER1_u8Init+0x30a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    1968:	89 81       	ldd	r24, Y+1	; 0x01
}
    196a:	29 96       	adiw	r28, 0x09	; 9
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <TIMER2_u8Init>:
 * @brief 						Function to initialize timer 2 peripheral.
 * @param Copy_pstTimerConfig	Struct to configure timer 2 otions.
 * @return						Error State.
 */
uint8 TIMER2_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	27 97       	sbiw	r28, 0x07	; 7
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	9b 83       	std	Y+3, r25	; 0x03
    1992:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1994:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	9b 81       	ldd	r25, Y+3	; 0x03
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	09 f4       	brne	.+2      	; 0x19a0 <TIMER2_u8Init+0x24>
    199e:	de c0       	rjmp	.+444    	; 0x1b5c <TIMER2_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER2] == IDLE)
    19a0:	80 91 91 00 	lds	r24, 0x0091
    19a4:	88 23       	and	r24, r24
    19a6:	09 f0       	breq	.+2      	; 0x19aa <TIMER2_u8Init+0x2e>
    19a8:	d6 c0       	rjmp	.+428    	; 0x1b56 <TIMER2_u8Init+0x1da>
		{
			/*Inform others that timer 2 is busy from now*/
			TIMERS_u8StateArr[TIMER2] = BUSY;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	80 93 91 00 	sts	0x0091, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    19b0:	ea 81       	ldd	r30, Y+2	; 0x02
    19b2:	fb 81       	ldd	r31, Y+3	; 0x03
    19b4:	81 81       	ldd	r24, Z+1	; 0x01
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3f 83       	std	Y+7, r19	; 0x07
    19bc:	2e 83       	std	Y+6, r18	; 0x06
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	9f 81       	ldd	r25, Y+7	; 0x07
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	91 05       	cpc	r25, r1
    19c6:	21 f1       	breq	.+72     	; 0x1a10 <TIMER2_u8Init+0x94>
    19c8:	2e 81       	ldd	r18, Y+6	; 0x06
    19ca:	3f 81       	ldd	r19, Y+7	; 0x07
    19cc:	22 30       	cpi	r18, 0x02	; 2
    19ce:	31 05       	cpc	r19, r1
    19d0:	2c f4       	brge	.+10     	; 0x19dc <TIMER2_u8Init+0x60>
    19d2:	8e 81       	ldd	r24, Y+6	; 0x06
    19d4:	9f 81       	ldd	r25, Y+7	; 0x07
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	61 f0       	breq	.+24     	; 0x19f2 <TIMER2_u8Init+0x76>
    19da:	46 c0       	rjmp	.+140    	; 0x1a68 <TIMER2_u8Init+0xec>
    19dc:	2e 81       	ldd	r18, Y+6	; 0x06
    19de:	3f 81       	ldd	r19, Y+7	; 0x07
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	21 f1       	breq	.+72     	; 0x1a2e <TIMER2_u8Init+0xb2>
    19e6:	8e 81       	ldd	r24, Y+6	; 0x06
    19e8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ea:	83 30       	cpi	r24, 0x03	; 3
    19ec:	91 05       	cpc	r25, r1
    19ee:	71 f1       	breq	.+92     	; 0x1a4c <TIMER2_u8Init+0xd0>
    19f0:	3b c0       	rjmp	.+118    	; 0x1a68 <TIMER2_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    19f2:	a5 e4       	ldi	r26, 0x45	; 69
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e5 e4       	ldi	r30, 0x45	; 69
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	8f 7b       	andi	r24, 0xBF	; 191
    19fe:	8c 93       	st	X, r24
    1a00:	a5 e4       	ldi	r26, 0x45	; 69
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e5 e4       	ldi	r30, 0x45	; 69
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	87 7f       	andi	r24, 0xF7	; 247
    1a0c:	8c 93       	st	X, r24
    1a0e:	2c c0       	rjmp	.+88     	; 0x1a68 <TIMER2_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    1a10:	a5 e4       	ldi	r26, 0x45	; 69
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e5 e4       	ldi	r30, 0x45	; 69
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 64       	ori	r24, 0x40	; 64
    1a1c:	8c 93       	st	X, r24
    1a1e:	a5 e4       	ldi	r26, 0x45	; 69
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e5 e4       	ldi	r30, 0x45	; 69
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	87 7f       	andi	r24, 0xF7	; 247
    1a2a:	8c 93       	st	X, r24
    1a2c:	1d c0       	rjmp	.+58     	; 0x1a68 <TIMER2_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    1a2e:	a5 e4       	ldi	r26, 0x45	; 69
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e5 e4       	ldi	r30, 0x45	; 69
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	8f 7b       	andi	r24, 0xBF	; 191
    1a3a:	8c 93       	st	X, r24
    1a3c:	a5 e4       	ldi	r26, 0x45	; 69
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e5 e4       	ldi	r30, 0x45	; 69
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	88 60       	ori	r24, 0x08	; 8
    1a48:	8c 93       	st	X, r24
    1a4a:	0e c0       	rjmp	.+28     	; 0x1a68 <TIMER2_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    1a4c:	a5 e4       	ldi	r26, 0x45	; 69
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e5 e4       	ldi	r30, 0x45	; 69
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	80 64       	ori	r24, 0x40	; 64
    1a58:	8c 93       	st	X, r24
    1a5a:	a5 e4       	ldi	r26, 0x45	; 69
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e5 e4       	ldi	r30, 0x45	; 69
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	88 60       	ori	r24, 0x08	; 8
    1a66:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR2 &= TIMER0_2_OCMATCH_MASK;
    1a68:	a5 e4       	ldi	r26, 0x45	; 69
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e4       	ldi	r30, 0x45	; 69
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	8f 7c       	andi	r24, 0xCF	; 207
    1a74:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    1a76:	ea 81       	ldd	r30, Y+2	; 0x02
    1a78:	fb 81       	ldd	r31, Y+3	; 0x03
    1a7a:	81 81       	ldd	r24, Z+1	; 0x01
    1a7c:	88 23       	and	r24, r24
    1a7e:	29 f0       	breq	.+10     	; 0x1a8a <TIMER2_u8Init+0x10e>
    1a80:	ea 81       	ldd	r30, Y+2	; 0x02
    1a82:	fb 81       	ldd	r31, Y+3	; 0x03
    1a84:	81 81       	ldd	r24, Z+1	; 0x01
    1a86:	82 30       	cpi	r24, 0x02	; 2
    1a88:	e1 f4       	brne	.+56     	; 0x1ac2 <TIMER2_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    1a8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	84 30       	cpi	r24, 0x04	; 4
    1a92:	a0 f4       	brcc	.+40     	; 0x1abc <TIMER2_u8Init+0x140>
				{
					TCCR2 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    1a94:	a5 e4       	ldi	r26, 0x45	; 69
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e5 e4       	ldi	r30, 0x45	; 69
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa2:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	82 95       	swap	r24
    1aac:	92 95       	swap	r25
    1aae:	90 7f       	andi	r25, 0xF0	; 240
    1ab0:	98 27       	eor	r25, r24
    1ab2:	80 7f       	andi	r24, 0xF0	; 240
    1ab4:	98 27       	eor	r25, r24
    1ab6:	82 2b       	or	r24, r18
    1ab8:	8c 93       	st	X, r24
    1aba:	3b c0       	rjmp	.+118    	; 0x1b32 <TIMER2_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	38 c0       	rjmp	.+112    	; 0x1b32 <TIMER2_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    1ac2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac6:	81 81       	ldd	r24, Z+1	; 0x01
    1ac8:	83 30       	cpi	r24, 0x03	; 3
    1aca:	29 f0       	breq	.+10     	; 0x1ad6 <TIMER2_u8Init+0x15a>
    1acc:	ea 81       	ldd	r30, Y+2	; 0x02
    1ace:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad0:	81 81       	ldd	r24, Z+1	; 0x01
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	71 f5       	brne	.+92     	; 0x1b32 <TIMER2_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    1ad6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad8:	fb 81       	ldd	r31, Y+3	; 0x03
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	3d 83       	std	Y+5, r19	; 0x05
    1ae2:	2c 83       	std	Y+4, r18	; 0x04
    1ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae8:	84 30       	cpi	r24, 0x04	; 4
    1aea:	91 05       	cpc	r25, r1
    1aec:	81 f0       	breq	.+32     	; 0x1b0e <TIMER2_u8Init+0x192>
    1aee:	2c 81       	ldd	r18, Y+4	; 0x04
    1af0:	3d 81       	ldd	r19, Y+5	; 0x05
    1af2:	25 30       	cpi	r18, 0x05	; 5
    1af4:	31 05       	cpc	r19, r1
    1af6:	99 f0       	breq	.+38     	; 0x1b1e <TIMER2_u8Init+0x1a2>
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	b9 f4       	brne	.+46     	; 0x1b2e <TIMER2_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    1b00:	e5 e4       	ldi	r30, 0x45	; 69
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	a5 e4       	ldi	r26, 0x45	; 69
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	8c 91       	ld	r24, X
    1b0a:	80 83       	st	Z, r24
    1b0c:	12 c0       	rjmp	.+36     	; 0x1b32 <TIMER2_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    1b0e:	a5 e4       	ldi	r26, 0x45	; 69
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e5 e4       	ldi	r30, 0x45	; 69
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	80 62       	ori	r24, 0x20	; 32
    1b1a:	8c 93       	st	X, r24
    1b1c:	0a c0       	rjmp	.+20     	; 0x1b32 <TIMER2_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    1b1e:	a5 e4       	ldi	r26, 0x45	; 69
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e4       	ldi	r30, 0x45	; 69
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	80 63       	ori	r24, 0x30	; 48
    1b2a:	8c 93       	st	X, r24
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <TIMER2_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR2 &= PRESCALER_MASK;
    1b32:	a5 e4       	ldi	r26, 0x45	; 69
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e5 e4       	ldi	r30, 0x45	; 69
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	88 7f       	andi	r24, 0xF8	; 248
    1b3e:	8c 93       	st	X, r24
			TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    1b40:	a5 e4       	ldi	r26, 0x45	; 69
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e5 e4       	ldi	r30, 0x45	; 69
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	90 81       	ld	r25, Z
    1b4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b4e:	80 81       	ld	r24, Z
    1b50:	89 2b       	or	r24, r25
    1b52:	8c 93       	st	X, r24
    1b54:	05 c0       	rjmp	.+10     	; 0x1b60 <TIMER2_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    1b56:	84 e0       	ldi	r24, 0x04	; 4
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <TIMER2_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b62:	27 96       	adiw	r28, 0x07	; 7
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <TIMER0_u8SetCompOutMode>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER0_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <TIMER0_u8SetCompOutMode+0x6>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <TIMER0_u8SetCompOutMode+0x8>
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <TIMER0_u8SetCompOutMode+0xa>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	9b 83       	std	Y+3, r25	; 0x03
    1b84:	8a 83       	std	Y+2, r24	; 0x02
    1b86:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1b88:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <TIMER0_u8SetCompOutMode+0x20>
    1b92:	60 c0       	rjmp	.+192    	; 0x1c54 <TIMER0_u8SetCompOutMode+0xe0>
	{
		TCCR0 &= TIMER0_2_OCMATCH_MASK;
    1b94:	a3 e5       	ldi	r26, 0x53	; 83
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e3 e5       	ldi	r30, 0x53	; 83
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8f 7c       	andi	r24, 0xCF	; 207
    1ba0:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    1ba2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ba6:	81 81       	ldd	r24, Z+1	; 0x01
    1ba8:	88 23       	and	r24, r24
    1baa:	29 f0       	breq	.+10     	; 0x1bb6 <TIMER0_u8SetCompOutMode+0x42>
    1bac:	ea 81       	ldd	r30, Y+2	; 0x02
    1bae:	fb 81       	ldd	r31, Y+3	; 0x03
    1bb0:	81 81       	ldd	r24, Z+1	; 0x01
    1bb2:	82 30       	cpi	r24, 0x02	; 2
    1bb4:	c1 f4       	brne	.+48     	; 0x1be6 <TIMER0_u8SetCompOutMode+0x72>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    1bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb8:	84 30       	cpi	r24, 0x04	; 4
    1bba:	90 f4       	brcc	.+36     	; 0x1be0 <TIMER0_u8SetCompOutMode+0x6c>
			{
				TCCR0 |= (Copy_u8Mode << 4);
    1bbc:	a3 e5       	ldi	r26, 0x53	; 83
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e3 e5       	ldi	r30, 0x53	; 83
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bca:	88 2f       	mov	r24, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	82 95       	swap	r24
    1bd0:	92 95       	swap	r25
    1bd2:	90 7f       	andi	r25, 0xF0	; 240
    1bd4:	98 27       	eor	r25, r24
    1bd6:	80 7f       	andi	r24, 0xF0	; 240
    1bd8:	98 27       	eor	r25, r24
    1bda:	82 2b       	or	r24, r18
    1bdc:	8c 93       	st	X, r24
    1bde:	3c c0       	rjmp	.+120    	; 0x1c58 <TIMER0_u8SetCompOutMode+0xe4>
			}
			else
			{
				Local_u8ErrorState = NOK;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	39 c0       	rjmp	.+114    	; 0x1c58 <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    1be6:	ea 81       	ldd	r30, Y+2	; 0x02
    1be8:	fb 81       	ldd	r31, Y+3	; 0x03
    1bea:	81 81       	ldd	r24, Z+1	; 0x01
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	29 f0       	breq	.+10     	; 0x1bfa <TIMER0_u8SetCompOutMode+0x86>
    1bf0:	ea 81       	ldd	r30, Y+2	; 0x02
    1bf2:	fb 81       	ldd	r31, Y+3	; 0x03
    1bf4:	81 81       	ldd	r24, Z+1	; 0x01
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	79 f5       	brne	.+94     	; 0x1c58 <TIMER0_u8SetCompOutMode+0xe4>
		{
			switch(Copy_u8Mode)
    1bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	3e 83       	std	Y+6, r19	; 0x06
    1c02:	2d 83       	std	Y+5, r18	; 0x05
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	84 30       	cpi	r24, 0x04	; 4
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	81 f0       	breq	.+32     	; 0x1c2e <TIMER0_u8SetCompOutMode+0xba>
    1c0e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c10:	3e 81       	ldd	r19, Y+6	; 0x06
    1c12:	25 30       	cpi	r18, 0x05	; 5
    1c14:	31 05       	cpc	r19, r1
    1c16:	99 f0       	breq	.+38     	; 0x1c3e <TIMER0_u8SetCompOutMode+0xca>
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	b9 f4       	brne	.+46     	; 0x1c4e <TIMER0_u8SetCompOutMode+0xda>
			{
			case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    1c20:	e3 e5       	ldi	r30, 0x53	; 83
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	a3 e5       	ldi	r26, 0x53	; 83
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	8c 91       	ld	r24, X
    1c2a:	80 83       	st	Z, r24
    1c2c:	15 c0       	rjmp	.+42     	; 0x1c58 <TIMER0_u8SetCompOutMode+0xe4>
			case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    1c2e:	a3 e5       	ldi	r26, 0x53	; 83
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e3 e5       	ldi	r30, 0x53	; 83
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	80 62       	ori	r24, 0x20	; 32
    1c3a:	8c 93       	st	X, r24
    1c3c:	0d c0       	rjmp	.+26     	; 0x1c58 <TIMER0_u8SetCompOutMode+0xe4>
			case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    1c3e:	a3 e5       	ldi	r26, 0x53	; 83
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e3 e5       	ldi	r30, 0x53	; 83
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	80 63       	ori	r24, 0x30	; 48
    1c4a:	8c 93       	st	X, r24
    1c4c:	05 c0       	rjmp	.+10     	; 0x1c58 <TIMER0_u8SetCompOutMode+0xe4>
			default: Local_u8ErrorState = NOK;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5a:	26 96       	adiw	r28, 0x06	; 6
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <TIMER1_u8SetCompOutModeChA>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER1_u8SetCompOutModeChA(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	28 97       	sbiw	r28, 0x08	; 8
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	9b 83       	std	Y+3, r25	; 0x03
    1c82:	8a 83       	std	Y+2, r24	; 0x02
    1c84:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1c86:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <TIMER1_u8SetCompOutModeChA+0x26>
    1c90:	a5 c0       	rjmp	.+330    	; 0x1ddc <TIMER1_u8SetCompOutModeChA+0x170>
	{
		/*Select Output Compare Match Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    1c92:	ea 81       	ldd	r30, Y+2	; 0x02
    1c94:	fb 81       	ldd	r31, Y+3	; 0x03
    1c96:	81 81       	ldd	r24, Z+1	; 0x01
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	38 87       	std	Y+8, r19	; 0x08
    1c9e:	2f 83       	std	Y+7, r18	; 0x07
    1ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca2:	98 85       	ldd	r25, Y+8	; 0x08
    1ca4:	8c 30       	cpi	r24, 0x0C	; 12
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	ac f4       	brge	.+42     	; 0x1cd4 <TIMER1_u8SetCompOutModeChA+0x68>
    1caa:	2f 81       	ldd	r18, Y+7	; 0x07
    1cac:	38 85       	ldd	r19, Y+8	; 0x08
    1cae:	25 30       	cpi	r18, 0x05	; 5
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	0c f0       	brlt	.+2      	; 0x1cb6 <TIMER1_u8SetCompOutModeChA+0x4a>
    1cb4:	42 c0       	rjmp	.+132    	; 0x1d3a <TIMER1_u8SetCompOutModeChA+0xce>
    1cb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb8:	98 85       	ldd	r25, Y+8	; 0x08
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	bc f4       	brge	.+46     	; 0x1cee <TIMER1_u8SetCompOutModeChA+0x82>
    1cc0:	2f 81       	ldd	r18, Y+7	; 0x07
    1cc2:	38 85       	ldd	r19, Y+8	; 0x08
    1cc4:	21 30       	cpi	r18, 0x01	; 1
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	c4 f5       	brge	.+112    	; 0x1d3a <TIMER1_u8SetCompOutModeChA+0xce>
    1cca:	8f 81       	ldd	r24, Y+7	; 0x07
    1ccc:	98 85       	ldd	r25, Y+8	; 0x08
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	71 f0       	breq	.+28     	; 0x1cee <TIMER1_u8SetCompOutModeChA+0x82>
    1cd2:	81 c0       	rjmp	.+258    	; 0x1dd6 <TIMER1_u8SetCompOutModeChA+0x16a>
    1cd4:	2f 81       	ldd	r18, Y+7	; 0x07
    1cd6:	38 85       	ldd	r19, Y+8	; 0x08
    1cd8:	2c 30       	cpi	r18, 0x0C	; 12
    1cda:	31 05       	cpc	r19, r1
    1cdc:	41 f0       	breq	.+16     	; 0x1cee <TIMER1_u8SetCompOutModeChA+0x82>
    1cde:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce0:	98 85       	ldd	r25, Y+8	; 0x08
    1ce2:	0e 97       	sbiw	r24, 0x0e	; 14
    1ce4:	82 30       	cpi	r24, 0x02	; 2
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	08 f0       	brcs	.+2      	; 0x1cec <TIMER1_u8SetCompOutModeChA+0x80>
    1cea:	75 c0       	rjmp	.+234    	; 0x1dd6 <TIMER1_u8SetCompOutModeChA+0x16a>
    1cec:	26 c0       	rjmp	.+76     	; 0x1d3a <TIMER1_u8SetCompOutModeChA+0xce>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel A*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	84 30       	cpi	r24, 0x04	; 4
    1cf2:	e0 f4       	brcc	.+56     	; 0x1d2c <TIMER1_u8SetCompOutModeChA+0xc0>
			{
				TCCR1A &= TIMER1_OCMATCH_A_MASK;
    1cf4:	af e4       	ldi	r26, 0x4F	; 79
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	ef e4       	ldi	r30, 0x4F	; 79
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8f 73       	andi	r24, 0x3F	; 63
    1d00:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 6);
    1d02:	af e4       	ldi	r26, 0x4F	; 79
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	ef e4       	ldi	r30, 0x4F	; 79
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	00 24       	eor	r0, r0
    1d16:	96 95       	lsr	r25
    1d18:	87 95       	ror	r24
    1d1a:	07 94       	ror	r0
    1d1c:	96 95       	lsr	r25
    1d1e:	87 95       	ror	r24
    1d20:	07 94       	ror	r0
    1d22:	98 2f       	mov	r25, r24
    1d24:	80 2d       	mov	r24, r0
    1d26:	82 2b       	or	r24, r18
    1d28:	8c 93       	st	X, r24
    1d2a:	5a c0       	rjmp	.+180    	; 0x1de0 <TIMER1_u8SetCompOutModeChA+0x174>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    1d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2e:	86 30       	cpi	r24, 0x06	; 6
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <TIMER1_u8SetCompOutModeChA+0xc8>
    1d32:	56 c0       	rjmp	.+172    	; 0x1de0 <TIMER1_u8SetCompOutModeChA+0x174>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	53 c0       	rjmp	.+166    	; 0x1de0 <TIMER1_u8SetCompOutModeChA+0x174>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel A*/
			switch(Copy_u8Mode)
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	3e 83       	std	Y+6, r19	; 0x06
    1d42:	2d 83       	std	Y+5, r18	; 0x05
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	84 30       	cpi	r24, 0x04	; 4
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	19 f1       	breq	.+70     	; 0x1d94 <TIMER1_u8SetCompOutModeChA+0x128>
    1d4e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d50:	3e 81       	ldd	r19, Y+6	; 0x06
    1d52:	25 30       	cpi	r18, 0x05	; 5
    1d54:	31 05       	cpc	r19, r1
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <TIMER1_u8SetCompOutModeChA+0xf6>
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	61 f0       	breq	.+24     	; 0x1d78 <TIMER1_u8SetCompOutModeChA+0x10c>
    1d60:	37 c0       	rjmp	.+110    	; 0x1dd0 <TIMER1_u8SetCompOutModeChA+0x164>
    1d62:	2d 81       	ldd	r18, Y+5	; 0x05
    1d64:	3e 81       	ldd	r19, Y+6	; 0x06
    1d66:	25 30       	cpi	r18, 0x05	; 5
    1d68:	31 05       	cpc	r19, r1
    1d6a:	19 f1       	breq	.+70     	; 0x1db2 <TIMER1_u8SetCompOutModeChA+0x146>
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	86 30       	cpi	r24, 0x06	; 6
    1d72:	91 05       	cpc	r25, r1
    1d74:	a9 f1       	breq	.+106    	; 0x1de0 <TIMER1_u8SetCompOutModeChA+0x174>
    1d76:	2c c0       	rjmp	.+88     	; 0x1dd0 <TIMER1_u8SetCompOutModeChA+0x164>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    1d78:	af e4       	ldi	r26, 0x4F	; 79
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	ef e4       	ldi	r30, 0x4F	; 79
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	8f 73       	andi	r24, 0x3F	; 63
    1d84:	8c 93       	st	X, r24
    1d86:	af e4       	ldi	r26, 0x4F	; 79
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	ef e4       	ldi	r30, 0x4F	; 79
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	8c 93       	st	X, r24
    1d92:	26 c0       	rjmp	.+76     	; 0x1de0 <TIMER1_u8SetCompOutModeChA+0x174>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    1d94:	af e4       	ldi	r26, 0x4F	; 79
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	ef e4       	ldi	r30, 0x4F	; 79
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8f 73       	andi	r24, 0x3F	; 63
    1da0:	8c 93       	st	X, r24
    1da2:	af e4       	ldi	r26, 0x4F	; 79
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	ef e4       	ldi	r30, 0x4F	; 79
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	80 68       	ori	r24, 0x80	; 128
    1dae:	8c 93       	st	X, r24
    1db0:	17 c0       	rjmp	.+46     	; 0x1de0 <TIMER1_u8SetCompOutModeChA+0x174>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    1db2:	af e4       	ldi	r26, 0x4F	; 79
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	ef e4       	ldi	r30, 0x4F	; 79
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8f 73       	andi	r24, 0x3F	; 63
    1dbe:	8c 93       	st	X, r24
    1dc0:	af e4       	ldi	r26, 0x4F	; 79
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	ef e4       	ldi	r30, 0x4F	; 79
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 6c       	ori	r24, 0xC0	; 192
    1dcc:	8c 93       	st	X, r24
    1dce:	08 c0       	rjmp	.+16     	; 0x1de0 <TIMER1_u8SetCompOutModeChA+0x174>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <TIMER1_u8SetCompOutModeChA+0x174>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <TIMER1_u8SetCompOutModeChA+0x174>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de2:	28 96       	adiw	r28, 0x08	; 8
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <TIMER1_u8SetCompOutModeChB>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER1_u8SetCompOutModeChB(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	28 97       	sbiw	r28, 0x08	; 8
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	9b 83       	std	Y+3, r25	; 0x03
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
    1e0c:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1e0e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	9b 81       	ldd	r25, Y+3	; 0x03
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <TIMER1_u8SetCompOutModeChB+0x26>
    1e18:	a2 c0       	rjmp	.+324    	; 0x1f5e <TIMER1_u8SetCompOutModeChB+0x16a>
	{
		switch(Copy_pstTimerConfig -> WGM)
    1e1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e1e:	81 81       	ldd	r24, Z+1	; 0x01
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	38 87       	std	Y+8, r19	; 0x08
    1e26:	2f 83       	std	Y+7, r18	; 0x07
    1e28:	8f 81       	ldd	r24, Y+7	; 0x07
    1e2a:	98 85       	ldd	r25, Y+8	; 0x08
    1e2c:	8c 30       	cpi	r24, 0x0C	; 12
    1e2e:	91 05       	cpc	r25, r1
    1e30:	ac f4       	brge	.+42     	; 0x1e5c <TIMER1_u8SetCompOutModeChB+0x68>
    1e32:	2f 81       	ldd	r18, Y+7	; 0x07
    1e34:	38 85       	ldd	r19, Y+8	; 0x08
    1e36:	25 30       	cpi	r18, 0x05	; 5
    1e38:	31 05       	cpc	r19, r1
    1e3a:	0c f0       	brlt	.+2      	; 0x1e3e <TIMER1_u8SetCompOutModeChB+0x4a>
    1e3c:	3f c0       	rjmp	.+126    	; 0x1ebc <TIMER1_u8SetCompOutModeChB+0xc8>
    1e3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e40:	98 85       	ldd	r25, Y+8	; 0x08
    1e42:	84 30       	cpi	r24, 0x04	; 4
    1e44:	91 05       	cpc	r25, r1
    1e46:	bc f4       	brge	.+46     	; 0x1e76 <TIMER1_u8SetCompOutModeChB+0x82>
    1e48:	2f 81       	ldd	r18, Y+7	; 0x07
    1e4a:	38 85       	ldd	r19, Y+8	; 0x08
    1e4c:	21 30       	cpi	r18, 0x01	; 1
    1e4e:	31 05       	cpc	r19, r1
    1e50:	ac f5       	brge	.+106    	; 0x1ebc <TIMER1_u8SetCompOutModeChB+0xc8>
    1e52:	8f 81       	ldd	r24, Y+7	; 0x07
    1e54:	98 85       	ldd	r25, Y+8	; 0x08
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	71 f0       	breq	.+28     	; 0x1e76 <TIMER1_u8SetCompOutModeChB+0x82>
    1e5a:	7e c0       	rjmp	.+252    	; 0x1f58 <TIMER1_u8SetCompOutModeChB+0x164>
    1e5c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e5e:	38 85       	ldd	r19, Y+8	; 0x08
    1e60:	2c 30       	cpi	r18, 0x0C	; 12
    1e62:	31 05       	cpc	r19, r1
    1e64:	41 f0       	breq	.+16     	; 0x1e76 <TIMER1_u8SetCompOutModeChB+0x82>
    1e66:	8f 81       	ldd	r24, Y+7	; 0x07
    1e68:	98 85       	ldd	r25, Y+8	; 0x08
    1e6a:	0e 97       	sbiw	r24, 0x0e	; 14
    1e6c:	82 30       	cpi	r24, 0x02	; 2
    1e6e:	91 05       	cpc	r25, r1
    1e70:	08 f0       	brcs	.+2      	; 0x1e74 <TIMER1_u8SetCompOutModeChB+0x80>
    1e72:	72 c0       	rjmp	.+228    	; 0x1f58 <TIMER1_u8SetCompOutModeChB+0x164>
    1e74:	23 c0       	rjmp	.+70     	; 0x1ebc <TIMER1_u8SetCompOutModeChB+0xc8>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel B*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	84 30       	cpi	r24, 0x04	; 4
    1e7a:	c8 f4       	brcc	.+50     	; 0x1eae <TIMER1_u8SetCompOutModeChB+0xba>
			{
				TCCR1A &= TIMER1_OCMATCH_B_MASK;
    1e7c:	af e4       	ldi	r26, 0x4F	; 79
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	ef e4       	ldi	r30, 0x4F	; 79
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	8f 7c       	andi	r24, 0xCF	; 207
    1e88:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 4);
    1e8a:	af e4       	ldi	r26, 0x4F	; 79
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	ef e4       	ldi	r30, 0x4F	; 79
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	28 2f       	mov	r18, r24
    1e96:	8c 81       	ldd	r24, Y+4	; 0x04
    1e98:	88 2f       	mov	r24, r24
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	82 95       	swap	r24
    1e9e:	92 95       	swap	r25
    1ea0:	90 7f       	andi	r25, 0xF0	; 240
    1ea2:	98 27       	eor	r25, r24
    1ea4:	80 7f       	andi	r24, 0xF0	; 240
    1ea6:	98 27       	eor	r25, r24
    1ea8:	82 2b       	or	r24, r18
    1eaa:	8c 93       	st	X, r24
    1eac:	5a c0       	rjmp	.+180    	; 0x1f62 <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    1eae:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb0:	86 30       	cpi	r24, 0x06	; 6
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <TIMER1_u8SetCompOutModeChB+0xc2>
    1eb4:	56 c0       	rjmp	.+172    	; 0x1f62 <TIMER1_u8SetCompOutModeChB+0x16e>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	53 c0       	rjmp	.+166    	; 0x1f62 <TIMER1_u8SetCompOutModeChB+0x16e>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel B*/
			switch(Copy_u8Mode)
    1ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	3e 83       	std	Y+6, r19	; 0x06
    1ec4:	2d 83       	std	Y+5, r18	; 0x05
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eca:	84 30       	cpi	r24, 0x04	; 4
    1ecc:	91 05       	cpc	r25, r1
    1ece:	19 f1       	breq	.+70     	; 0x1f16 <TIMER1_u8SetCompOutModeChB+0x122>
    1ed0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ed2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ed4:	25 30       	cpi	r18, 0x05	; 5
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <TIMER1_u8SetCompOutModeChB+0xf0>
    1eda:	8d 81       	ldd	r24, Y+5	; 0x05
    1edc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	61 f0       	breq	.+24     	; 0x1efa <TIMER1_u8SetCompOutModeChB+0x106>
    1ee2:	37 c0       	rjmp	.+110    	; 0x1f52 <TIMER1_u8SetCompOutModeChB+0x15e>
    1ee4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ee6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ee8:	25 30       	cpi	r18, 0x05	; 5
    1eea:	31 05       	cpc	r19, r1
    1eec:	19 f1       	breq	.+70     	; 0x1f34 <TIMER1_u8SetCompOutModeChB+0x140>
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	86 30       	cpi	r24, 0x06	; 6
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	a9 f1       	breq	.+106    	; 0x1f62 <TIMER1_u8SetCompOutModeChB+0x16e>
    1ef8:	2c c0       	rjmp	.+88     	; 0x1f52 <TIMER1_u8SetCompOutModeChB+0x15e>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    1efa:	af e4       	ldi	r26, 0x4F	; 79
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	ef e4       	ldi	r30, 0x4F	; 79
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 7c       	andi	r24, 0xCF	; 207
    1f06:	8c 93       	st	X, r24
    1f08:	af e4       	ldi	r26, 0x4F	; 79
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	ef e4       	ldi	r30, 0x4F	; 79
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	8c 93       	st	X, r24
    1f14:	26 c0       	rjmp	.+76     	; 0x1f62 <TIMER1_u8SetCompOutModeChB+0x16e>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    1f16:	af e4       	ldi	r26, 0x4F	; 79
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	ef e4       	ldi	r30, 0x4F	; 79
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	8f 7c       	andi	r24, 0xCF	; 207
    1f22:	8c 93       	st	X, r24
    1f24:	af e4       	ldi	r26, 0x4F	; 79
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	ef e4       	ldi	r30, 0x4F	; 79
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	80 62       	ori	r24, 0x20	; 32
    1f30:	8c 93       	st	X, r24
    1f32:	17 c0       	rjmp	.+46     	; 0x1f62 <TIMER1_u8SetCompOutModeChB+0x16e>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    1f34:	af e4       	ldi	r26, 0x4F	; 79
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	ef e4       	ldi	r30, 0x4F	; 79
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8f 7c       	andi	r24, 0xCF	; 207
    1f40:	8c 93       	st	X, r24
    1f42:	af e4       	ldi	r26, 0x4F	; 79
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	ef e4       	ldi	r30, 0x4F	; 79
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	80 63       	ori	r24, 0x30	; 48
    1f4e:	8c 93       	st	X, r24
    1f50:	08 c0       	rjmp	.+16     	; 0x1f62 <TIMER1_u8SetCompOutModeChB+0x16e>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	05 c0       	rjmp	.+10     	; 0x1f62 <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <TIMER1_u8SetCompOutModeChB+0x16e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f64:	28 96       	adiw	r28, 0x08	; 8
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <TIMER2_u8SetCompOutMode>:
 * @param Copy_pstTimerConfig	Struct of the timer configurations.
 * @param Copy_u8Mode			Compare output mode which needed to be set.
 * @return						Error State.
 */
uint8 TIMER2_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	28 97       	sbiw	r28, 0x08	; 8
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	9b 83       	std	Y+3, r25	; 0x03
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
    1f8e:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1f90:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	9b 81       	ldd	r25, Y+3	; 0x03
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <TIMER2_u8SetCompOutMode+0x26>
    1f9a:	cd c0       	rjmp	.+410    	; 0x2136 <TIMER2_u8SetCompOutMode+0x1c0>
	{
		/*Select Wave Generation Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    1f9c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f9e:	fb 81       	ldd	r31, Y+3	; 0x03
    1fa0:	81 81       	ldd	r24, Z+1	; 0x01
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	38 87       	std	Y+8, r19	; 0x08
    1fa8:	2f 83       	std	Y+7, r18	; 0x07
    1faa:	8f 81       	ldd	r24, Y+7	; 0x07
    1fac:	98 85       	ldd	r25, Y+8	; 0x08
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	21 f1       	breq	.+72     	; 0x1ffc <TIMER2_u8SetCompOutMode+0x86>
    1fb4:	2f 81       	ldd	r18, Y+7	; 0x07
    1fb6:	38 85       	ldd	r19, Y+8	; 0x08
    1fb8:	22 30       	cpi	r18, 0x02	; 2
    1fba:	31 05       	cpc	r19, r1
    1fbc:	2c f4       	brge	.+10     	; 0x1fc8 <TIMER2_u8SetCompOutMode+0x52>
    1fbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc0:	98 85       	ldd	r25, Y+8	; 0x08
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	61 f0       	breq	.+24     	; 0x1fde <TIMER2_u8SetCompOutMode+0x68>
    1fc6:	46 c0       	rjmp	.+140    	; 0x2054 <TIMER2_u8SetCompOutMode+0xde>
    1fc8:	2f 81       	ldd	r18, Y+7	; 0x07
    1fca:	38 85       	ldd	r19, Y+8	; 0x08
    1fcc:	22 30       	cpi	r18, 0x02	; 2
    1fce:	31 05       	cpc	r19, r1
    1fd0:	21 f1       	breq	.+72     	; 0x201a <TIMER2_u8SetCompOutMode+0xa4>
    1fd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd4:	98 85       	ldd	r25, Y+8	; 0x08
    1fd6:	83 30       	cpi	r24, 0x03	; 3
    1fd8:	91 05       	cpc	r25, r1
    1fda:	71 f1       	breq	.+92     	; 0x2038 <TIMER2_u8SetCompOutMode+0xc2>
    1fdc:	3b c0       	rjmp	.+118    	; 0x2054 <TIMER2_u8SetCompOutMode+0xde>
		{
		case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    1fde:	a5 e4       	ldi	r26, 0x45	; 69
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e5 e4       	ldi	r30, 0x45	; 69
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	8f 7b       	andi	r24, 0xBF	; 191
    1fea:	8c 93       	st	X, r24
    1fec:	a5 e4       	ldi	r26, 0x45	; 69
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e5 e4       	ldi	r30, 0x45	; 69
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	87 7f       	andi	r24, 0xF7	; 247
    1ff8:	8c 93       	st	X, r24
    1ffa:	2c c0       	rjmp	.+88     	; 0x2054 <TIMER2_u8SetCompOutMode+0xde>
		case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    1ffc:	a5 e4       	ldi	r26, 0x45	; 69
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e5 e4       	ldi	r30, 0x45	; 69
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	80 64       	ori	r24, 0x40	; 64
    2008:	8c 93       	st	X, r24
    200a:	a5 e4       	ldi	r26, 0x45	; 69
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e5 e4       	ldi	r30, 0x45	; 69
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	87 7f       	andi	r24, 0xF7	; 247
    2016:	8c 93       	st	X, r24
    2018:	1d c0       	rjmp	.+58     	; 0x2054 <TIMER2_u8SetCompOutMode+0xde>
		case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    201a:	a5 e4       	ldi	r26, 0x45	; 69
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e5 e4       	ldi	r30, 0x45	; 69
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	8f 7b       	andi	r24, 0xBF	; 191
    2026:	8c 93       	st	X, r24
    2028:	a5 e4       	ldi	r26, 0x45	; 69
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e5 e4       	ldi	r30, 0x45	; 69
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	88 60       	ori	r24, 0x08	; 8
    2034:	8c 93       	st	X, r24
    2036:	0e c0       	rjmp	.+28     	; 0x2054 <TIMER2_u8SetCompOutMode+0xde>
		case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2038:	a5 e4       	ldi	r26, 0x45	; 69
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e5 e4       	ldi	r30, 0x45	; 69
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	80 64       	ori	r24, 0x40	; 64
    2044:	8c 93       	st	X, r24
    2046:	a5 e4       	ldi	r26, 0x45	; 69
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e5 e4       	ldi	r30, 0x45	; 69
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	88 60       	ori	r24, 0x08	; 8
    2052:	8c 93       	st	X, r24
		}

		/*Select Output Compare Match Mode*/
		TCCR2 &= TIMER0_2_OCMATCH_MASK;
    2054:	a5 e4       	ldi	r26, 0x45	; 69
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e5 e4       	ldi	r30, 0x45	; 69
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	8f 7c       	andi	r24, 0xCF	; 207
    2060:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    2062:	ea 81       	ldd	r30, Y+2	; 0x02
    2064:	fb 81       	ldd	r31, Y+3	; 0x03
    2066:	81 81       	ldd	r24, Z+1	; 0x01
    2068:	88 23       	and	r24, r24
    206a:	29 f0       	breq	.+10     	; 0x2076 <TIMER2_u8SetCompOutMode+0x100>
    206c:	ea 81       	ldd	r30, Y+2	; 0x02
    206e:	fb 81       	ldd	r31, Y+3	; 0x03
    2070:	81 81       	ldd	r24, Z+1	; 0x01
    2072:	82 30       	cpi	r24, 0x02	; 2
    2074:	c1 f4       	brne	.+48     	; 0x20a6 <TIMER2_u8SetCompOutMode+0x130>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    2076:	8c 81       	ldd	r24, Y+4	; 0x04
    2078:	84 30       	cpi	r24, 0x04	; 4
    207a:	90 f4       	brcc	.+36     	; 0x20a0 <TIMER2_u8SetCompOutMode+0x12a>
			{
				TCCR2 |= (Copy_u8Mode << 4);
    207c:	a5 e4       	ldi	r26, 0x45	; 69
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e5 e4       	ldi	r30, 0x45	; 69
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	28 2f       	mov	r18, r24
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	82 95       	swap	r24
    2090:	92 95       	swap	r25
    2092:	90 7f       	andi	r25, 0xF0	; 240
    2094:	98 27       	eor	r25, r24
    2096:	80 7f       	andi	r24, 0xF0	; 240
    2098:	98 27       	eor	r25, r24
    209a:	82 2b       	or	r24, r18
    209c:	8c 93       	st	X, r24
    209e:	39 c0       	rjmp	.+114    	; 0x2112 <TIMER2_u8SetCompOutMode+0x19c>
			}
			else
			{
				Local_u8ErrorState = NOK;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	36 c0       	rjmp	.+108    	; 0x2112 <TIMER2_u8SetCompOutMode+0x19c>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    20a6:	ea 81       	ldd	r30, Y+2	; 0x02
    20a8:	fb 81       	ldd	r31, Y+3	; 0x03
    20aa:	81 81       	ldd	r24, Z+1	; 0x01
    20ac:	83 30       	cpi	r24, 0x03	; 3
    20ae:	29 f0       	breq	.+10     	; 0x20ba <TIMER2_u8SetCompOutMode+0x144>
    20b0:	ea 81       	ldd	r30, Y+2	; 0x02
    20b2:	fb 81       	ldd	r31, Y+3	; 0x03
    20b4:	81 81       	ldd	r24, Z+1	; 0x01
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	61 f5       	brne	.+88     	; 0x2112 <TIMER2_u8SetCompOutMode+0x19c>
		{
			switch(Copy_u8Mode)
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	3e 83       	std	Y+6, r19	; 0x06
    20c2:	2d 83       	std	Y+5, r18	; 0x05
    20c4:	8d 81       	ldd	r24, Y+5	; 0x05
    20c6:	9e 81       	ldd	r25, Y+6	; 0x06
    20c8:	84 30       	cpi	r24, 0x04	; 4
    20ca:	91 05       	cpc	r25, r1
    20cc:	81 f0       	breq	.+32     	; 0x20ee <TIMER2_u8SetCompOutMode+0x178>
    20ce:	2d 81       	ldd	r18, Y+5	; 0x05
    20d0:	3e 81       	ldd	r19, Y+6	; 0x06
    20d2:	25 30       	cpi	r18, 0x05	; 5
    20d4:	31 05       	cpc	r19, r1
    20d6:	99 f0       	breq	.+38     	; 0x20fe <TIMER2_u8SetCompOutMode+0x188>
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	b9 f4       	brne	.+46     	; 0x210e <TIMER2_u8SetCompOutMode+0x198>
			{
			case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    20e0:	e5 e4       	ldi	r30, 0x45	; 69
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	a5 e4       	ldi	r26, 0x45	; 69
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	8c 91       	ld	r24, X
    20ea:	80 83       	st	Z, r24
    20ec:	12 c0       	rjmp	.+36     	; 0x2112 <TIMER2_u8SetCompOutMode+0x19c>
			case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    20ee:	a5 e4       	ldi	r26, 0x45	; 69
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e5 e4       	ldi	r30, 0x45	; 69
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	80 62       	ori	r24, 0x20	; 32
    20fa:	8c 93       	st	X, r24
    20fc:	0a c0       	rjmp	.+20     	; 0x2112 <TIMER2_u8SetCompOutMode+0x19c>
			case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    20fe:	a5 e4       	ldi	r26, 0x45	; 69
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e5 e4       	ldi	r30, 0x45	; 69
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	80 63       	ori	r24, 0x30	; 48
    210a:	8c 93       	st	X, r24
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <TIMER2_u8SetCompOutMode+0x19c>
			default: Local_u8ErrorState = NOK;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		/*Select the clock*/
		TCCR2 &= PRESCALER_MASK;
    2112:	a5 e4       	ldi	r26, 0x45	; 69
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e5 e4       	ldi	r30, 0x45	; 69
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	88 7f       	andi	r24, 0xF8	; 248
    211e:	8c 93       	st	X, r24
		TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    2120:	a5 e4       	ldi	r26, 0x45	; 69
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e5 e4       	ldi	r30, 0x45	; 69
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	90 81       	ld	r25, Z
    212a:	ea 81       	ldd	r30, Y+2	; 0x02
    212c:	fb 81       	ldd	r31, Y+3	; 0x03
    212e:	80 81       	ld	r24, Z
    2130:	89 2b       	or	r24, r25
    2132:	8c 93       	st	X, r24
    2134:	02 c0       	rjmp	.+4      	; 0x213a <TIMER2_u8SetCompOutMode+0x1c4>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    213a:	89 81       	ldd	r24, Y+1	; 0x01
}
    213c:	28 96       	adiw	r28, 0x08	; 8
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <TIMERS_u8IntEnable>:
 * @brief 					Function to enable any of timer interrupts.
 * @param Copy_u8TimerInt	Interrupt source wanted to be enabled.
 * @return					Error State.
 */
uint8 TIMERS_u8IntEnable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	00 d0       	rcall	.+0      	; 0x2154 <TIMERS_u8IntEnable+0x6>
    2154:	00 d0       	rcall	.+0      	; 0x2156 <TIMERS_u8IntEnable+0x8>
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    215c:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	3c 83       	std	Y+4, r19	; 0x04
    2166:	2b 83       	std	Y+3, r18	; 0x03
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	83 30       	cpi	r24, 0x03	; 3
    216e:	91 05       	cpc	r25, r1
    2170:	09 f4       	brne	.+2      	; 0x2174 <TIMERS_u8IntEnable+0x26>
    2172:	42 c0       	rjmp	.+132    	; 0x21f8 <TIMERS_u8IntEnable+0xaa>
    2174:	2b 81       	ldd	r18, Y+3	; 0x03
    2176:	3c 81       	ldd	r19, Y+4	; 0x04
    2178:	24 30       	cpi	r18, 0x04	; 4
    217a:	31 05       	cpc	r19, r1
    217c:	7c f4       	brge	.+30     	; 0x219c <TIMERS_u8IntEnable+0x4e>
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	81 30       	cpi	r24, 0x01	; 1
    2184:	91 05       	cpc	r25, r1
    2186:	41 f1       	breq	.+80     	; 0x21d8 <TIMERS_u8IntEnable+0x8a>
    2188:	2b 81       	ldd	r18, Y+3	; 0x03
    218a:	3c 81       	ldd	r19, Y+4	; 0x04
    218c:	22 30       	cpi	r18, 0x02	; 2
    218e:	31 05       	cpc	r19, r1
    2190:	5c f5       	brge	.+86     	; 0x21e8 <TIMERS_u8IntEnable+0x9a>
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	b9 f0       	breq	.+46     	; 0x21c8 <TIMERS_u8IntEnable+0x7a>
    219a:	56 c0       	rjmp	.+172    	; 0x2248 <TIMERS_u8IntEnable+0xfa>
    219c:	2b 81       	ldd	r18, Y+3	; 0x03
    219e:	3c 81       	ldd	r19, Y+4	; 0x04
    21a0:	25 30       	cpi	r18, 0x05	; 5
    21a2:	31 05       	cpc	r19, r1
    21a4:	c9 f1       	breq	.+114    	; 0x2218 <TIMERS_u8IntEnable+0xca>
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	85 30       	cpi	r24, 0x05	; 5
    21ac:	91 05       	cpc	r25, r1
    21ae:	64 f1       	brlt	.+88     	; 0x2208 <TIMERS_u8IntEnable+0xba>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	26 30       	cpi	r18, 0x06	; 6
    21b6:	31 05       	cpc	r19, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <TIMERS_u8IntEnable+0x6e>
    21ba:	3e c0       	rjmp	.+124    	; 0x2238 <TIMERS_u8IntEnable+0xea>
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	87 30       	cpi	r24, 0x07	; 7
    21c2:	91 05       	cpc	r25, r1
    21c4:	89 f1       	breq	.+98     	; 0x2228 <TIMERS_u8IntEnable+0xda>
    21c6:	40 c0       	rjmp	.+128    	; 0x2248 <TIMERS_u8IntEnable+0xfa>
	{
	case TIMER0_OVF:	SET_BIT(TIMSK,TIMSK_TOIE0);	break;
    21c8:	a9 e5       	ldi	r26, 0x59	; 89
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e9 e5       	ldi	r30, 0x59	; 89
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	81 60       	ori	r24, 0x01	; 1
    21d4:	8c 93       	st	X, r24
    21d6:	3a c0       	rjmp	.+116    	; 0x224c <TIMERS_u8IntEnable+0xfe>
	case TIMER0_COMP:	SET_BIT(TIMSK,TIMSK_OCIE0);	break;
    21d8:	a9 e5       	ldi	r26, 0x59	; 89
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e9 e5       	ldi	r30, 0x59	; 89
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	82 60       	ori	r24, 0x02	; 2
    21e4:	8c 93       	st	X, r24
    21e6:	32 c0       	rjmp	.+100    	; 0x224c <TIMERS_u8IntEnable+0xfe>
	case TIMER1_OVF:	SET_BIT(TIMSK,TIMSK_TOIE1);	break;
    21e8:	a9 e5       	ldi	r26, 0x59	; 89
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e9 e5       	ldi	r30, 0x59	; 89
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	84 60       	ori	r24, 0x04	; 4
    21f4:	8c 93       	st	X, r24
    21f6:	2a c0       	rjmp	.+84     	; 0x224c <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPA:	SET_BIT(TIMSK,TIMSK_OCIE1A);	break;
    21f8:	a9 e5       	ldi	r26, 0x59	; 89
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e9 e5       	ldi	r30, 0x59	; 89
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	80 61       	ori	r24, 0x10	; 16
    2204:	8c 93       	st	X, r24
    2206:	22 c0       	rjmp	.+68     	; 0x224c <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPB:	SET_BIT(TIMSK,TIMSK_OCIE1B);	break;
    2208:	a9 e5       	ldi	r26, 0x59	; 89
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e9 e5       	ldi	r30, 0x59	; 89
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	88 60       	ori	r24, 0x08	; 8
    2214:	8c 93       	st	X, r24
    2216:	1a c0       	rjmp	.+52     	; 0x224c <TIMERS_u8IntEnable+0xfe>
	case TIMER1_CAPT:	SET_BIT(TIMSK,TIMSK_TICIE1);	break;
    2218:	a9 e5       	ldi	r26, 0x59	; 89
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e9 e5       	ldi	r30, 0x59	; 89
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	80 62       	ori	r24, 0x20	; 32
    2224:	8c 93       	st	X, r24
    2226:	12 c0       	rjmp	.+36     	; 0x224c <TIMERS_u8IntEnable+0xfe>
	case TIMER2_COMP:	SET_BIT(TIMSK,TIMSK_OCIE2); break;
    2228:	a9 e5       	ldi	r26, 0x59	; 89
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e9 e5       	ldi	r30, 0x59	; 89
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 68       	ori	r24, 0x80	; 128
    2234:	8c 93       	st	X, r24
    2236:	0a c0       	rjmp	.+20     	; 0x224c <TIMERS_u8IntEnable+0xfe>
	case TIMER2_OVF:	SET_BIT(TIMSK,TIMSK_TOIE2);	break;
    2238:	a9 e5       	ldi	r26, 0x59	; 89
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e9 e5       	ldi	r30, 0x59	; 89
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	80 64       	ori	r24, 0x40	; 64
    2244:	8c 93       	st	X, r24
    2246:	02 c0       	rjmp	.+4      	; 0x224c <TIMERS_u8IntEnable+0xfe>
	default:Local_u8ErrorState = NOK;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    224c:	89 81       	ldd	r24, Y+1	; 0x01
}
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <TIMERS_u8IntDisable>:
 * @brief 					Function to disable any of timer interrupts.
 * @param Copy_u8TimerInt	Interrupt source wanted to be disabled.
 * @return					Error State.
 */
uint8 TIMERS_u8IntDisable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	00 d0       	rcall	.+0      	; 0x2262 <TIMERS_u8IntDisable+0x6>
    2262:	00 d0       	rcall	.+0      	; 0x2264 <TIMERS_u8IntDisable+0x8>
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    226a:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	3c 83       	std	Y+4, r19	; 0x04
    2274:	2b 83       	std	Y+3, r18	; 0x03
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	83 30       	cpi	r24, 0x03	; 3
    227c:	91 05       	cpc	r25, r1
    227e:	09 f4       	brne	.+2      	; 0x2282 <TIMERS_u8IntDisable+0x26>
    2280:	42 c0       	rjmp	.+132    	; 0x2306 <TIMERS_u8IntDisable+0xaa>
    2282:	2b 81       	ldd	r18, Y+3	; 0x03
    2284:	3c 81       	ldd	r19, Y+4	; 0x04
    2286:	24 30       	cpi	r18, 0x04	; 4
    2288:	31 05       	cpc	r19, r1
    228a:	7c f4       	brge	.+30     	; 0x22aa <TIMERS_u8IntDisable+0x4e>
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	81 30       	cpi	r24, 0x01	; 1
    2292:	91 05       	cpc	r25, r1
    2294:	41 f1       	breq	.+80     	; 0x22e6 <TIMERS_u8IntDisable+0x8a>
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	22 30       	cpi	r18, 0x02	; 2
    229c:	31 05       	cpc	r19, r1
    229e:	5c f5       	brge	.+86     	; 0x22f6 <TIMERS_u8IntDisable+0x9a>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	b9 f0       	breq	.+46     	; 0x22d6 <TIMERS_u8IntDisable+0x7a>
    22a8:	56 c0       	rjmp	.+172    	; 0x2356 <TIMERS_u8IntDisable+0xfa>
    22aa:	2b 81       	ldd	r18, Y+3	; 0x03
    22ac:	3c 81       	ldd	r19, Y+4	; 0x04
    22ae:	25 30       	cpi	r18, 0x05	; 5
    22b0:	31 05       	cpc	r19, r1
    22b2:	c9 f1       	breq	.+114    	; 0x2326 <TIMERS_u8IntDisable+0xca>
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	85 30       	cpi	r24, 0x05	; 5
    22ba:	91 05       	cpc	r25, r1
    22bc:	64 f1       	brlt	.+88     	; 0x2316 <TIMERS_u8IntDisable+0xba>
    22be:	2b 81       	ldd	r18, Y+3	; 0x03
    22c0:	3c 81       	ldd	r19, Y+4	; 0x04
    22c2:	26 30       	cpi	r18, 0x06	; 6
    22c4:	31 05       	cpc	r19, r1
    22c6:	09 f4       	brne	.+2      	; 0x22ca <TIMERS_u8IntDisable+0x6e>
    22c8:	3e c0       	rjmp	.+124    	; 0x2346 <TIMERS_u8IntDisable+0xea>
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	87 30       	cpi	r24, 0x07	; 7
    22d0:	91 05       	cpc	r25, r1
    22d2:	89 f1       	breq	.+98     	; 0x2336 <TIMERS_u8IntDisable+0xda>
    22d4:	40 c0       	rjmp	.+128    	; 0x2356 <TIMERS_u8IntDisable+0xfa>
	{
	case TIMER0_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE0);	break;
    22d6:	a9 e5       	ldi	r26, 0x59	; 89
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e9 e5       	ldi	r30, 0x59	; 89
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	8e 7f       	andi	r24, 0xFE	; 254
    22e2:	8c 93       	st	X, r24
    22e4:	3a c0       	rjmp	.+116    	; 0x235a <TIMERS_u8IntDisable+0xfe>
	case TIMER0_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE0);	break;
    22e6:	a9 e5       	ldi	r26, 0x59	; 89
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e9 e5       	ldi	r30, 0x59	; 89
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	8d 7f       	andi	r24, 0xFD	; 253
    22f2:	8c 93       	st	X, r24
    22f4:	32 c0       	rjmp	.+100    	; 0x235a <TIMERS_u8IntDisable+0xfe>
	case TIMER1_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE1);	break;
    22f6:	a9 e5       	ldi	r26, 0x59	; 89
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e9 e5       	ldi	r30, 0x59	; 89
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	8b 7f       	andi	r24, 0xFB	; 251
    2302:	8c 93       	st	X, r24
    2304:	2a c0       	rjmp	.+84     	; 0x235a <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPA:	CLR_BIT(TIMSK,TIMSK_OCIE1A);	break;
    2306:	a9 e5       	ldi	r26, 0x59	; 89
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e9 e5       	ldi	r30, 0x59	; 89
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	8f 7e       	andi	r24, 0xEF	; 239
    2312:	8c 93       	st	X, r24
    2314:	22 c0       	rjmp	.+68     	; 0x235a <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPB:	CLR_BIT(TIMSK,TIMSK_OCIE1B);	break;
    2316:	a9 e5       	ldi	r26, 0x59	; 89
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e9 e5       	ldi	r30, 0x59	; 89
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	87 7f       	andi	r24, 0xF7	; 247
    2322:	8c 93       	st	X, r24
    2324:	1a c0       	rjmp	.+52     	; 0x235a <TIMERS_u8IntDisable+0xfe>
	case TIMER1_CAPT:	CLR_BIT(TIMSK,TIMSK_TICIE1);	break;
    2326:	a9 e5       	ldi	r26, 0x59	; 89
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e9 e5       	ldi	r30, 0x59	; 89
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	8f 7d       	andi	r24, 0xDF	; 223
    2332:	8c 93       	st	X, r24
    2334:	12 c0       	rjmp	.+36     	; 0x235a <TIMERS_u8IntDisable+0xfe>
	case TIMER2_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE2); break;
    2336:	a9 e5       	ldi	r26, 0x59	; 89
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e9 e5       	ldi	r30, 0x59	; 89
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	8f 77       	andi	r24, 0x7F	; 127
    2342:	8c 93       	st	X, r24
    2344:	0a c0       	rjmp	.+20     	; 0x235a <TIMERS_u8IntDisable+0xfe>
	case TIMER2_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE2);	break;
    2346:	a9 e5       	ldi	r26, 0x59	; 89
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e9 e5       	ldi	r30, 0x59	; 89
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8f 7b       	andi	r24, 0xBF	; 191
    2352:	8c 93       	st	X, r24
    2354:	02 c0       	rjmp	.+4      	; 0x235a <TIMERS_u8IntDisable+0xfe>
	default:Local_u8ErrorState = NOK;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    235a:	89 81       	ldd	r24, Y+1	; 0x01
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <TIMERS_u8Disable>:
 * @brief				Function to disable a timer peripheral.
 * @param Copy_u8Timer	Timer wanted to be disabled.
 * @return				Error State.
 */
uint8 TIMERS_u8Disable(TIMERS_NUM Copy_u8Timer)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <TIMERS_u8Disable+0x6>
    2370:	00 d0       	rcall	.+0      	; 0x2372 <TIMERS_u8Disable+0x8>
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2378:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the timer*/
	switch(Copy_u8Timer)
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	3c 83       	std	Y+4, r19	; 0x04
    2382:	2b 83       	std	Y+3, r18	; 0x03
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	91 05       	cpc	r25, r1
    238c:	99 f0       	breq	.+38     	; 0x23b4 <TIMERS_u8Disable+0x4a>
    238e:	2b 81       	ldd	r18, Y+3	; 0x03
    2390:	3c 81       	ldd	r19, Y+4	; 0x04
    2392:	22 30       	cpi	r18, 0x02	; 2
    2394:	31 05       	cpc	r19, r1
    2396:	c1 f0       	breq	.+48     	; 0x23c8 <TIMERS_u8Disable+0x5e>
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	f1 f4       	brne	.+60     	; 0x23dc <TIMERS_u8Disable+0x72>
	{
	case TIMER0: TIMERS_u8StateArr[TIMER0] = IDLE;	TCCR0 &= PRESCALER_MASK;	break;
    23a0:	10 92 8f 00 	sts	0x008F, r1
    23a4:	a3 e5       	ldi	r26, 0x53	; 83
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e3 e5       	ldi	r30, 0x53	; 83
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	88 7f       	andi	r24, 0xF8	; 248
    23b0:	8c 93       	st	X, r24
    23b2:	16 c0       	rjmp	.+44     	; 0x23e0 <TIMERS_u8Disable+0x76>
	case TIMER1: TIMERS_u8StateArr[TIMER1] = IDLE;	TCCR1B &= PRESCALER_MASK;	break;
    23b4:	10 92 90 00 	sts	0x0090, r1
    23b8:	ae e4       	ldi	r26, 0x4E	; 78
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	ee e4       	ldi	r30, 0x4E	; 78
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	88 7f       	andi	r24, 0xF8	; 248
    23c4:	8c 93       	st	X, r24
    23c6:	0c c0       	rjmp	.+24     	; 0x23e0 <TIMERS_u8Disable+0x76>
	case TIMER2: TIMERS_u8StateArr[TIMER2] = IDLE;	TCCR2 &= PRESCALER_MASK;	break;
    23c8:	10 92 91 00 	sts	0x0091, r1
    23cc:	a5 e4       	ldi	r26, 0x45	; 69
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e5 e4       	ldi	r30, 0x45	; 69
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	88 7f       	andi	r24, 0xF8	; 248
    23d8:	8c 93       	st	X, r24
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <TIMERS_u8Disable+0x76>
	default:	Local_u8ErrorState = NOK;	break;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <TIMERS_u8SetCallBack>:
 * @param Copy_u8TimerIntSource	Interrupt source.
 * @param Copy_pvCallBackFunc	Pointer to call back function.
 * @return						Error State.
 */
uint8 TIMERS_u8SetCallBack(TIMERS_Int_Src_t Copy_u8TimerIntSource, void (* Copy_pvCallBackFunc)(void))
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <TIMERS_u8SetCallBack+0x6>
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <TIMERS_u8SetCallBack+0x8>
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	8a 83       	std	Y+2, r24	; 0x02
    23fe:	7c 83       	std	Y+4, r23	; 0x04
    2400:	6b 83       	std	Y+3, r22	; 0x03
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2402:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer of function*/
	if(Copy_pvCallBackFunc != NULL)
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	9c 81       	ldd	r25, Y+4	; 0x04
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	69 f0       	breq	.+26     	; 0x2426 <TIMERS_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFuncArr[Copy_u8TimerIntSource] = Copy_pvCallBackFunc;
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	fc 01       	movw	r30, r24
    2418:	ee 56       	subi	r30, 0x6E	; 110
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	9c 81       	ldd	r25, Y+4	; 0x04
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	80 83       	st	Z, r24
    2424:	02 c0       	rjmp	.+4      	; 0x242a <TIMERS_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    242a:	89 81       	ldd	r24, Y+1	; 0x01
}
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <TIMER0_voidSetCompValue>:
/**
 * @brief 				Function to set the output compare value of timer 0 (OCR0).
 * @param Copy_u8Value	Value of output compare.
 */
void TIMER0_voidSetCompValue(uint8 Copy_u8Value)
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	0f 92       	push	r0
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 0*/
	OCR0 = Copy_u8Value;
    2446:	ec e5       	ldi	r30, 0x5C	; 92
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	80 83       	st	Z, r24
}
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <TIMER0_voidSetOvfValue>:
/**
 * @brief 				Function to set the overflow value (preload) of timer 0 (TCNT0).
 * @param Copy_u8Value	Value of preload.
 */
void TIMER0_voidSetOvfValue(uint8 Copy_u8Value)
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 0*/
	TCNT0 = Copy_u8Value;
    2462:	e2 e5       	ldi	r30, 0x52	; 82
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	80 83       	st	Z, r24
}
    246a:	0f 90       	pop	r0
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <TIMER0_u8GetTimerValue>:
/**
 * @brief 	Function to get the timer (TCNT0) value.
 * @return	Timer value.
 */
uint8 TIMER0_u8GetTimerValue(void)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 0*/
	return TCNT0;
    247a:	e2 e5       	ldi	r30, 0x52	; 82
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
}
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <TIMER2_voidSetCompValue>:
/**
 * @brief 				Function to set the output compare value of timer 2 (OCR2).
 * @param Copy_u8Value	Value of output compare.
 */
void TIMER2_voidSetCompValue(uint8 Copy_u8Value)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	0f 92       	push	r0
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 2*/
	OCR2 = Copy_u8Value;
    2492:	e3 e4       	ldi	r30, 0x43	; 67
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	80 83       	st	Z, r24
}
    249a:	0f 90       	pop	r0
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <TIMER2_voidSetOvfValue>:
/**
 * @brief 				Function to set the overflow value (preload) of timer 2 (TCNT2).
 * @param Copy_u8Value	Value of preload.
 */
void TIMER2_voidSetOvfValue(uint8 Copy_u8Value)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	0f 92       	push	r0
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 2*/
	TCNT2 = Copy_u8Value;
    24ae:	e4 e4       	ldi	r30, 0x44	; 68
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	80 83       	st	Z, r24
}
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <TIMER2_u8GetTimerValue>:
/**
 * @brief 	Function to get the timer (TCNT2) value.
 * @return	Timer value.
 */
uint8 TIMER2_u8GetTimerValue(void)
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 2*/
	return TCNT2;
    24c6:	e4 e4       	ldi	r30, 0x44	; 68
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
}
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <TIMER1_voidSetCompValueChA>:
/**
 * @brief 				Function to set the output compare value of timer 1 channel A (OCR1A).
 * @param Copy_u16Value	Value of ouput compare channel A.
 */
void TIMER1_voidSetCompValueChA(uint16 Copy_u16Value)
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <TIMER1_voidSetCompValueChA+0x6>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel A*/
	OCR1A = Copy_u16Value;
    24e0:	ea e4       	ldi	r30, 0x4A	; 74
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	9a 81       	ldd	r25, Y+2	; 0x02
    24e8:	91 83       	std	Z+1, r25	; 0x01
    24ea:	80 83       	st	Z, r24
}
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <TIMER1_voidSetCompValueChB>:
/**
 * @brief 				Function to set the output compare value of timer 1 channel B (OCR1B).
 * @param Copy_u16Value	Value of ouput compare channel B.
 */
void TIMER1_voidSetCompValueChB(uint16 Copy_u16Value)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <TIMER1_voidSetCompValueChB+0x6>
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel B*/
	OCR1B = Copy_u16Value;
    2504:	e8 e4       	ldi	r30, 0x48	; 72
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
}
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <TIMER1_voidSetOvfValue>:
/**
 * @brief 				Function to set the overflow value (preload) of timer 1 (TCNT1).
 * @param Copy_u16Value	Value of preload.
 */
void TIMER1_voidSetOvfValue(uint16 Copy_u16Value)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	00 d0       	rcall	.+0      	; 0x2520 <TIMER1_voidSetOvfValue+0x6>
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	9a 83       	std	Y+2, r25	; 0x02
    2526:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 1*/
	TCNT1 = Copy_u16Value;
    2528:	ec e4       	ldi	r30, 0x4C	; 76
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	9a 81       	ldd	r25, Y+2	; 0x02
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	80 83       	st	Z, r24
}
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <TIMER1_voidSetInputCaptValue>:
/**
 * @brief 				Function to set a value into input capture register (ICR1).
 * @param Copy_u16Value	Value wanted to set.
 */
void TIMER1_voidSetInputCaptValue(uint16 Copy_u16Value)
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <TIMER1_voidSetInputCaptValue+0x6>
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01
	/*Set Input Capture Value of Timer 1*/
	ICR1 = Copy_u16Value;
    254c:	e6 e4       	ldi	r30, 0x46	; 70
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	9a 81       	ldd	r25, Y+2	; 0x02
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <TIMER1_u16GetTimerValue>:
/**
 * @brief	Function to get the timer (TCNT1) value.
 * @return	Timer value.
 */
uint16 TIMER1_u16GetTimerValue(void)
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 1*/
	return TCNT1;
    256a:	ec e4       	ldi	r30, 0x4C	; 76
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
}
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <TIMER1_u16GetInputCaptValue>:
/**
 * @brief	Function to get the input capture (ICR1) value.
 * @return	Input capture value.
 */
uint16 TIMER1_u16GetInputCaptValue(void)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
	/*Return Input Capture Register Value*/
	return ICR1;
    2580:	e6 e4       	ldi	r30, 0x46	; 70
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
}
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <TIMER1_u8SetInputCaptTriggerSrc>:
 * @brief					Function to set the input capture trigger source.
 * @param Copy_u8TriggerSrc	Trigger source.
 * @return					Error State.
 */
uint8 TIMER1_u8SetInputCaptTriggerSrc(uint8 Copy_u8TriggerSrc)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	00 d0       	rcall	.+0      	; 0x2594 <TIMER1_u8SetInputCaptTriggerSrc+0x6>
    2594:	00 d0       	rcall	.+0      	; 0x2596 <TIMER1_u8SetInputCaptTriggerSrc+0x8>
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    259c:	19 82       	std	Y+1, r1	; 0x01

	/*Set the trigger source selected*/
	switch(Copy_u8TriggerSrc)
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	3c 83       	std	Y+4, r19	; 0x04
    25a6:	2b 83       	std	Y+3, r18	; 0x03
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	31 f0       	breq	.+12     	; 0x25bc <TIMER1_u8SetInputCaptTriggerSrc+0x2e>
    25b0:	2b 81       	ldd	r18, Y+3	; 0x03
    25b2:	3c 81       	ldd	r19, Y+4	; 0x04
    25b4:	21 30       	cpi	r18, 0x01	; 1
    25b6:	31 05       	cpc	r19, r1
    25b8:	49 f0       	breq	.+18     	; 0x25cc <TIMER1_u8SetInputCaptTriggerSrc+0x3e>
    25ba:	10 c0       	rjmp	.+32     	; 0x25dc <TIMER1_u8SetInputCaptTriggerSrc+0x4e>
	{
	case TIMER1_u8ICU_RISING_EDGE:	SET_BIT(TCCR1B,TCCR1B_ICES1);	break;
    25bc:	ae e4       	ldi	r26, 0x4E	; 78
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	ee e4       	ldi	r30, 0x4E	; 78
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	80 64       	ori	r24, 0x40	; 64
    25c8:	8c 93       	st	X, r24
    25ca:	0a c0       	rjmp	.+20     	; 0x25e0 <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	case TIMER1_u8ICU_FALLING_EDGE: CLR_BIT(TCCR1B,TCCR1B_ICES1);	break;
    25cc:	ae e4       	ldi	r26, 0x4E	; 78
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	ee e4       	ldi	r30, 0x4E	; 78
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	8f 7b       	andi	r24, 0xBF	; 191
    25d8:	8c 93       	st	X, r24
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	default: Local_u8ErrorState = NOK;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <WDT_voidEnable>:

/**
 * @brief Function to set the watchdog timer.
 */
void WDT_voidEnable(void)
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
    25f8:	a1 e4       	ldi	r26, 0x41	; 65
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e1 e4       	ldi	r30, 0x41	; 65
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	88 60       	ori	r24, 0x08	; 8
    2604:	8c 93       	st	X, r24
}
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <WDT_voidDisable>:
/**
 * @brief Function to reset the watchdog timer.
 */
void WDT_voidDisable(void)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);
    2614:	a1 e4       	ldi	r26, 0x41	; 65
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	e1 e4       	ldi	r30, 0x41	; 65
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	88 61       	ori	r24, 0x18	; 24
    2620:	8c 93       	st	X, r24
	WDTCR &= 0b11110111;
    2622:	a1 e4       	ldi	r26, 0x41	; 65
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e1 e4       	ldi	r30, 0x41	; 65
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	87 7f       	andi	r24, 0xF7	; 247
    262e:	8c 93       	st	X, r24
}
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <WDT_u8SetTime>:
 * @brief 						Function to set the watchdog timer prescaler.
 * @param Copy_u8WatchDogTime	Time that watchdog timer will delay with.
 * @return						Error State.
 */
uint8 WDT_u8SetTime(uint8 Copy_u8WatchDogTime)
{
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	00 d0       	rcall	.+0      	; 0x263c <WDT_u8SetTime+0x6>
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	8a 83       	std	Y+2, r24	; 0x02
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    2642:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8WatchDogTime < 8u)
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	88 30       	cpi	r24, 0x08	; 8
    2648:	80 f4       	brcc	.+32     	; 0x266a <WDT_u8SetTime+0x34>
	{
		WDTCR &= WDT_PRESCALER_MASK;
    264a:	a1 e4       	ldi	r26, 0x41	; 65
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e1 e4       	ldi	r30, 0x41	; 65
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	88 7f       	andi	r24, 0xF8	; 248
    2656:	8c 93       	st	X, r24
		WDTCR |= Copy_u8WatchDogTime;
    2658:	a1 e4       	ldi	r26, 0x41	; 65
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e1 e4       	ldi	r30, 0x41	; 65
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	90 81       	ld	r25, Z
    2662:	8a 81       	ldd	r24, Y+2	; 0x02
    2664:	89 2b       	or	r24, r25
    2666:	8c 93       	st	X, r24
    2668:	02 c0       	rjmp	.+4      	; 0x266e <WDT_u8SetTime+0x38>
	}
	else
	{
		Local_u8ErrorState = NOK;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    266e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <__vector_11>:
/**
 * @brief Timer/Counter 0 OverFlow Event ISR.
 */
void __vector_11 (void) __attribute((signal));
void __vector_11 (void)
{
    267a:	1f 92       	push	r1
    267c:	0f 92       	push	r0
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	0f 92       	push	r0
    2682:	11 24       	eor	r1, r1
    2684:	2f 93       	push	r18
    2686:	3f 93       	push	r19
    2688:	4f 93       	push	r20
    268a:	5f 93       	push	r21
    268c:	6f 93       	push	r22
    268e:	7f 93       	push	r23
    2690:	8f 93       	push	r24
    2692:	9f 93       	push	r25
    2694:	af 93       	push	r26
    2696:	bf 93       	push	r27
    2698:	ef 93       	push	r30
    269a:	ff 93       	push	r31
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_OVF] != NULL)
    26a4:	80 91 92 00 	lds	r24, 0x0092
    26a8:	90 91 93 00 	lds	r25, 0x0093
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	29 f0       	breq	.+10     	; 0x26ba <__vector_11+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_OVF]();
    26b0:	e0 91 92 00 	lds	r30, 0x0092
    26b4:	f0 91 93 00 	lds	r31, 0x0093
    26b8:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	ff 91       	pop	r31
    26c0:	ef 91       	pop	r30
    26c2:	bf 91       	pop	r27
    26c4:	af 91       	pop	r26
    26c6:	9f 91       	pop	r25
    26c8:	8f 91       	pop	r24
    26ca:	7f 91       	pop	r23
    26cc:	6f 91       	pop	r22
    26ce:	5f 91       	pop	r21
    26d0:	4f 91       	pop	r20
    26d2:	3f 91       	pop	r19
    26d4:	2f 91       	pop	r18
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	0f 90       	pop	r0
    26dc:	1f 90       	pop	r1
    26de:	18 95       	reti

000026e0 <__vector_10>:
/**
 *@brief Timer/Counter 0 Compare Match Event ISR.
 */
void __vector_10 (void) __attribute((signal));
void __vector_10 (void)
{
    26e0:	1f 92       	push	r1
    26e2:	0f 92       	push	r0
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	0f 92       	push	r0
    26e8:	11 24       	eor	r1, r1
    26ea:	2f 93       	push	r18
    26ec:	3f 93       	push	r19
    26ee:	4f 93       	push	r20
    26f0:	5f 93       	push	r21
    26f2:	6f 93       	push	r22
    26f4:	7f 93       	push	r23
    26f6:	8f 93       	push	r24
    26f8:	9f 93       	push	r25
    26fa:	af 93       	push	r26
    26fc:	bf 93       	push	r27
    26fe:	ef 93       	push	r30
    2700:	ff 93       	push	r31
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_COMP] != NULL)
    270a:	80 91 94 00 	lds	r24, 0x0094
    270e:	90 91 95 00 	lds	r25, 0x0095
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	29 f0       	breq	.+10     	; 0x2720 <__vector_10+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_COMP]();
    2716:	e0 91 94 00 	lds	r30, 0x0094
    271a:	f0 91 95 00 	lds	r31, 0x0095
    271e:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	ff 91       	pop	r31
    2726:	ef 91       	pop	r30
    2728:	bf 91       	pop	r27
    272a:	af 91       	pop	r26
    272c:	9f 91       	pop	r25
    272e:	8f 91       	pop	r24
    2730:	7f 91       	pop	r23
    2732:	6f 91       	pop	r22
    2734:	5f 91       	pop	r21
    2736:	4f 91       	pop	r20
    2738:	3f 91       	pop	r19
    273a:	2f 91       	pop	r18
    273c:	0f 90       	pop	r0
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	0f 90       	pop	r0
    2742:	1f 90       	pop	r1
    2744:	18 95       	reti

00002746 <__vector_9>:
/**
 * @brief Timer/Counter 1 OverFlow Event ISR.
 */
void __vector_9 (void) __attribute((signal));
void __vector_9 (void)
{
    2746:	1f 92       	push	r1
    2748:	0f 92       	push	r0
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	0f 92       	push	r0
    274e:	11 24       	eor	r1, r1
    2750:	2f 93       	push	r18
    2752:	3f 93       	push	r19
    2754:	4f 93       	push	r20
    2756:	5f 93       	push	r21
    2758:	6f 93       	push	r22
    275a:	7f 93       	push	r23
    275c:	8f 93       	push	r24
    275e:	9f 93       	push	r25
    2760:	af 93       	push	r26
    2762:	bf 93       	push	r27
    2764:	ef 93       	push	r30
    2766:	ff 93       	push	r31
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_OVF] != NULL)
    2770:	80 91 96 00 	lds	r24, 0x0096
    2774:	90 91 97 00 	lds	r25, 0x0097
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	29 f0       	breq	.+10     	; 0x2786 <__vector_9+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_OVF]();
    277c:	e0 91 96 00 	lds	r30, 0x0096
    2780:	f0 91 97 00 	lds	r31, 0x0097
    2784:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	ff 91       	pop	r31
    278c:	ef 91       	pop	r30
    278e:	bf 91       	pop	r27
    2790:	af 91       	pop	r26
    2792:	9f 91       	pop	r25
    2794:	8f 91       	pop	r24
    2796:	7f 91       	pop	r23
    2798:	6f 91       	pop	r22
    279a:	5f 91       	pop	r21
    279c:	4f 91       	pop	r20
    279e:	3f 91       	pop	r19
    27a0:	2f 91       	pop	r18
    27a2:	0f 90       	pop	r0
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	0f 90       	pop	r0
    27a8:	1f 90       	pop	r1
    27aa:	18 95       	reti

000027ac <__vector_8>:
/**
 * @brief Timer/Counter 1 Channel B Compare Match Event ISR.
 */
void __vector_8 (void) __attribute((signal));
void __vector_8 (void)
{
    27ac:	1f 92       	push	r1
    27ae:	0f 92       	push	r0
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	0f 92       	push	r0
    27b4:	11 24       	eor	r1, r1
    27b6:	2f 93       	push	r18
    27b8:	3f 93       	push	r19
    27ba:	4f 93       	push	r20
    27bc:	5f 93       	push	r21
    27be:	6f 93       	push	r22
    27c0:	7f 93       	push	r23
    27c2:	8f 93       	push	r24
    27c4:	9f 93       	push	r25
    27c6:	af 93       	push	r26
    27c8:	bf 93       	push	r27
    27ca:	ef 93       	push	r30
    27cc:	ff 93       	push	r31
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPB] != NULL)
    27d6:	80 91 9a 00 	lds	r24, 0x009A
    27da:	90 91 9b 00 	lds	r25, 0x009B
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	29 f0       	breq	.+10     	; 0x27ec <__vector_8+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPB]();
    27e2:	e0 91 9a 00 	lds	r30, 0x009A
    27e6:	f0 91 9b 00 	lds	r31, 0x009B
    27ea:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	ff 91       	pop	r31
    27f2:	ef 91       	pop	r30
    27f4:	bf 91       	pop	r27
    27f6:	af 91       	pop	r26
    27f8:	9f 91       	pop	r25
    27fa:	8f 91       	pop	r24
    27fc:	7f 91       	pop	r23
    27fe:	6f 91       	pop	r22
    2800:	5f 91       	pop	r21
    2802:	4f 91       	pop	r20
    2804:	3f 91       	pop	r19
    2806:	2f 91       	pop	r18
    2808:	0f 90       	pop	r0
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	0f 90       	pop	r0
    280e:	1f 90       	pop	r1
    2810:	18 95       	reti

00002812 <__vector_7>:
/**
 * @brief Timer/Counter 1 Channel A Compare Match Event ISR.
 */
void __vector_7 (void) __attribute((signal));
void __vector_7 (void)
{
    2812:	1f 92       	push	r1
    2814:	0f 92       	push	r0
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	0f 92       	push	r0
    281a:	11 24       	eor	r1, r1
    281c:	2f 93       	push	r18
    281e:	3f 93       	push	r19
    2820:	4f 93       	push	r20
    2822:	5f 93       	push	r21
    2824:	6f 93       	push	r22
    2826:	7f 93       	push	r23
    2828:	8f 93       	push	r24
    282a:	9f 93       	push	r25
    282c:	af 93       	push	r26
    282e:	bf 93       	push	r27
    2830:	ef 93       	push	r30
    2832:	ff 93       	push	r31
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPA] != NULL)
    283c:	80 91 98 00 	lds	r24, 0x0098
    2840:	90 91 99 00 	lds	r25, 0x0099
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	29 f0       	breq	.+10     	; 0x2852 <__vector_7+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPA]();
    2848:	e0 91 98 00 	lds	r30, 0x0098
    284c:	f0 91 99 00 	lds	r31, 0x0099
    2850:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	ff 91       	pop	r31
    2858:	ef 91       	pop	r30
    285a:	bf 91       	pop	r27
    285c:	af 91       	pop	r26
    285e:	9f 91       	pop	r25
    2860:	8f 91       	pop	r24
    2862:	7f 91       	pop	r23
    2864:	6f 91       	pop	r22
    2866:	5f 91       	pop	r21
    2868:	4f 91       	pop	r20
    286a:	3f 91       	pop	r19
    286c:	2f 91       	pop	r18
    286e:	0f 90       	pop	r0
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	0f 90       	pop	r0
    2874:	1f 90       	pop	r1
    2876:	18 95       	reti

00002878 <__vector_6>:
/**
 * @brief Timer/Counter 1 Input Capture Event ISR.
 */
void __vector_6 (void) __attribute((signal));
void __vector_6 (void)
{
    2878:	1f 92       	push	r1
    287a:	0f 92       	push	r0
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	0f 92       	push	r0
    2880:	11 24       	eor	r1, r1
    2882:	2f 93       	push	r18
    2884:	3f 93       	push	r19
    2886:	4f 93       	push	r20
    2888:	5f 93       	push	r21
    288a:	6f 93       	push	r22
    288c:	7f 93       	push	r23
    288e:	8f 93       	push	r24
    2890:	9f 93       	push	r25
    2892:	af 93       	push	r26
    2894:	bf 93       	push	r27
    2896:	ef 93       	push	r30
    2898:	ff 93       	push	r31
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_CAPT] != NULL)
    28a2:	80 91 9c 00 	lds	r24, 0x009C
    28a6:	90 91 9d 00 	lds	r25, 0x009D
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	29 f0       	breq	.+10     	; 0x28b8 <__vector_6+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_CAPT]();
    28ae:	e0 91 9c 00 	lds	r30, 0x009C
    28b2:	f0 91 9d 00 	lds	r31, 0x009D
    28b6:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	ff 91       	pop	r31
    28be:	ef 91       	pop	r30
    28c0:	bf 91       	pop	r27
    28c2:	af 91       	pop	r26
    28c4:	9f 91       	pop	r25
    28c6:	8f 91       	pop	r24
    28c8:	7f 91       	pop	r23
    28ca:	6f 91       	pop	r22
    28cc:	5f 91       	pop	r21
    28ce:	4f 91       	pop	r20
    28d0:	3f 91       	pop	r19
    28d2:	2f 91       	pop	r18
    28d4:	0f 90       	pop	r0
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	0f 90       	pop	r0
    28da:	1f 90       	pop	r1
    28dc:	18 95       	reti

000028de <__vector_5>:
/**
 * @brief Timer/Counter 2 OverFlow Event ISR.
 */
void __vector_5 (void) __attribute((signal));
void __vector_5 (void)
{
    28de:	1f 92       	push	r1
    28e0:	0f 92       	push	r0
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	0f 92       	push	r0
    28e6:	11 24       	eor	r1, r1
    28e8:	2f 93       	push	r18
    28ea:	3f 93       	push	r19
    28ec:	4f 93       	push	r20
    28ee:	5f 93       	push	r21
    28f0:	6f 93       	push	r22
    28f2:	7f 93       	push	r23
    28f4:	8f 93       	push	r24
    28f6:	9f 93       	push	r25
    28f8:	af 93       	push	r26
    28fa:	bf 93       	push	r27
    28fc:	ef 93       	push	r30
    28fe:	ff 93       	push	r31
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_OVF] != NULL)
    2908:	80 91 9e 00 	lds	r24, 0x009E
    290c:	90 91 9f 00 	lds	r25, 0x009F
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	29 f0       	breq	.+10     	; 0x291e <__vector_5+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_OVF]();
    2914:	e0 91 9e 00 	lds	r30, 0x009E
    2918:	f0 91 9f 00 	lds	r31, 0x009F
    291c:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	ff 91       	pop	r31
    2924:	ef 91       	pop	r30
    2926:	bf 91       	pop	r27
    2928:	af 91       	pop	r26
    292a:	9f 91       	pop	r25
    292c:	8f 91       	pop	r24
    292e:	7f 91       	pop	r23
    2930:	6f 91       	pop	r22
    2932:	5f 91       	pop	r21
    2934:	4f 91       	pop	r20
    2936:	3f 91       	pop	r19
    2938:	2f 91       	pop	r18
    293a:	0f 90       	pop	r0
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	0f 90       	pop	r0
    2940:	1f 90       	pop	r1
    2942:	18 95       	reti

00002944 <__vector_4>:
/**
 * @brief Timer/Counter 2 Compare Match Event ISR.
 */
void __vector_4 (void) __attribute((signal));
void __vector_4 (void)
{
    2944:	1f 92       	push	r1
    2946:	0f 92       	push	r0
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	0f 92       	push	r0
    294c:	11 24       	eor	r1, r1
    294e:	2f 93       	push	r18
    2950:	3f 93       	push	r19
    2952:	4f 93       	push	r20
    2954:	5f 93       	push	r21
    2956:	6f 93       	push	r22
    2958:	7f 93       	push	r23
    295a:	8f 93       	push	r24
    295c:	9f 93       	push	r25
    295e:	af 93       	push	r26
    2960:	bf 93       	push	r27
    2962:	ef 93       	push	r30
    2964:	ff 93       	push	r31
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_COMP] != NULL)
    296e:	80 91 a0 00 	lds	r24, 0x00A0
    2972:	90 91 a1 00 	lds	r25, 0x00A1
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	29 f0       	breq	.+10     	; 0x2984 <__vector_4+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_COMP]();
    297a:	e0 91 a0 00 	lds	r30, 0x00A0
    297e:	f0 91 a1 00 	lds	r31, 0x00A1
    2982:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2984:	cf 91       	pop	r28
    2986:	df 91       	pop	r29
    2988:	ff 91       	pop	r31
    298a:	ef 91       	pop	r30
    298c:	bf 91       	pop	r27
    298e:	af 91       	pop	r26
    2990:	9f 91       	pop	r25
    2992:	8f 91       	pop	r24
    2994:	7f 91       	pop	r23
    2996:	6f 91       	pop	r22
    2998:	5f 91       	pop	r21
    299a:	4f 91       	pop	r20
    299c:	3f 91       	pop	r19
    299e:	2f 91       	pop	r18
    29a0:	0f 90       	pop	r0
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	0f 90       	pop	r0
    29a6:	1f 90       	pop	r1
    29a8:	18 95       	reti

000029aa <SPI_voidInit>:

/**
 * @brief Function to initialize the SPI peripheral with prebuild configurations.
 */
void SPI_voidInit(void)
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
	/*Set the data order bit*/
#if SPI_u8DATA_TRANSCEIVE_ORDER == MSB_FIRST
	CLR_BIT(SPCR,SPCR_DORD);
    29b2:	ad e2       	ldi	r26, 0x2D	; 45
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	ed e2       	ldi	r30, 0x2D	; 45
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	8f 7d       	andi	r24, 0xDF	; 223
    29be:	8c 93       	st	X, r24
#error Wrong SPI_u8DATA_TRANSCEIVE_ORDER Configuration Choise.
#endif

	/*Set the SPI node mode*/
#if SPI_u8MODE == MASTER
	SET_BIT(SPCR,SPCR_MSTR);
    29c0:	ad e2       	ldi	r26, 0x2D	; 45
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	ed e2       	ldi	r30, 0x2D	; 45
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	80 61       	ori	r24, 0x10	; 16
    29cc:	8c 93       	st	X, r24
#error Wrong SPI_u8MODE Configuration Choise.
#endif

	/*Set the SPI clock polarity*/
#if SPI_u8IDLE_STATE == LOW_VOLTAGE
	CLR_BIT(SPCR,SPCR_CPOL);
    29ce:	ad e2       	ldi	r26, 0x2D	; 45
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	ed e2       	ldi	r30, 0x2D	; 45
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	87 7f       	andi	r24, 0xF7	; 247
    29da:	8c 93       	st	X, r24
#error Wrong SPI_u8IDLE_STATE Configuration Choise.
#endif

	/*Set the SPI clock phase*/
#if SPI_u8MODE == MASTER
	SPCR &= CLOCK_PRESCALER_MASK;
    29dc:	ad e2       	ldi	r26, 0x2D	; 45
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	ed e2       	ldi	r30, 0x2D	; 45
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	8c 7f       	andi	r24, 0xFC	; 252
    29e8:	8c 93       	st	X, r24
	SPCR |= SPI_u8CLOCK_PRESCALER;
    29ea:	ad e2       	ldi	r26, 0x2D	; 45
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	ed e2       	ldi	r30, 0x2D	; 45
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	8c 93       	st	X, r24
	/*Set the SPI double clock rate speed bit*/
#if SPI_u8DOUBLE_SPEED == ENABLED
	SET_BIT(SPSR,SPSR_SPI2X);

#elif SPI_u8DOUBLE_SPEED == DISABLED
	CLR_BIT(SPSR,SPSR_SPI2X);
    29f6:	ae e2       	ldi	r26, 0x2E	; 46
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	ee e2       	ldi	r30, 0x2E	; 46
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	8e 7f       	andi	r24, 0xFE	; 254
    2a02:	8c 93       	st	X, r24
#endif

#endif

	/*Enable SPI Peripheral*/
	SET_BIT(SPCR,SPCR_SPE);
    2a04:	ad e2       	ldi	r26, 0x2D	; 45
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	ed e2       	ldi	r30, 0x2D	; 45
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	80 64       	ori	r24, 0x40	; 64
    2a10:	8c 93       	st	X, r24
}
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <SPI_u8Transceive>:
 * @brief 				Function to transfer and receive data with SPI peripheral.
 * @param Copy_u8Data	The Transmitting data.
 * @return				The Received Data.
 */
uint8 SPI_u8Transceive(uint8 Copy_u8Data)
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	0f 92       	push	r0
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	89 83       	std	Y+1, r24	; 0x01
	/*Set the transmitting data*/
	SPDR = Copy_u8Data;
    2a24:	ef e2       	ldi	r30, 0x2F	; 47
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	80 83       	st	Z, r24

	/*Polling until the data is transceived*/
	while((GET_BIT(SPSR,SPSR_SPIF)) == 0);
    2a2c:	ee e2       	ldi	r30, 0x2E	; 46
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	88 23       	and	r24, r24
    2a34:	dc f7       	brge	.-10     	; 0x2a2c <SPI_u8Transceive+0x14>

	/*Return the received data*/
	return SPDR;
    2a36:	ef e2       	ldi	r30, 0x2F	; 47
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
}
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <PORT_voidInit>:

/**
 * @brief Function to initialize all DIO pins (direction and value).
 */
void PORT_voidInit(void)
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
	/*Assign directions into DDR registers*/
	DDRA = PORTA_DIR;
    2a4c:	ea e3       	ldi	r30, 0x3A	; 58
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	8f ef       	ldi	r24, 0xFF	; 255
    2a52:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2a54:	e7 e3       	ldi	r30, 0x37	; 55
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	87 eb       	ldi	r24, 0xB7	; 183
    2a5a:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2a5c:	e4 e3       	ldi	r30, 0x34	; 52
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	8f ef       	ldi	r24, 0xFF	; 255
    2a62:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2a64:	e1 e3       	ldi	r30, 0x31	; 49
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	82 eb       	ldi	r24, 0xB2	; 178
    2a6a:	80 83       	st	Z, r24

	/*Assign values into PORT registers*/
	PORTA = PORTA_INITIAL_VALUE;
    2a6c:	eb e3       	ldi	r30, 0x3B	; 59
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    2a72:	e8 e3       	ldi	r30, 0x38	; 56
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	8f eb       	ldi	r24, 0xBF	; 191
    2a78:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VALUE;
    2a7a:	e5 e3       	ldi	r30, 0x35	; 53
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    2a80:	e2 e3       	ldi	r30, 0x32	; 50
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	8f ef       	ldi	r24, 0xFF	; 255
    2a86:	80 83       	st	Z, r24
}
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <GIE_voidEnable>:

/**
 * @brief Function to enable global interrupt.
 */
void GIE_voidEnable(void)
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
	/*Enable global interrupt with c code*/
	//SET_BIT(SREG,SREG_I);

	/*Enable global interrupt with inline assembly code*/
	__asm __volatile("SEI");
    2a96:	78 94       	sei
}
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <GIE_voidDisable>:

/**
 * @brief Function to disable global interrupt.
 */
void GIE_voidDisable(void)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
	/*Disable global interrupt with c code*/
	//CLR_BIT(SREG,SREG_I);

	/*Disable global interrupt with inline assembly code*/
	__asm __volatile("CLI");
    2aa6:	f8 94       	cli
}
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <DIO_u8SetPinDirection>:
 * @param Copy_u8Pin 		Pin number.
 * @param Copy_u8Direction 	The new direction wanted to set.
 * @return 					Error state.
 */
uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	28 97       	sbiw	r28, 0x08	; 8
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	8a 83       	std	Y+2, r24	; 0x02
    2ac4:	6b 83       	std	Y+3, r22	; 0x03
    2ac6:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
    2ac8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    2aca:	8b 81       	ldd	r24, Y+3	; 0x03
    2acc:	88 30       	cpi	r24, 0x08	; 8
    2ace:	08 f0       	brcs	.+2      	; 0x2ad2 <DIO_u8SetPinDirection+0x24>
    2ad0:	f4 c0       	rjmp	.+488    	; 0x2cba <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    2ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad4:	81 30       	cpi	r24, 0x01	; 1
    2ad6:	09 f0       	breq	.+2      	; 0x2ada <DIO_u8SetPinDirection+0x2c>
    2ad8:	72 c0       	rjmp	.+228    	; 0x2bbe <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	28 2f       	mov	r18, r24
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	38 87       	std	Y+8, r19	; 0x08
    2ae2:	2f 83       	std	Y+7, r18	; 0x07
    2ae4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ae6:	98 85       	ldd	r25, Y+8	; 0x08
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	91 05       	cpc	r25, r1
    2aec:	49 f1       	breq	.+82     	; 0x2b40 <DIO_u8SetPinDirection+0x92>
    2aee:	2f 81       	ldd	r18, Y+7	; 0x07
    2af0:	38 85       	ldd	r19, Y+8	; 0x08
    2af2:	22 30       	cpi	r18, 0x02	; 2
    2af4:	31 05       	cpc	r19, r1
    2af6:	2c f4       	brge	.+10     	; 0x2b02 <DIO_u8SetPinDirection+0x54>
    2af8:	8f 81       	ldd	r24, Y+7	; 0x07
    2afa:	98 85       	ldd	r25, Y+8	; 0x08
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	61 f0       	breq	.+24     	; 0x2b18 <DIO_u8SetPinDirection+0x6a>
    2b00:	5b c0       	rjmp	.+182    	; 0x2bb8 <DIO_u8SetPinDirection+0x10a>
    2b02:	2f 81       	ldd	r18, Y+7	; 0x07
    2b04:	38 85       	ldd	r19, Y+8	; 0x08
    2b06:	22 30       	cpi	r18, 0x02	; 2
    2b08:	31 05       	cpc	r19, r1
    2b0a:	71 f1       	breq	.+92     	; 0x2b68 <DIO_u8SetPinDirection+0xba>
    2b0c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b0e:	98 85       	ldd	r25, Y+8	; 0x08
    2b10:	83 30       	cpi	r24, 0x03	; 3
    2b12:	91 05       	cpc	r25, r1
    2b14:	e9 f1       	breq	.+122    	; 0x2b90 <DIO_u8SetPinDirection+0xe2>
    2b16:	50 c0       	rjmp	.+160    	; 0x2bb8 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
    2b18:	aa e3       	ldi	r26, 0x3A	; 58
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	ea e3       	ldi	r30, 0x3A	; 58
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	48 2f       	mov	r20, r24
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	02 2e       	mov	r0, r18
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <DIO_u8SetPinDirection+0x88>
    2b32:	88 0f       	add	r24, r24
    2b34:	99 1f       	adc	r25, r25
    2b36:	0a 94       	dec	r0
    2b38:	e2 f7       	brpl	.-8      	; 0x2b32 <DIO_u8SetPinDirection+0x84>
    2b3a:	84 2b       	or	r24, r20
    2b3c:	8c 93       	st	X, r24
    2b3e:	bf c0       	rjmp	.+382    	; 0x2cbe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
    2b40:	a7 e3       	ldi	r26, 0x37	; 55
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e7 e3       	ldi	r30, 0x37	; 55
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	48 2f       	mov	r20, r24
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	02 2e       	mov	r0, r18
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <DIO_u8SetPinDirection+0xb0>
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	0a 94       	dec	r0
    2b60:	e2 f7       	brpl	.-8      	; 0x2b5a <DIO_u8SetPinDirection+0xac>
    2b62:	84 2b       	or	r24, r20
    2b64:	8c 93       	st	X, r24
    2b66:	ab c0       	rjmp	.+342    	; 0x2cbe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
    2b68:	a4 e3       	ldi	r26, 0x34	; 52
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e4 e3       	ldi	r30, 0x34	; 52
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	48 2f       	mov	r20, r24
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	02 2e       	mov	r0, r18
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <DIO_u8SetPinDirection+0xd8>
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	0a 94       	dec	r0
    2b88:	e2 f7       	brpl	.-8      	; 0x2b82 <DIO_u8SetPinDirection+0xd4>
    2b8a:	84 2b       	or	r24, r20
    2b8c:	8c 93       	st	X, r24
    2b8e:	97 c0       	rjmp	.+302    	; 0x2cbe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
    2b90:	a1 e3       	ldi	r26, 0x31	; 49
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	e1 e3       	ldi	r30, 0x31	; 49
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	48 2f       	mov	r20, r24
    2b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	02 2e       	mov	r0, r18
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <DIO_u8SetPinDirection+0x100>
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	0a 94       	dec	r0
    2bb0:	e2 f7       	brpl	.-8      	; 0x2baa <DIO_u8SetPinDirection+0xfc>
    2bb2:	84 2b       	or	r24, r20
    2bb4:	8c 93       	st	X, r24
    2bb6:	83 c0       	rjmp	.+262    	; 0x2cbe <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	89 83       	std	Y+1, r24	; 0x01
    2bbc:	80 c0       	rjmp	.+256    	; 0x2cbe <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
    2bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc0:	88 23       	and	r24, r24
    2bc2:	09 f0       	breq	.+2      	; 0x2bc6 <DIO_u8SetPinDirection+0x118>
    2bc4:	77 c0       	rjmp	.+238    	; 0x2cb4 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	28 2f       	mov	r18, r24
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	3e 83       	std	Y+6, r19	; 0x06
    2bce:	2d 83       	std	Y+5, r18	; 0x05
    2bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd4:	81 30       	cpi	r24, 0x01	; 1
    2bd6:	91 05       	cpc	r25, r1
    2bd8:	59 f1       	breq	.+86     	; 0x2c30 <DIO_u8SetPinDirection+0x182>
    2bda:	2d 81       	ldd	r18, Y+5	; 0x05
    2bdc:	3e 81       	ldd	r19, Y+6	; 0x06
    2bde:	22 30       	cpi	r18, 0x02	; 2
    2be0:	31 05       	cpc	r19, r1
    2be2:	2c f4       	brge	.+10     	; 0x2bee <DIO_u8SetPinDirection+0x140>
    2be4:	8d 81       	ldd	r24, Y+5	; 0x05
    2be6:	9e 81       	ldd	r25, Y+6	; 0x06
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	69 f0       	breq	.+26     	; 0x2c06 <DIO_u8SetPinDirection+0x158>
    2bec:	60 c0       	rjmp	.+192    	; 0x2cae <DIO_u8SetPinDirection+0x200>
    2bee:	2d 81       	ldd	r18, Y+5	; 0x05
    2bf0:	3e 81       	ldd	r19, Y+6	; 0x06
    2bf2:	22 30       	cpi	r18, 0x02	; 2
    2bf4:	31 05       	cpc	r19, r1
    2bf6:	89 f1       	breq	.+98     	; 0x2c5a <DIO_u8SetPinDirection+0x1ac>
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfc:	83 30       	cpi	r24, 0x03	; 3
    2bfe:	91 05       	cpc	r25, r1
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <DIO_u8SetPinDirection+0x156>
    2c02:	40 c0       	rjmp	.+128    	; 0x2c84 <DIO_u8SetPinDirection+0x1d6>
    2c04:	54 c0       	rjmp	.+168    	; 0x2cae <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
    2c06:	aa e3       	ldi	r26, 0x3A	; 58
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	ea e3       	ldi	r30, 0x3A	; 58
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	48 2f       	mov	r20, r24
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	02 2e       	mov	r0, r18
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <DIO_u8SetPinDirection+0x176>
    2c20:	88 0f       	add	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	0a 94       	dec	r0
    2c26:	e2 f7       	brpl	.-8      	; 0x2c20 <DIO_u8SetPinDirection+0x172>
    2c28:	80 95       	com	r24
    2c2a:	84 23       	and	r24, r20
    2c2c:	8c 93       	st	X, r24
    2c2e:	47 c0       	rjmp	.+142    	; 0x2cbe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
    2c30:	a7 e3       	ldi	r26, 0x37	; 55
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	e7 e3       	ldi	r30, 0x37	; 55
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	48 2f       	mov	r20, r24
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	28 2f       	mov	r18, r24
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	02 2e       	mov	r0, r18
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <DIO_u8SetPinDirection+0x1a0>
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	0a 94       	dec	r0
    2c50:	e2 f7       	brpl	.-8      	; 0x2c4a <DIO_u8SetPinDirection+0x19c>
    2c52:	80 95       	com	r24
    2c54:	84 23       	and	r24, r20
    2c56:	8c 93       	st	X, r24
    2c58:	32 c0       	rjmp	.+100    	; 0x2cbe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
    2c5a:	a4 e3       	ldi	r26, 0x34	; 52
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	e4 e3       	ldi	r30, 0x34	; 52
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	48 2f       	mov	r20, r24
    2c66:	8b 81       	ldd	r24, Y+3	; 0x03
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	02 2e       	mov	r0, r18
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <DIO_u8SetPinDirection+0x1ca>
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	0a 94       	dec	r0
    2c7a:	e2 f7       	brpl	.-8      	; 0x2c74 <DIO_u8SetPinDirection+0x1c6>
    2c7c:	80 95       	com	r24
    2c7e:	84 23       	and	r24, r20
    2c80:	8c 93       	st	X, r24
    2c82:	1d c0       	rjmp	.+58     	; 0x2cbe <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
    2c84:	a1 e3       	ldi	r26, 0x31	; 49
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	e1 e3       	ldi	r30, 0x31	; 49
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	48 2f       	mov	r20, r24
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	02 2e       	mov	r0, r18
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <DIO_u8SetPinDirection+0x1f4>
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	0a 94       	dec	r0
    2ca4:	e2 f7       	brpl	.-8      	; 0x2c9e <DIO_u8SetPinDirection+0x1f0>
    2ca6:	80 95       	com	r24
    2ca8:	84 23       	and	r24, r20
    2caa:	8c 93       	st	X, r24
    2cac:	08 c0       	rjmp	.+16     	; 0x2cbe <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	05 c0       	rjmp	.+10     	; 0x2cbe <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	89 83       	std	Y+1, r24	; 0x01
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cc0:	28 96       	adiw	r28, 0x08	; 8
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	de bf       	out	0x3e, r29	; 62
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	cd bf       	out	0x3d, r28	; 61
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	08 95       	ret

00002cd2 <DIO_u8SetPinValue>:
 * @param Copy_u8Pin 	Pin number.
 * @param Copy_u8Value 	The new value wanted to set.
 * @return 				Error state.
 */
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    2cd2:	df 93       	push	r29
    2cd4:	cf 93       	push	r28
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	28 97       	sbiw	r28, 0x08	; 8
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	de bf       	out	0x3e, r29	; 62
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	cd bf       	out	0x3d, r28	; 61
    2ce6:	8a 83       	std	Y+2, r24	; 0x02
    2ce8:	6b 83       	std	Y+3, r22	; 0x03
    2cea:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    2cec:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	88 30       	cpi	r24, 0x08	; 8
    2cf2:	08 f0       	brcs	.+2      	; 0x2cf6 <DIO_u8SetPinValue+0x24>
    2cf4:	f4 c0       	rjmp	.+488    	; 0x2ede <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    2cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf8:	81 30       	cpi	r24, 0x01	; 1
    2cfa:	09 f0       	breq	.+2      	; 0x2cfe <DIO_u8SetPinValue+0x2c>
    2cfc:	72 c0       	rjmp	.+228    	; 0x2de2 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	28 2f       	mov	r18, r24
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	38 87       	std	Y+8, r19	; 0x08
    2d06:	2f 83       	std	Y+7, r18	; 0x07
    2d08:	8f 81       	ldd	r24, Y+7	; 0x07
    2d0a:	98 85       	ldd	r25, Y+8	; 0x08
    2d0c:	81 30       	cpi	r24, 0x01	; 1
    2d0e:	91 05       	cpc	r25, r1
    2d10:	49 f1       	breq	.+82     	; 0x2d64 <DIO_u8SetPinValue+0x92>
    2d12:	2f 81       	ldd	r18, Y+7	; 0x07
    2d14:	38 85       	ldd	r19, Y+8	; 0x08
    2d16:	22 30       	cpi	r18, 0x02	; 2
    2d18:	31 05       	cpc	r19, r1
    2d1a:	2c f4       	brge	.+10     	; 0x2d26 <DIO_u8SetPinValue+0x54>
    2d1c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d1e:	98 85       	ldd	r25, Y+8	; 0x08
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	61 f0       	breq	.+24     	; 0x2d3c <DIO_u8SetPinValue+0x6a>
    2d24:	5b c0       	rjmp	.+182    	; 0x2ddc <DIO_u8SetPinValue+0x10a>
    2d26:	2f 81       	ldd	r18, Y+7	; 0x07
    2d28:	38 85       	ldd	r19, Y+8	; 0x08
    2d2a:	22 30       	cpi	r18, 0x02	; 2
    2d2c:	31 05       	cpc	r19, r1
    2d2e:	71 f1       	breq	.+92     	; 0x2d8c <DIO_u8SetPinValue+0xba>
    2d30:	8f 81       	ldd	r24, Y+7	; 0x07
    2d32:	98 85       	ldd	r25, Y+8	; 0x08
    2d34:	83 30       	cpi	r24, 0x03	; 3
    2d36:	91 05       	cpc	r25, r1
    2d38:	e9 f1       	breq	.+122    	; 0x2db4 <DIO_u8SetPinValue+0xe2>
    2d3a:	50 c0       	rjmp	.+160    	; 0x2ddc <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
    2d3c:	ab e3       	ldi	r26, 0x3B	; 59
    2d3e:	b0 e0       	ldi	r27, 0x00	; 0
    2d40:	eb e3       	ldi	r30, 0x3B	; 59
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	48 2f       	mov	r20, r24
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	28 2f       	mov	r18, r24
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	02 2e       	mov	r0, r18
    2d54:	02 c0       	rjmp	.+4      	; 0x2d5a <DIO_u8SetPinValue+0x88>
    2d56:	88 0f       	add	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	0a 94       	dec	r0
    2d5c:	e2 f7       	brpl	.-8      	; 0x2d56 <DIO_u8SetPinValue+0x84>
    2d5e:	84 2b       	or	r24, r20
    2d60:	8c 93       	st	X, r24
    2d62:	bf c0       	rjmp	.+382    	; 0x2ee2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
    2d64:	a8 e3       	ldi	r26, 0x38	; 56
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	e8 e3       	ldi	r30, 0x38	; 56
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	48 2f       	mov	r20, r24
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	02 2e       	mov	r0, r18
    2d7c:	02 c0       	rjmp	.+4      	; 0x2d82 <DIO_u8SetPinValue+0xb0>
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	0a 94       	dec	r0
    2d84:	e2 f7       	brpl	.-8      	; 0x2d7e <DIO_u8SetPinValue+0xac>
    2d86:	84 2b       	or	r24, r20
    2d88:	8c 93       	st	X, r24
    2d8a:	ab c0       	rjmp	.+342    	; 0x2ee2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
    2d8c:	a5 e3       	ldi	r26, 0x35	; 53
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e5 e3       	ldi	r30, 0x35	; 53
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	48 2f       	mov	r20, r24
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	28 2f       	mov	r18, r24
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	02 2e       	mov	r0, r18
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <DIO_u8SetPinValue+0xd8>
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	0a 94       	dec	r0
    2dac:	e2 f7       	brpl	.-8      	; 0x2da6 <DIO_u8SetPinValue+0xd4>
    2dae:	84 2b       	or	r24, r20
    2db0:	8c 93       	st	X, r24
    2db2:	97 c0       	rjmp	.+302    	; 0x2ee2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
    2db4:	a2 e3       	ldi	r26, 0x32	; 50
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	e2 e3       	ldi	r30, 0x32	; 50
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	48 2f       	mov	r20, r24
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	02 2e       	mov	r0, r18
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <DIO_u8SetPinValue+0x100>
    2dce:	88 0f       	add	r24, r24
    2dd0:	99 1f       	adc	r25, r25
    2dd2:	0a 94       	dec	r0
    2dd4:	e2 f7       	brpl	.-8      	; 0x2dce <DIO_u8SetPinValue+0xfc>
    2dd6:	84 2b       	or	r24, r20
    2dd8:	8c 93       	st	X, r24
    2dda:	83 c0       	rjmp	.+262    	; 0x2ee2 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	89 83       	std	Y+1, r24	; 0x01
    2de0:	80 c0       	rjmp	.+256    	; 0x2ee2 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    2de2:	8c 81       	ldd	r24, Y+4	; 0x04
    2de4:	88 23       	and	r24, r24
    2de6:	09 f0       	breq	.+2      	; 0x2dea <DIO_u8SetPinValue+0x118>
    2de8:	77 c0       	rjmp	.+238    	; 0x2ed8 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	3e 83       	std	Y+6, r19	; 0x06
    2df2:	2d 83       	std	Y+5, r18	; 0x05
    2df4:	8d 81       	ldd	r24, Y+5	; 0x05
    2df6:	9e 81       	ldd	r25, Y+6	; 0x06
    2df8:	81 30       	cpi	r24, 0x01	; 1
    2dfa:	91 05       	cpc	r25, r1
    2dfc:	59 f1       	breq	.+86     	; 0x2e54 <DIO_u8SetPinValue+0x182>
    2dfe:	2d 81       	ldd	r18, Y+5	; 0x05
    2e00:	3e 81       	ldd	r19, Y+6	; 0x06
    2e02:	22 30       	cpi	r18, 0x02	; 2
    2e04:	31 05       	cpc	r19, r1
    2e06:	2c f4       	brge	.+10     	; 0x2e12 <DIO_u8SetPinValue+0x140>
    2e08:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	69 f0       	breq	.+26     	; 0x2e2a <DIO_u8SetPinValue+0x158>
    2e10:	60 c0       	rjmp	.+192    	; 0x2ed2 <DIO_u8SetPinValue+0x200>
    2e12:	2d 81       	ldd	r18, Y+5	; 0x05
    2e14:	3e 81       	ldd	r19, Y+6	; 0x06
    2e16:	22 30       	cpi	r18, 0x02	; 2
    2e18:	31 05       	cpc	r19, r1
    2e1a:	89 f1       	breq	.+98     	; 0x2e7e <DIO_u8SetPinValue+0x1ac>
    2e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e20:	83 30       	cpi	r24, 0x03	; 3
    2e22:	91 05       	cpc	r25, r1
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <DIO_u8SetPinValue+0x156>
    2e26:	40 c0       	rjmp	.+128    	; 0x2ea8 <DIO_u8SetPinValue+0x1d6>
    2e28:	54 c0       	rjmp	.+168    	; 0x2ed2 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
    2e2a:	ab e3       	ldi	r26, 0x3B	; 59
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	eb e3       	ldi	r30, 0x3B	; 59
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	48 2f       	mov	r20, r24
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	02 2e       	mov	r0, r18
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <DIO_u8SetPinValue+0x176>
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	0a 94       	dec	r0
    2e4a:	e2 f7       	brpl	.-8      	; 0x2e44 <DIO_u8SetPinValue+0x172>
    2e4c:	80 95       	com	r24
    2e4e:	84 23       	and	r24, r20
    2e50:	8c 93       	st	X, r24
    2e52:	47 c0       	rjmp	.+142    	; 0x2ee2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
    2e54:	a8 e3       	ldi	r26, 0x38	; 56
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e8 e3       	ldi	r30, 0x38	; 56
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	48 2f       	mov	r20, r24
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	28 2f       	mov	r18, r24
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	02 2e       	mov	r0, r18
    2e6c:	02 c0       	rjmp	.+4      	; 0x2e72 <DIO_u8SetPinValue+0x1a0>
    2e6e:	88 0f       	add	r24, r24
    2e70:	99 1f       	adc	r25, r25
    2e72:	0a 94       	dec	r0
    2e74:	e2 f7       	brpl	.-8      	; 0x2e6e <DIO_u8SetPinValue+0x19c>
    2e76:	80 95       	com	r24
    2e78:	84 23       	and	r24, r20
    2e7a:	8c 93       	st	X, r24
    2e7c:	32 c0       	rjmp	.+100    	; 0x2ee2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
    2e7e:	a5 e3       	ldi	r26, 0x35	; 53
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	e5 e3       	ldi	r30, 0x35	; 53
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	48 2f       	mov	r20, r24
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	02 2e       	mov	r0, r18
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <DIO_u8SetPinValue+0x1ca>
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	0a 94       	dec	r0
    2e9e:	e2 f7       	brpl	.-8      	; 0x2e98 <DIO_u8SetPinValue+0x1c6>
    2ea0:	80 95       	com	r24
    2ea2:	84 23       	and	r24, r20
    2ea4:	8c 93       	st	X, r24
    2ea6:	1d c0       	rjmp	.+58     	; 0x2ee2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
    2ea8:	a2 e3       	ldi	r26, 0x32	; 50
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	e2 e3       	ldi	r30, 0x32	; 50
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	48 2f       	mov	r20, r24
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	02 2e       	mov	r0, r18
    2ec0:	02 c0       	rjmp	.+4      	; 0x2ec6 <DIO_u8SetPinValue+0x1f4>
    2ec2:	88 0f       	add	r24, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	0a 94       	dec	r0
    2ec8:	e2 f7       	brpl	.-8      	; 0x2ec2 <DIO_u8SetPinValue+0x1f0>
    2eca:	80 95       	com	r24
    2ecc:	84 23       	and	r24, r20
    2ece:	8c 93       	st	X, r24
    2ed0:	08 c0       	rjmp	.+16     	; 0x2ee2 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	05 c0       	rjmp	.+10     	; 0x2ee2 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee4:	28 96       	adiw	r28, 0x08	; 8
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <DIO_u8TogglePinValue>:
 * @param Copy_u8Port 	Port number on which the pin is found.
 * @param Copy_u8Pin 	Pin number.
 * @return 				Error state.
 */
uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <DIO_u8TogglePinValue+0x6>
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <DIO_u8TogglePinValue+0x8>
    2efe:	0f 92       	push	r0
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	8a 83       	std	Y+2, r24	; 0x02
    2f06:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    2f08:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	88 30       	cpi	r24, 0x08	; 8
    2f0e:	08 f0       	brcs	.+2      	; 0x2f12 <DIO_u8TogglePinValue+0x1c>
    2f10:	72 c0       	rjmp	.+228    	; 0x2ff6 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	3d 83       	std	Y+5, r19	; 0x05
    2f1a:	2c 83       	std	Y+4, r18	; 0x04
    2f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f20:	81 30       	cpi	r24, 0x01	; 1
    2f22:	91 05       	cpc	r25, r1
    2f24:	49 f1       	breq	.+82     	; 0x2f78 <DIO_u8TogglePinValue+0x82>
    2f26:	2c 81       	ldd	r18, Y+4	; 0x04
    2f28:	3d 81       	ldd	r19, Y+5	; 0x05
    2f2a:	22 30       	cpi	r18, 0x02	; 2
    2f2c:	31 05       	cpc	r19, r1
    2f2e:	2c f4       	brge	.+10     	; 0x2f3a <DIO_u8TogglePinValue+0x44>
    2f30:	8c 81       	ldd	r24, Y+4	; 0x04
    2f32:	9d 81       	ldd	r25, Y+5	; 0x05
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	61 f0       	breq	.+24     	; 0x2f50 <DIO_u8TogglePinValue+0x5a>
    2f38:	5b c0       	rjmp	.+182    	; 0x2ff0 <DIO_u8TogglePinValue+0xfa>
    2f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f3e:	22 30       	cpi	r18, 0x02	; 2
    2f40:	31 05       	cpc	r19, r1
    2f42:	71 f1       	breq	.+92     	; 0x2fa0 <DIO_u8TogglePinValue+0xaa>
    2f44:	8c 81       	ldd	r24, Y+4	; 0x04
    2f46:	9d 81       	ldd	r25, Y+5	; 0x05
    2f48:	83 30       	cpi	r24, 0x03	; 3
    2f4a:	91 05       	cpc	r25, r1
    2f4c:	e9 f1       	breq	.+122    	; 0x2fc8 <DIO_u8TogglePinValue+0xd2>
    2f4e:	50 c0       	rjmp	.+160    	; 0x2ff0 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
    2f50:	ab e3       	ldi	r26, 0x3B	; 59
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	eb e3       	ldi	r30, 0x3B	; 59
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	48 2f       	mov	r20, r24
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	28 2f       	mov	r18, r24
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	02 2e       	mov	r0, r18
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <DIO_u8TogglePinValue+0x78>
    2f6a:	88 0f       	add	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	0a 94       	dec	r0
    2f70:	e2 f7       	brpl	.-8      	; 0x2f6a <DIO_u8TogglePinValue+0x74>
    2f72:	84 27       	eor	r24, r20
    2f74:	8c 93       	st	X, r24
    2f76:	41 c0       	rjmp	.+130    	; 0x2ffa <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
    2f78:	a8 e3       	ldi	r26, 0x38	; 56
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e8 e3       	ldi	r30, 0x38	; 56
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	48 2f       	mov	r20, r24
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	28 2f       	mov	r18, r24
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	02 2e       	mov	r0, r18
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <DIO_u8TogglePinValue+0xa0>
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	0a 94       	dec	r0
    2f98:	e2 f7       	brpl	.-8      	; 0x2f92 <DIO_u8TogglePinValue+0x9c>
    2f9a:	84 27       	eor	r24, r20
    2f9c:	8c 93       	st	X, r24
    2f9e:	2d c0       	rjmp	.+90     	; 0x2ffa <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
    2fa0:	a5 e3       	ldi	r26, 0x35	; 53
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e5 e3       	ldi	r30, 0x35	; 53
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	48 2f       	mov	r20, r24
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	02 2e       	mov	r0, r18
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <DIO_u8TogglePinValue+0xc8>
    2fba:	88 0f       	add	r24, r24
    2fbc:	99 1f       	adc	r25, r25
    2fbe:	0a 94       	dec	r0
    2fc0:	e2 f7       	brpl	.-8      	; 0x2fba <DIO_u8TogglePinValue+0xc4>
    2fc2:	84 27       	eor	r24, r20
    2fc4:	8c 93       	st	X, r24
    2fc6:	19 c0       	rjmp	.+50     	; 0x2ffa <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
    2fc8:	a2 e3       	ldi	r26, 0x32	; 50
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	e2 e3       	ldi	r30, 0x32	; 50
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	48 2f       	mov	r20, r24
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	28 2f       	mov	r18, r24
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	02 2e       	mov	r0, r18
    2fe0:	02 c0       	rjmp	.+4      	; 0x2fe6 <DIO_u8TogglePinValue+0xf0>
    2fe2:	88 0f       	add	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	0a 94       	dec	r0
    2fe8:	e2 f7       	brpl	.-8      	; 0x2fe2 <DIO_u8TogglePinValue+0xec>
    2fea:	84 27       	eor	r24, r20
    2fec:	8c 93       	st	X, r24
    2fee:	05 c0       	rjmp	.+10     	; 0x2ffa <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	89 83       	std	Y+1, r24	; 0x01
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <DIO_u8GetPinValue>:
 * @param Copy_u8Pin 	Pin number.
 * @param Copy_pu8Value Pointer to return the value of the pin.
 * @return 				Error state.
 */
uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	27 97       	sbiw	r28, 0x07	; 7
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	8a 83       	std	Y+2, r24	; 0x02
    3022:	6b 83       	std	Y+3, r22	; 0x03
    3024:	5d 83       	std	Y+5, r21	; 0x05
    3026:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    3028:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	88 30       	cpi	r24, 0x08	; 8
    302e:	08 f0       	brcs	.+2      	; 0x3032 <DIO_u8GetPinValue+0x26>
    3030:	74 c0       	rjmp	.+232    	; 0x311a <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	3f 83       	std	Y+7, r19	; 0x07
    303a:	2e 83       	std	Y+6, r18	; 0x06
    303c:	4e 81       	ldd	r20, Y+6	; 0x06
    303e:	5f 81       	ldd	r21, Y+7	; 0x07
    3040:	41 30       	cpi	r20, 0x01	; 1
    3042:	51 05       	cpc	r21, r1
    3044:	59 f1       	breq	.+86     	; 0x309c <DIO_u8GetPinValue+0x90>
    3046:	8e 81       	ldd	r24, Y+6	; 0x06
    3048:	9f 81       	ldd	r25, Y+7	; 0x07
    304a:	82 30       	cpi	r24, 0x02	; 2
    304c:	91 05       	cpc	r25, r1
    304e:	34 f4       	brge	.+12     	; 0x305c <DIO_u8GetPinValue+0x50>
    3050:	2e 81       	ldd	r18, Y+6	; 0x06
    3052:	3f 81       	ldd	r19, Y+7	; 0x07
    3054:	21 15       	cp	r18, r1
    3056:	31 05       	cpc	r19, r1
    3058:	69 f0       	breq	.+26     	; 0x3074 <DIO_u8GetPinValue+0x68>
    305a:	5c c0       	rjmp	.+184    	; 0x3114 <DIO_u8GetPinValue+0x108>
    305c:	4e 81       	ldd	r20, Y+6	; 0x06
    305e:	5f 81       	ldd	r21, Y+7	; 0x07
    3060:	42 30       	cpi	r20, 0x02	; 2
    3062:	51 05       	cpc	r21, r1
    3064:	79 f1       	breq	.+94     	; 0x30c4 <DIO_u8GetPinValue+0xb8>
    3066:	8e 81       	ldd	r24, Y+6	; 0x06
    3068:	9f 81       	ldd	r25, Y+7	; 0x07
    306a:	83 30       	cpi	r24, 0x03	; 3
    306c:	91 05       	cpc	r25, r1
    306e:	09 f4       	brne	.+2      	; 0x3072 <DIO_u8GetPinValue+0x66>
    3070:	3d c0       	rjmp	.+122    	; 0x30ec <DIO_u8GetPinValue+0xe0>
    3072:	50 c0       	rjmp	.+160    	; 0x3114 <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
    3074:	e9 e3       	ldi	r30, 0x39	; 57
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	88 2f       	mov	r24, r24
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	a9 01       	movw	r20, r18
    3086:	02 c0       	rjmp	.+4      	; 0x308c <DIO_u8GetPinValue+0x80>
    3088:	55 95       	asr	r21
    308a:	47 95       	ror	r20
    308c:	8a 95       	dec	r24
    308e:	e2 f7       	brpl	.-8      	; 0x3088 <DIO_u8GetPinValue+0x7c>
    3090:	ca 01       	movw	r24, r20
    3092:	81 70       	andi	r24, 0x01	; 1
    3094:	ec 81       	ldd	r30, Y+4	; 0x04
    3096:	fd 81       	ldd	r31, Y+5	; 0x05
    3098:	80 83       	st	Z, r24
    309a:	41 c0       	rjmp	.+130    	; 0x311e <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
    309c:	e6 e3       	ldi	r30, 0x36	; 54
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	28 2f       	mov	r18, r24
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	8b 81       	ldd	r24, Y+3	; 0x03
    30a8:	88 2f       	mov	r24, r24
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a9 01       	movw	r20, r18
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <DIO_u8GetPinValue+0xa8>
    30b0:	55 95       	asr	r21
    30b2:	47 95       	ror	r20
    30b4:	8a 95       	dec	r24
    30b6:	e2 f7       	brpl	.-8      	; 0x30b0 <DIO_u8GetPinValue+0xa4>
    30b8:	ca 01       	movw	r24, r20
    30ba:	81 70       	andi	r24, 0x01	; 1
    30bc:	ec 81       	ldd	r30, Y+4	; 0x04
    30be:	fd 81       	ldd	r31, Y+5	; 0x05
    30c0:	80 83       	st	Z, r24
    30c2:	2d c0       	rjmp	.+90     	; 0x311e <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
    30c4:	e3 e3       	ldi	r30, 0x33	; 51
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	8b 81       	ldd	r24, Y+3	; 0x03
    30d0:	88 2f       	mov	r24, r24
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	a9 01       	movw	r20, r18
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <DIO_u8GetPinValue+0xd0>
    30d8:	55 95       	asr	r21
    30da:	47 95       	ror	r20
    30dc:	8a 95       	dec	r24
    30de:	e2 f7       	brpl	.-8      	; 0x30d8 <DIO_u8GetPinValue+0xcc>
    30e0:	ca 01       	movw	r24, r20
    30e2:	81 70       	andi	r24, 0x01	; 1
    30e4:	ec 81       	ldd	r30, Y+4	; 0x04
    30e6:	fd 81       	ldd	r31, Y+5	; 0x05
    30e8:	80 83       	st	Z, r24
    30ea:	19 c0       	rjmp	.+50     	; 0x311e <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
    30ec:	e0 e3       	ldi	r30, 0x30	; 48
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	28 2f       	mov	r18, r24
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	8b 81       	ldd	r24, Y+3	; 0x03
    30f8:	88 2f       	mov	r24, r24
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	a9 01       	movw	r20, r18
    30fe:	02 c0       	rjmp	.+4      	; 0x3104 <DIO_u8GetPinValue+0xf8>
    3100:	55 95       	asr	r21
    3102:	47 95       	ror	r20
    3104:	8a 95       	dec	r24
    3106:	e2 f7       	brpl	.-8      	; 0x3100 <DIO_u8GetPinValue+0xf4>
    3108:	ca 01       	movw	r24, r20
    310a:	81 70       	andi	r24, 0x01	; 1
    310c:	ec 81       	ldd	r30, Y+4	; 0x04
    310e:	fd 81       	ldd	r31, Y+5	; 0x05
    3110:	80 83       	st	Z, r24
    3112:	05 c0       	rjmp	.+10     	; 0x311e <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	89 83       	std	Y+1, r24	; 0x01
    3118:	02 c0       	rjmp	.+4      	; 0x311e <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    311e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3120:	27 96       	adiw	r28, 0x07	; 7
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	08 95       	ret

00003132 <DIO_u8SetPortDirection>:
 * @param Copy_u8Port		Port number.
 * @param Copy_u8Direction	Character to represent port Direction.
 * @return					Error state.
 */
uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	00 d0       	rcall	.+0      	; 0x3138 <DIO_u8SetPortDirection+0x6>
    3138:	00 d0       	rcall	.+0      	; 0x313a <DIO_u8SetPortDirection+0x8>
    313a:	0f 92       	push	r0
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	8a 83       	std	Y+2, r24	; 0x02
    3142:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    3144:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    3146:	8a 81       	ldd	r24, Y+2	; 0x02
    3148:	28 2f       	mov	r18, r24
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	3d 83       	std	Y+5, r19	; 0x05
    314e:	2c 83       	std	Y+4, r18	; 0x04
    3150:	8c 81       	ldd	r24, Y+4	; 0x04
    3152:	9d 81       	ldd	r25, Y+5	; 0x05
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	91 05       	cpc	r25, r1
    3158:	d1 f0       	breq	.+52     	; 0x318e <DIO_u8SetPortDirection+0x5c>
    315a:	2c 81       	ldd	r18, Y+4	; 0x04
    315c:	3d 81       	ldd	r19, Y+5	; 0x05
    315e:	22 30       	cpi	r18, 0x02	; 2
    3160:	31 05       	cpc	r19, r1
    3162:	2c f4       	brge	.+10     	; 0x316e <DIO_u8SetPortDirection+0x3c>
    3164:	8c 81       	ldd	r24, Y+4	; 0x04
    3166:	9d 81       	ldd	r25, Y+5	; 0x05
    3168:	00 97       	sbiw	r24, 0x00	; 0
    316a:	61 f0       	breq	.+24     	; 0x3184 <DIO_u8SetPortDirection+0x52>
    316c:	1f c0       	rjmp	.+62     	; 0x31ac <DIO_u8SetPortDirection+0x7a>
    316e:	2c 81       	ldd	r18, Y+4	; 0x04
    3170:	3d 81       	ldd	r19, Y+5	; 0x05
    3172:	22 30       	cpi	r18, 0x02	; 2
    3174:	31 05       	cpc	r19, r1
    3176:	81 f0       	breq	.+32     	; 0x3198 <DIO_u8SetPortDirection+0x66>
    3178:	8c 81       	ldd	r24, Y+4	; 0x04
    317a:	9d 81       	ldd	r25, Y+5	; 0x05
    317c:	83 30       	cpi	r24, 0x03	; 3
    317e:	91 05       	cpc	r25, r1
    3180:	81 f0       	breq	.+32     	; 0x31a2 <DIO_u8SetPortDirection+0x70>
    3182:	14 c0       	rjmp	.+40     	; 0x31ac <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
    3184:	ea e3       	ldi	r30, 0x3A	; 58
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	80 83       	st	Z, r24
    318c:	11 c0       	rjmp	.+34     	; 0x31b0 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
    318e:	e7 e3       	ldi	r30, 0x37	; 55
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	8b 81       	ldd	r24, Y+3	; 0x03
    3194:	80 83       	st	Z, r24
    3196:	0c c0       	rjmp	.+24     	; 0x31b0 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
    3198:	e4 e3       	ldi	r30, 0x34	; 52
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	80 83       	st	Z, r24
    31a0:	07 c0       	rjmp	.+14     	; 0x31b0 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
    31a2:	e1 e3       	ldi	r30, 0x31	; 49
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	80 83       	st	Z, r24
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <DIO_u8SetPortValue>:
 * @param Copy_u8Port		Port number.
 * @param Copy_u8Direction	Character to represent port value.
 * @return					Error state.
 */
uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	00 d0       	rcall	.+0      	; 0x31c8 <DIO_u8SetPortValue+0x6>
    31c8:	00 d0       	rcall	.+0      	; 0x31ca <DIO_u8SetPortValue+0x8>
    31ca:	0f 92       	push	r0
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
    31d0:	8a 83       	std	Y+2, r24	; 0x02
    31d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    31d4:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    31d6:	8a 81       	ldd	r24, Y+2	; 0x02
    31d8:	28 2f       	mov	r18, r24
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	3d 83       	std	Y+5, r19	; 0x05
    31de:	2c 83       	std	Y+4, r18	; 0x04
    31e0:	8c 81       	ldd	r24, Y+4	; 0x04
    31e2:	9d 81       	ldd	r25, Y+5	; 0x05
    31e4:	81 30       	cpi	r24, 0x01	; 1
    31e6:	91 05       	cpc	r25, r1
    31e8:	d1 f0       	breq	.+52     	; 0x321e <DIO_u8SetPortValue+0x5c>
    31ea:	2c 81       	ldd	r18, Y+4	; 0x04
    31ec:	3d 81       	ldd	r19, Y+5	; 0x05
    31ee:	22 30       	cpi	r18, 0x02	; 2
    31f0:	31 05       	cpc	r19, r1
    31f2:	2c f4       	brge	.+10     	; 0x31fe <DIO_u8SetPortValue+0x3c>
    31f4:	8c 81       	ldd	r24, Y+4	; 0x04
    31f6:	9d 81       	ldd	r25, Y+5	; 0x05
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	61 f0       	breq	.+24     	; 0x3214 <DIO_u8SetPortValue+0x52>
    31fc:	1f c0       	rjmp	.+62     	; 0x323c <DIO_u8SetPortValue+0x7a>
    31fe:	2c 81       	ldd	r18, Y+4	; 0x04
    3200:	3d 81       	ldd	r19, Y+5	; 0x05
    3202:	22 30       	cpi	r18, 0x02	; 2
    3204:	31 05       	cpc	r19, r1
    3206:	81 f0       	breq	.+32     	; 0x3228 <DIO_u8SetPortValue+0x66>
    3208:	8c 81       	ldd	r24, Y+4	; 0x04
    320a:	9d 81       	ldd	r25, Y+5	; 0x05
    320c:	83 30       	cpi	r24, 0x03	; 3
    320e:	91 05       	cpc	r25, r1
    3210:	81 f0       	breq	.+32     	; 0x3232 <DIO_u8SetPortValue+0x70>
    3212:	14 c0       	rjmp	.+40     	; 0x323c <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
    3214:	eb e3       	ldi	r30, 0x3B	; 59
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	80 83       	st	Z, r24
    321c:	11 c0       	rjmp	.+34     	; 0x3240 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
    321e:	e8 e3       	ldi	r30, 0x38	; 56
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	8b 81       	ldd	r24, Y+3	; 0x03
    3224:	80 83       	st	Z, r24
    3226:	0c c0       	rjmp	.+24     	; 0x3240 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
    3228:	e5 e3       	ldi	r30, 0x35	; 53
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	8b 81       	ldd	r24, Y+3	; 0x03
    322e:	80 83       	st	Z, r24
    3230:	07 c0       	rjmp	.+14     	; 0x3240 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
    3232:	e2 e3       	ldi	r30, 0x32	; 50
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	80 83       	st	Z, r24
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3240:	89 81       	ldd	r24, Y+1	; 0x01
}
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	08 95       	ret

00003252 <MOTOR_u8RotateCW>:
 * @brief 					Function to rotate the motor in clock wise.
 * @param Copy_pstMotorInfo	Pointer to struct of the motor information.
 * @return					Error state.
 */
uint8 MOTOR_u8RotateCW(const MOTOR_t *Copy_pstMotorInfo)
{
    3252:	df 93       	push	r29
    3254:	cf 93       	push	r28
    3256:	00 d0       	rcall	.+0      	; 0x3258 <MOTOR_u8RotateCW+0x6>
    3258:	0f 92       	push	r0
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
    325e:	9b 83       	std	Y+3, r25	; 0x03
    3260:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3262:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pstMotorInfo != NULL)
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	9b 81       	ldd	r25, Y+3	; 0x03
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	a9 f0       	breq	.+42     	; 0x3296 <MOTOR_u8RotateCW+0x44>
	{
		/*Set pin 1 as low, pin 2 as high*/
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin1, DIO_u8PIN_LOW);
    326c:	ea 81       	ldd	r30, Y+2	; 0x02
    326e:	fb 81       	ldd	r31, Y+3	; 0x03
    3270:	80 81       	ld	r24, Z
    3272:	ea 81       	ldd	r30, Y+2	; 0x02
    3274:	fb 81       	ldd	r31, Y+3	; 0x03
    3276:	91 81       	ldd	r25, Z+1	; 0x01
    3278:	69 2f       	mov	r22, r25
    327a:	40 e0       	ldi	r20, 0x00	; 0
    327c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin2, DIO_u8PIN_HIGH);
    3280:	ea 81       	ldd	r30, Y+2	; 0x02
    3282:	fb 81       	ldd	r31, Y+3	; 0x03
    3284:	80 81       	ld	r24, Z
    3286:	ea 81       	ldd	r30, Y+2	; 0x02
    3288:	fb 81       	ldd	r31, Y+3	; 0x03
    328a:	92 81       	ldd	r25, Z+2	; 0x02
    328c:	69 2f       	mov	r22, r25
    328e:	41 e0       	ldi	r20, 0x01	; 1
    3290:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
    3294:	02 c0       	rjmp	.+4      	; 0x329a <MOTOR_u8RotateCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    329a:	89 81       	ldd	r24, Y+1	; 0x01
}
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <MOTOR_u8RotateCCW>:
 * @brief				 	Function to rotate the motor in counter clock wise.
 * @param Copy_pstMotorInfo	Pointer to struct of the motor information.
 * @return					Error state.
 */
uint8 MOTOR_u8RotateCCW(const MOTOR_t *Copy_pstMotorInfo)
{
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <MOTOR_u8RotateCCW+0x6>
    32ae:	0f 92       	push	r0
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	9b 83       	std	Y+3, r25	; 0x03
    32b6:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    32b8:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pstMotorInfo != NULL)
    32ba:	8a 81       	ldd	r24, Y+2	; 0x02
    32bc:	9b 81       	ldd	r25, Y+3	; 0x03
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	a9 f0       	breq	.+42     	; 0x32ec <MOTOR_u8RotateCCW+0x44>
	{
		/*Set pin 2 as low, pin 1 as high*/
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin2, DIO_u8PIN_LOW);
    32c2:	ea 81       	ldd	r30, Y+2	; 0x02
    32c4:	fb 81       	ldd	r31, Y+3	; 0x03
    32c6:	80 81       	ld	r24, Z
    32c8:	ea 81       	ldd	r30, Y+2	; 0x02
    32ca:	fb 81       	ldd	r31, Y+3	; 0x03
    32cc:	92 81       	ldd	r25, Z+2	; 0x02
    32ce:	69 2f       	mov	r22, r25
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin1, DIO_u8PIN_HIGH);
    32d6:	ea 81       	ldd	r30, Y+2	; 0x02
    32d8:	fb 81       	ldd	r31, Y+3	; 0x03
    32da:	80 81       	ld	r24, Z
    32dc:	ea 81       	ldd	r30, Y+2	; 0x02
    32de:	fb 81       	ldd	r31, Y+3	; 0x03
    32e0:	91 81       	ldd	r25, Z+1	; 0x01
    32e2:	69 2f       	mov	r22, r25
    32e4:	41 e0       	ldi	r20, 0x01	; 1
    32e6:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
    32ea:	02 c0       	rjmp	.+4      	; 0x32f0 <MOTOR_u8RotateCCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    32ec:	82 e0       	ldi	r24, 0x02	; 2
    32ee:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <MOTOR_u8Stop>:
 * @brief 					Function to stop the motor.
 * @param Copy_pstMotorInfo	Pointer to struct of the motor information.
 * @return					Error state.
 */
uint8 MOTOR_u8Stop(const MOTOR_t *Copy_pstMotorInfo)
{
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	00 d0       	rcall	.+0      	; 0x3304 <MOTOR_u8Stop+0x6>
    3304:	0f 92       	push	r0
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	9b 83       	std	Y+3, r25	; 0x03
    330c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    330e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pstMotorInfo != NULL)
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	9b 81       	ldd	r25, Y+3	; 0x03
    3314:	00 97       	sbiw	r24, 0x00	; 0
    3316:	a9 f0       	breq	.+42     	; 0x3342 <MOTOR_u8Stop+0x44>
	{
		/*Set pin 1 and 2 as low*/
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin2, DIO_u8PIN_LOW);
    3318:	ea 81       	ldd	r30, Y+2	; 0x02
    331a:	fb 81       	ldd	r31, Y+3	; 0x03
    331c:	80 81       	ld	r24, Z
    331e:	ea 81       	ldd	r30, Y+2	; 0x02
    3320:	fb 81       	ldd	r31, Y+3	; 0x03
    3322:	92 81       	ldd	r25, Z+2	; 0x02
    3324:	69 2f       	mov	r22, r25
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pstMotorInfo -> Port, Copy_pstMotorInfo -> Pin1, DIO_u8PIN_LOW);
    332c:	ea 81       	ldd	r30, Y+2	; 0x02
    332e:	fb 81       	ldd	r31, Y+3	; 0x03
    3330:	80 81       	ld	r24, Z
    3332:	ea 81       	ldd	r30, Y+2	; 0x02
    3334:	fb 81       	ldd	r31, Y+3	; 0x03
    3336:	91 81       	ldd	r25, Z+1	; 0x01
    3338:	69 2f       	mov	r22, r25
    333a:	40 e0       	ldi	r20, 0x00	; 0
    333c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
    3340:	02 c0       	rjmp	.+4      	; 0x3346 <MOTOR_u8Stop+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3342:	82 e0       	ldi	r24, 0x02	; 2
    3344:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    3346:	89 81       	ldd	r24, Y+1	; 0x01
}
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	cf 91       	pop	r28
    3350:	df 91       	pop	r29
    3352:	08 95       	ret

00003354 <MCP2515_voidChipSelect>:
#include "../Header/MCP2515_interface.h"
#include "../Header/MCP2515_config.h"
#include "../Header/MCP2515_private.h"

static void MCP2515_voidChipSelect(uint8 Copy_u8State)
{
    3354:	df 93       	push	r29
    3356:	cf 93       	push	r28
    3358:	0f 92       	push	r0
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
    335e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == SLAVE_CHOOSE)
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	81 30       	cpi	r24, 0x01	; 1
    3364:	31 f4       	brne	.+12     	; 0x3372 <MCP2515_voidChipSelect+0x1e>
	{
		DIO_u8SetPinValue(MCP2515_u8Slave_SELECT_PORT, MCP2515_u8Slave_SELECT_PIN, DIO_u8PIN_LOW);
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	64 e0       	ldi	r22, 0x04	; 4
    336a:	40 e0       	ldi	r20, 0x00	; 0
    336c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
    3370:	08 c0       	rjmp	.+16     	; 0x3382 <MCP2515_voidChipSelect+0x2e>
	}
	else if(Copy_u8State == SLAVE_RELEASE)
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	88 23       	and	r24, r24
    3376:	29 f4       	brne	.+10     	; 0x3382 <MCP2515_voidChipSelect+0x2e>
	{
		DIO_u8SetPinValue(MCP2515_u8Slave_SELECT_PORT, MCP2515_u8Slave_SELECT_PIN, DIO_u8PIN_HIGH);
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	64 e0       	ldi	r22, 0x04	; 4
    337c:	41 e0       	ldi	r20, 0x01	; 1
    337e:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
	}
}
    3382:	0f 90       	pop	r0
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <MCP2515_u8ReadRegister>:

uint8 MCP2515_u8ReadRegister(uint8 Copy_u8Address)
{
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	00 d0       	rcall	.+0      	; 0x3390 <MCP2515_u8ReadRegister+0x6>
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ReadValue;

	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_READ);
    339c:	83 e0       	ldi	r24, 0x03	; 3
    339e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Address);
    33a2:	8a 81       	ldd	r24, Y+2	; 0x02
    33a4:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>

	Local_u8ReadValue = SPI_u8Transceive(0);
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
    33ae:	89 83       	std	Y+1, r24	; 0x01

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	return Local_u8ReadValue;
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	cf 91       	pop	r28
    33be:	df 91       	pop	r29
    33c0:	08 95       	ret

000033c2 <MCP2515_voidWriteRegister>:

void MCP2515_voidWriteRegister(uint8 Copy_u8Address, uint8 Copy_u8Value)
{
    33c2:	df 93       	push	r29
    33c4:	cf 93       	push	r28
    33c6:	00 d0       	rcall	.+0      	; 0x33c8 <MCP2515_voidWriteRegister+0x6>
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    33cc:	89 83       	std	Y+1, r24	; 0x01
    33ce:	6a 83       	std	Y+2, r22	; 0x02
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_WRITE);
    33d6:	82 e0       	ldi	r24, 0x02	; 2
    33d8:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Address);
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Value);
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    33e8:	80 e0       	ldi	r24, 0x00	; 0
    33ea:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>
}
    33ee:	0f 90       	pop	r0
    33f0:	0f 90       	pop	r0
    33f2:	cf 91       	pop	r28
    33f4:	df 91       	pop	r29
    33f6:	08 95       	ret

000033f8 <MCP2515_voidSetBitTiming>:

void MCP2515_voidSetBitTiming(uint8 Copy_u8CNF1Value, uint8 Copy_u8CNF2Value, uint8 Copy_u8CNF3Value)
{
    33f8:	df 93       	push	r29
    33fa:	cf 93       	push	r28
    33fc:	00 d0       	rcall	.+0      	; 0x33fe <MCP2515_voidSetBitTiming+0x6>
    33fe:	0f 92       	push	r0
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62
    3404:	89 83       	std	Y+1, r24	; 0x01
    3406:	6a 83       	std	Y+2, r22	; 0x02
    3408:	4b 83       	std	Y+3, r20	; 0x03
	MCP2515_voidWriteRegister(CNF1, Copy_u8CNF1Value);
    340a:	8a e2       	ldi	r24, 0x2A	; 42
    340c:	69 81       	ldd	r22, Y+1	; 0x01
    340e:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <MCP2515_voidWriteRegister>
	MCP2515_voidWriteRegister(CNF2, Copy_u8CNF2Value);
    3412:	89 e2       	ldi	r24, 0x29	; 41
    3414:	6a 81       	ldd	r22, Y+2	; 0x02
    3416:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <MCP2515_voidWriteRegister>
	MCP2515_voidWriteRegister(CNF3, Copy_u8CNF3Value);
    341a:	88 e2       	ldi	r24, 0x28	; 40
    341c:	6b 81       	ldd	r22, Y+3	; 0x03
    341e:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <MCP2515_voidWriteRegister>
}
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <MCP2515_voidReset>:

void MCP2515_voidReset(void)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_RESET);
    343c:	80 ec       	ldi	r24, 0xC0	; 192
    343e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>
}
    3448:	cf 91       	pop	r28
    344a:	df 91       	pop	r29
    344c:	08 95       	ret

0000344e <MCP2515_voidChangeBits>:

void MCP2515_voidChangeBits(uint8 Copy_u8RegAddress, uint8 Copy_u8Mask, uint8 Copy_u8Value)
{
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	00 d0       	rcall	.+0      	; 0x3454 <MCP2515_voidChangeBits+0x6>
    3454:	0f 92       	push	r0
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	6a 83       	std	Y+2, r22	; 0x02
    345e:	4b 83       	std	Y+3, r20	; 0x03
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_BIT_MODIFY);
    3466:	85 e0       	ldi	r24, 0x05	; 5
    3468:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8RegAddress);
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Mask);
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8Value);
    3478:	8b 81       	ldd	r24, Y+3	; 0x03
    347a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>
}
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <MCP2515_voidSetMode>:

void MCP2515_voidSetMode(uint8 Copy_u8Mode)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	0f 92       	push	r0
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
    349a:	89 83       	std	Y+1, r24	; 0x01
	MCP2515_voidChangeBits(CANCTRL, 0xE0, Copy_u8Mode << 5);
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	98 2f       	mov	r25, r24
    34a0:	92 95       	swap	r25
    34a2:	99 0f       	add	r25, r25
    34a4:	90 7e       	andi	r25, 0xE0	; 224
    34a6:	8f e0       	ldi	r24, 0x0F	; 15
    34a8:	60 ee       	ldi	r22, 0xE0	; 224
    34aa:	49 2f       	mov	r20, r25
    34ac:	0e 94 27 1a 	call	0x344e	; 0x344e <MCP2515_voidChangeBits>
	while((MCP2515_u8ReadRegister(CANSTAT) >> 5) != Copy_u8Mode);
    34b0:	8e e0       	ldi	r24, 0x0E	; 14
    34b2:	0e 94 c5 19 	call	0x338a	; 0x338a <MCP2515_u8ReadRegister>
    34b6:	98 2f       	mov	r25, r24
    34b8:	92 95       	swap	r25
    34ba:	96 95       	lsr	r25
    34bc:	97 70       	andi	r25, 0x07	; 7
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	98 17       	cp	r25, r24
    34c2:	b1 f7       	brne	.-20     	; 0x34b0 <MCP2515_voidSetMode+0x20>
}
    34c4:	0f 90       	pop	r0
    34c6:	cf 91       	pop	r28
    34c8:	df 91       	pop	r29
    34ca:	08 95       	ret

000034cc <MCP2515_voidSendInit>:

void MCP2515_voidSendInit(void)
{
    34cc:	df 93       	push	r29
    34ce:	cf 93       	push	r28
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
	SPI_voidInit();
    34d4:	0e 94 d5 14 	call	0x29aa	; 0x29aa <SPI_voidInit>
//	SPI_VidMasterInit();

	MCP2515_voidReset();
    34d8:	0e 94 17 1a 	call	0x342e	; 0x342e <MCP2515_voidReset>

	/*Enter configuration mode and enable CLKOUT with no prescaler*/
	MCP2515_voidWriteRegister(CANCTRL, 0x84);
    34dc:	8f e0       	ldi	r24, 0x0F	; 15
    34de:	64 e8       	ldi	r22, 0x84	; 132
    34e0:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <MCP2515_voidWriteRegister>

	while((MCP2515_u8ReadRegister(CANSTAT)>>5) != MCP2515_MODE_CONFG);
    34e4:	8e e0       	ldi	r24, 0x0E	; 14
    34e6:	0e 94 c5 19 	call	0x338a	; 0x338a <MCP2515_u8ReadRegister>
    34ea:	82 95       	swap	r24
    34ec:	86 95       	lsr	r24
    34ee:	87 70       	andi	r24, 0x07	; 7
    34f0:	84 30       	cpi	r24, 0x04	; 4
    34f2:	c1 f7       	brne	.-16     	; 0x34e4 <MCP2515_voidSendInit+0x18>

	/*To run at 250 KHz bit rate using 8 MHz oscillator*/
	MCP2515_voidSetBitTiming((2 << 6), ((1 << 7) | (6 << 3) | (1)), 5);
    34f4:	80 e8       	ldi	r24, 0x80	; 128
    34f6:	61 eb       	ldi	r22, 0xB1	; 177
    34f8:	45 e0       	ldi	r20, 0x05	; 5
    34fa:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <MCP2515_voidSetBitTiming>

	MCP2515_voidSetMode(MCP2515_MODE_NORMAL);
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	0e 94 48 1a 	call	0x3490	; 0x3490 <MCP2515_voidSetMode>
}
    3504:	cf 91       	pop	r28
    3506:	df 91       	pop	r29
    3508:	08 95       	ret

0000350a <MCP2515_voidSendCANmsg>:



void MCP2515_voidSendCANmsg(MCP2515_CanMessage_t Copy_stMessage)
{
    350a:	cf 92       	push	r12
    350c:	df 92       	push	r13
    350e:	ef 92       	push	r14
    3510:	ff 92       	push	r15
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	2f 97       	sbiw	r28, 0x0f	; 15
    3520:	0f b6       	in	r0, 0x3f	; 63
    3522:	f8 94       	cli
    3524:	de bf       	out	0x3e, r29	; 62
    3526:	0f be       	out	0x3f, r0	; 63
    3528:	cd bf       	out	0x3d, r28	; 61
    352a:	ca 82       	std	Y+2, r12	; 0x02
    352c:	db 82       	std	Y+3, r13	; 0x03
    352e:	ec 82       	std	Y+4, r14	; 0x04
    3530:	fd 82       	std	Y+5, r15	; 0x05
    3532:	0e 83       	std	Y+6, r16	; 0x06
    3534:	1f 83       	std	Y+7, r17	; 0x07
    3536:	28 87       	std	Y+8, r18	; 0x08
    3538:	39 87       	std	Y+9, r19	; 0x09
    353a:	4a 87       	std	Y+10, r20	; 0x0a
    353c:	5b 87       	std	Y+11, r21	; 0x0b
    353e:	6c 87       	std	Y+12, r22	; 0x0c
    3540:	7d 87       	std	Y+13, r23	; 0x0d
    3542:	8e 87       	std	Y+14, r24	; 0x0e
    3544:	9f 87       	std	Y+15, r25	; 0x0f
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	uint8 Local_u8Counter;

	/*Send header and address*/
	SPI_u8Transceive(INST_WRITE);
    354c:	82 e0       	ldi	r24, 0x02	; 2
    354e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(TXB0CTRL);
    3552:	80 e3       	ldi	r24, 0x30	; 48
    3554:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>

	/*Setup message priority*/
	SPI_u8Transceive(3);
    3558:	83 e0       	ldi	r24, 0x03	; 3
    355a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>

	/* Setup standard or extended identifier */
	SPI_u8Transceive((uint8)(Copy_stMessage.id >> 3));
    355e:	8a 81       	ldd	r24, Y+2	; 0x02
    3560:	9b 81       	ldd	r25, Y+3	; 0x03
    3562:	ac 81       	ldd	r26, Y+4	; 0x04
    3564:	bd 81       	ldd	r27, Y+5	; 0x05
    3566:	68 94       	set
    3568:	12 f8       	bld	r1, 2
    356a:	b6 95       	lsr	r27
    356c:	a7 95       	ror	r26
    356e:	97 95       	ror	r25
    3570:	87 95       	ror	r24
    3572:	16 94       	lsr	r1
    3574:	d1 f7       	brne	.-12     	; 0x356a <MCP2515_voidSendCANmsg+0x60>
    3576:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive((uint8)(Copy_stMessage.id << 5));
    357a:	8a 81       	ldd	r24, Y+2	; 0x02
    357c:	9b 81       	ldd	r25, Y+3	; 0x03
    357e:	ac 81       	ldd	r26, Y+4	; 0x04
    3580:	bd 81       	ldd	r27, Y+5	; 0x05
    3582:	82 95       	swap	r24
    3584:	88 0f       	add	r24, r24
    3586:	80 7e       	andi	r24, 0xE0	; 224
    3588:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(0);
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(0);
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>

	/* Setup message length and RTR bit */
	SPI_u8Transceive((Copy_stMessage.length) | (Copy_stMessage.properties << 6));
    3598:	8e 85       	ldd	r24, Y+14	; 0x0e
    359a:	28 2f       	mov	r18, r24
    359c:	8f 85       	ldd	r24, Y+15	; 0x0f
    359e:	88 2f       	mov	r24, r24
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	00 24       	eor	r0, r0
    35a4:	96 95       	lsr	r25
    35a6:	87 95       	ror	r24
    35a8:	07 94       	ror	r0
    35aa:	96 95       	lsr	r25
    35ac:	87 95       	ror	r24
    35ae:	07 94       	ror	r0
    35b0:	98 2f       	mov	r25, r24
    35b2:	80 2d       	mov	r24, r0
    35b4:	82 2b       	or	r24, r18
    35b6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>

	/* Store the message into the buffer */
	for(Local_u8Counter = 0; Local_u8Counter < Copy_stMessage.length; Local_u8Counter++)
    35ba:	19 82       	std	Y+1, r1	; 0x01
    35bc:	0e c0       	rjmp	.+28     	; 0x35da <MCP2515_voidSendCANmsg+0xd0>
	{
		SPI_u8Transceive(Copy_stMessage.data[Local_u8Counter]);
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	28 2f       	mov	r18, r24
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	ce 01       	movw	r24, r28
    35c6:	06 96       	adiw	r24, 0x06	; 6
    35c8:	fc 01       	movw	r30, r24
    35ca:	e2 0f       	add	r30, r18
    35cc:	f3 1f       	adc	r31, r19
    35ce:	80 81       	ld	r24, Z
    35d0:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>

	/* Setup message length and RTR bit */
	SPI_u8Transceive((Copy_stMessage.length) | (Copy_stMessage.properties << 6));

	/* Store the message into the buffer */
	for(Local_u8Counter = 0; Local_u8Counter < Copy_stMessage.length; Local_u8Counter++)
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	8f 5f       	subi	r24, 0xFF	; 255
    35d8:	89 83       	std	Y+1, r24	; 0x01
    35da:	9e 85       	ldd	r25, Y+14	; 0x0e
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	89 17       	cp	r24, r25
    35e0:	70 f3       	brcs	.-36     	; 0x35be <MCP2515_voidSendCANmsg+0xb4>
	{
		SPI_u8Transceive(Copy_stMessage.data[Local_u8Counter]);
	}

	/*Release the bus*/
	MCP2515_voidChipSelect(SLAVE_RELEASE);
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	/*Send request to send*/
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>
	SPI_u8Transceive(INST_RTS_TXB0);
    35ee:	81 e8       	ldi	r24, 0x81	; 129
    35f0:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	MCP2515_voidChipSelect(SLAVE_RELEASE);
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>
}
    35fa:	2f 96       	adiw	r28, 0x0f	; 15
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	cf 91       	pop	r28
    3608:	df 91       	pop	r29
    360a:	1f 91       	pop	r17
    360c:	0f 91       	pop	r16
    360e:	ff 90       	pop	r15
    3610:	ef 90       	pop	r14
    3612:	df 90       	pop	r13
    3614:	cf 90       	pop	r12
    3616:	08 95       	ret

00003618 <MCP2515_voidSetRollover>:


void MCP2515_voidSetRollover(uint8 Copy_u8Value)
{
    3618:	df 93       	push	r29
    361a:	cf 93       	push	r28
    361c:	0f 92       	push	r0
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
    3622:	89 83       	std	Y+1, r24	; 0x01
	MCP2515_voidChangeBits(RXB0CTRL, 1 << BUKT, Copy_u8Value << BUKT);
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	98 2f       	mov	r25, r24
    3628:	99 0f       	add	r25, r25
    362a:	99 0f       	add	r25, r25
    362c:	80 e6       	ldi	r24, 0x60	; 96
    362e:	64 e0       	ldi	r22, 0x04	; 4
    3630:	49 2f       	mov	r20, r25
    3632:	0e 94 27 1a 	call	0x344e	; 0x344e <MCP2515_voidChangeBits>
}
    3636:	0f 90       	pop	r0
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	08 95       	ret

0000363e <MCP2515_voidSetMask>:

void MCP2515_voidSetMask(uint8 Copy_u8MaskAddress, uint32 Copy_u32MaskValue, uint8 Copy_u8Extended)
{
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	00 d0       	rcall	.+0      	; 0x3644 <MCP2515_voidSetMask+0x6>
    3644:	00 d0       	rcall	.+0      	; 0x3646 <MCP2515_voidSetMask+0x8>
    3646:	00 d0       	rcall	.+0      	; 0x3648 <MCP2515_voidSetMask+0xa>
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
    364c:	89 83       	std	Y+1, r24	; 0x01
    364e:	4a 83       	std	Y+2, r20	; 0x02
    3650:	5b 83       	std	Y+3, r21	; 0x03
    3652:	6c 83       	std	Y+4, r22	; 0x04
    3654:	7d 83       	std	Y+5, r23	; 0x05
    3656:	2e 83       	std	Y+6, r18	; 0x06
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_WRITE);
    365e:	82 e0       	ldi	r24, 0x02	; 2
    3660:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(Copy_u8MaskAddress);
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>

	if(Copy_u8Extended)
    366a:	8e 81       	ldd	r24, Y+6	; 0x06
    366c:	88 23       	and	r24, r24
    366e:	09 f4       	brne	.+2      	; 0x3672 <MCP2515_voidSetMask+0x34>
    3670:	43 c0       	rjmp	.+134    	; 0x36f8 <MCP2515_voidSetMask+0xba>
	{
		/*Extended Address*/
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 3));
    3672:	8a 81       	ldd	r24, Y+2	; 0x02
    3674:	9b 81       	ldd	r25, Y+3	; 0x03
    3676:	ac 81       	ldd	r26, Y+4	; 0x04
    3678:	bd 81       	ldd	r27, Y+5	; 0x05
    367a:	68 94       	set
    367c:	12 f8       	bld	r1, 2
    367e:	b6 95       	lsr	r27
    3680:	a7 95       	ror	r26
    3682:	97 95       	ror	r25
    3684:	87 95       	ror	r24
    3686:	16 94       	lsr	r1
    3688:	d1 f7       	brne	.-12     	; 0x367e <MCP2515_voidSetMask+0x40>
    368a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue << 5) | (1<<3) | (uint32) (Copy_u32MaskValue >> 27));
    368e:	8a 81       	ldd	r24, Y+2	; 0x02
    3690:	28 2f       	mov	r18, r24
    3692:	22 95       	swap	r18
    3694:	22 0f       	add	r18, r18
    3696:	20 7e       	andi	r18, 0xE0	; 224
    3698:	8a 81       	ldd	r24, Y+2	; 0x02
    369a:	9b 81       	ldd	r25, Y+3	; 0x03
    369c:	ac 81       	ldd	r26, Y+4	; 0x04
    369e:	bd 81       	ldd	r27, Y+5	; 0x05
    36a0:	07 2e       	mov	r0, r23
    36a2:	7b e1       	ldi	r23, 0x1B	; 27
    36a4:	b6 95       	lsr	r27
    36a6:	a7 95       	ror	r26
    36a8:	97 95       	ror	r25
    36aa:	87 95       	ror	r24
    36ac:	7a 95       	dec	r23
    36ae:	d1 f7       	brne	.-12     	; 0x36a4 <MCP2515_voidSetMask+0x66>
    36b0:	70 2d       	mov	r23, r0
    36b2:	82 2b       	or	r24, r18
    36b4:	88 60       	ori	r24, 0x08	; 8
    36b6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 19));
    36ba:	8a 81       	ldd	r24, Y+2	; 0x02
    36bc:	9b 81       	ldd	r25, Y+3	; 0x03
    36be:	ac 81       	ldd	r26, Y+4	; 0x04
    36c0:	bd 81       	ldd	r27, Y+5	; 0x05
    36c2:	07 2e       	mov	r0, r23
    36c4:	73 e1       	ldi	r23, 0x13	; 19
    36c6:	b6 95       	lsr	r27
    36c8:	a7 95       	ror	r26
    36ca:	97 95       	ror	r25
    36cc:	87 95       	ror	r24
    36ce:	7a 95       	dec	r23
    36d0:	d1 f7       	brne	.-12     	; 0x36c6 <MCP2515_voidSetMask+0x88>
    36d2:	70 2d       	mov	r23, r0
    36d4:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 11));
    36d8:	8a 81       	ldd	r24, Y+2	; 0x02
    36da:	9b 81       	ldd	r25, Y+3	; 0x03
    36dc:	ac 81       	ldd	r26, Y+4	; 0x04
    36de:	bd 81       	ldd	r27, Y+5	; 0x05
    36e0:	07 2e       	mov	r0, r23
    36e2:	7b e0       	ldi	r23, 0x0B	; 11
    36e4:	b6 95       	lsr	r27
    36e6:	a7 95       	ror	r26
    36e8:	97 95       	ror	r25
    36ea:	87 95       	ror	r24
    36ec:	7a 95       	dec	r23
    36ee:	d1 f7       	brne	.-12     	; 0x36e4 <MCP2515_voidSetMask+0xa6>
    36f0:	70 2d       	mov	r23, r0
    36f2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
    36f6:	14 c0       	rjmp	.+40     	; 0x3720 <MCP2515_voidSetMask+0xe2>
	}
	else
	{
		/*Standard Address*/
		SPI_u8Transceive((uint8) (Copy_u32MaskValue >> 3));
    36f8:	8a 81       	ldd	r24, Y+2	; 0x02
    36fa:	9b 81       	ldd	r25, Y+3	; 0x03
    36fc:	ac 81       	ldd	r26, Y+4	; 0x04
    36fe:	bd 81       	ldd	r27, Y+5	; 0x05
    3700:	68 94       	set
    3702:	12 f8       	bld	r1, 2
    3704:	b6 95       	lsr	r27
    3706:	a7 95       	ror	r26
    3708:	97 95       	ror	r25
    370a:	87 95       	ror	r24
    370c:	16 94       	lsr	r1
    370e:	d1 f7       	brne	.-12     	; 0x3704 <MCP2515_voidSetMask+0xc6>
    3710:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
		SPI_u8Transceive((uint8) (Copy_u32MaskValue << 5));
    3714:	8a 81       	ldd	r24, Y+2	; 0x02
    3716:	82 95       	swap	r24
    3718:	88 0f       	add	r24, r24
    371a:	80 7e       	andi	r24, 0xE0	; 224
    371c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	}

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>
}
    3726:	26 96       	adiw	r28, 0x06	; 6
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	0f be       	out	0x3f, r0	; 63
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <MCP2515_voidReceiveInit>:



void MCP2515_voidReceiveInit(void)
{
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
	SPI_voidInit();
    3740:	0e 94 d5 14 	call	0x29aa	; 0x29aa <SPI_voidInit>
//	SPI_VidMasterInit();

	MCP2515_voidReset();
    3744:	0e 94 17 1a 	call	0x342e	; 0x342e <MCP2515_voidReset>

	/*Enter configuration mode and enable CLKOUT with no prescaler*/
	MCP2515_voidWriteRegister(CANCTRL, 0x84);
    3748:	8f e0       	ldi	r24, 0x0F	; 15
    374a:	64 e8       	ldi	r22, 0x84	; 132
    374c:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <MCP2515_voidWriteRegister>

	while((MCP2515_u8ReadRegister(CANSTAT) >> 5) != MCP2515_MODE_CONFG);
    3750:	8e e0       	ldi	r24, 0x0E	; 14
    3752:	0e 94 c5 19 	call	0x338a	; 0x338a <MCP2515_u8ReadRegister>
    3756:	82 95       	swap	r24
    3758:	86 95       	lsr	r24
    375a:	87 70       	andi	r24, 0x07	; 7
    375c:	84 30       	cpi	r24, 0x04	; 4
    375e:	c1 f7       	brne	.-16     	; 0x3750 <MCP2515_voidReceiveInit+0x18>

	/*To run at 250 KHz bit rate using 8 MHz oscillator*/
	MCP2515_voidSetBitTiming((2 << 6), (1 << 7) | (6 << 3) | (1), (5));
    3760:	80 e8       	ldi	r24, 0x80	; 128
    3762:	61 eb       	ldi	r22, 0xB1	; 177
    3764:	45 e0       	ldi	r20, 0x05	; 5
    3766:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <MCP2515_voidSetBitTiming>

	//	MCP2515_VidSetBitTiming(0, 0xAC, 0x03);
	/*Accept all messages*/
	MCP2515_voidSetMask(RXM0SIDH, 0x00000000, 1);
    376a:	80 e2       	ldi	r24, 0x20	; 32
    376c:	40 e0       	ldi	r20, 0x00	; 0
    376e:	50 e0       	ldi	r21, 0x00	; 0
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	70 e0       	ldi	r23, 0x00	; 0
    3774:	21 e0       	ldi	r18, 0x01	; 1
    3776:	0e 94 1f 1b 	call	0x363e	; 0x363e <MCP2515_voidSetMask>
	MCP2515_voidSetMask(RXM1SIDH, 0x00000000, 1);
    377a:	84 e2       	ldi	r24, 0x24	; 36
    377c:	40 e0       	ldi	r20, 0x00	; 0
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	60 e0       	ldi	r22, 0x00	; 0
    3782:	70 e0       	ldi	r23, 0x00	; 0
    3784:	21 e0       	ldi	r18, 0x01	; 1
    3786:	0e 94 1f 1b 	call	0x363e	; 0x363e <MCP2515_voidSetMask>
	MCP2515_voidSetRollover(1);
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	0e 94 0c 1b 	call	0x3618	; 0x3618 <MCP2515_voidSetRollover>

	MCP2515_voidWriteRegister(CANINTE, 1<<RX0IE);
    3790:	8b e2       	ldi	r24, 0x2B	; 43
    3792:	61 e0       	ldi	r22, 0x01	; 1
    3794:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <MCP2515_voidWriteRegister>

	MCP2515_voidSetMode(MCP2515_MODE_NORMAL);
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	0e 94 48 1a 	call	0x3490	; 0x3490 <MCP2515_voidSetMode>
}
    379e:	cf 91       	pop	r28
    37a0:	df 91       	pop	r29
    37a2:	08 95       	ret

000037a4 <MCP2515_stReceiveCANmsg>:

uint8 MCP2515_u8ReadBuffer[14];

MCP2515_CanMessage_t MCP2515_stReceiveCANmsg(void)
{
    37a4:	0f 93       	push	r16
    37a6:	1f 93       	push	r17
    37a8:	df 93       	push	r29
    37aa:	cf 93       	push	r28
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	67 97       	sbiw	r28, 0x17	; 23
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
    37bc:	9a 8b       	std	Y+18, r25	; 0x12
    37be:	89 8b       	std	Y+17, r24	; 0x11
	MCP2515_CanMessage_t Local_stReceive = {0};
    37c0:	8e e0       	ldi	r24, 0x0E	; 14
    37c2:	fe 01       	movw	r30, r28
    37c4:	33 96       	adiw	r30, 0x03	; 3
    37c6:	df 01       	movw	r26, r30
    37c8:	98 2f       	mov	r25, r24
    37ca:	1d 92       	st	X+, r1
    37cc:	9a 95       	dec	r25
    37ce:	e9 f7       	brne	.-6      	; 0x37ca <MCP2515_stReceiveCANmsg+0x26>
	uint8 Local_u8Counter = 0;
    37d0:	1a 82       	std	Y+2, r1	; 0x02

	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	SPI_u8Transceive(INST_READ);
    37d8:	83 e0       	ldi	r24, 0x03	; 3
    37da:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(RXB0CTRL);
    37de:	80 e6       	ldi	r24, 0x60	; 96
    37e0:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>


	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    37e4:	1a 82       	std	Y+2, r1	; 0x02
    37e6:	0d c0       	rjmp	.+26     	; 0x3802 <MCP2515_stReceiveCANmsg+0x5e>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
    37e8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ea:	08 2f       	mov	r16, r24
    37ec:	10 e0       	ldi	r17, 0x00	; 0
    37ee:	80 e0       	ldi	r24, 0x00	; 0
    37f0:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
    37f4:	f8 01       	movw	r30, r16
    37f6:	e8 55       	subi	r30, 0x58	; 88
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	80 83       	st	Z, r24

	SPI_u8Transceive(INST_READ);
	SPI_u8Transceive(RXB0CTRL);


	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    37fc:	8a 81       	ldd	r24, Y+2	; 0x02
    37fe:	8f 5f       	subi	r24, 0xFF	; 255
    3800:	8a 83       	std	Y+2, r24	; 0x02
    3802:	8a 81       	ldd	r24, Y+2	; 0x02
    3804:	8e 30       	cpi	r24, 0x0E	; 14
    3806:	80 f3       	brcs	.-32     	; 0x37e8 <MCP2515_stReceiveCANmsg+0x44>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
	}

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	MCP2515_voidWriteRegister(CANINTF, 0);
    380e:	8c e2       	ldi	r24, 0x2C	; 44
    3810:	60 e0       	ldi	r22, 0x00	; 0
    3812:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <MCP2515_voidWriteRegister>

	Local_stReceive.id = MCP2515_u8ReadBuffer[1];
    3816:	80 91 a9 00 	lds	r24, 0x00A9
    381a:	88 2f       	mov	r24, r24
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	a0 e0       	ldi	r26, 0x00	; 0
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	8b 83       	std	Y+3, r24	; 0x03
    3824:	9c 83       	std	Y+4, r25	; 0x04
    3826:	ad 83       	std	Y+5, r26	; 0x05
    3828:	be 83       	std	Y+6, r27	; 0x06
	Local_stReceive.id = Local_stReceive.id << 3;
    382a:	8b 81       	ldd	r24, Y+3	; 0x03
    382c:	9c 81       	ldd	r25, Y+4	; 0x04
    382e:	ad 81       	ldd	r26, Y+5	; 0x05
    3830:	be 81       	ldd	r27, Y+6	; 0x06
    3832:	88 0f       	add	r24, r24
    3834:	99 1f       	adc	r25, r25
    3836:	aa 1f       	adc	r26, r26
    3838:	bb 1f       	adc	r27, r27
    383a:	88 0f       	add	r24, r24
    383c:	99 1f       	adc	r25, r25
    383e:	aa 1f       	adc	r26, r26
    3840:	bb 1f       	adc	r27, r27
    3842:	88 0f       	add	r24, r24
    3844:	99 1f       	adc	r25, r25
    3846:	aa 1f       	adc	r26, r26
    3848:	bb 1f       	adc	r27, r27
    384a:	8b 83       	std	Y+3, r24	; 0x03
    384c:	9c 83       	std	Y+4, r25	; 0x04
    384e:	ad 83       	std	Y+5, r26	; 0x05
    3850:	be 83       	std	Y+6, r27	; 0x06
	uint8 Local_u8Hegazy = MCP2515_u8ReadBuffer[2];
    3852:	80 91 aa 00 	lds	r24, 0x00AA
    3856:	89 83       	std	Y+1, r24	; 0x01
	Local_stReceive.id |= Local_u8Hegazy >> 5;
    3858:	2b 81       	ldd	r18, Y+3	; 0x03
    385a:	3c 81       	ldd	r19, Y+4	; 0x04
    385c:	4d 81       	ldd	r20, Y+5	; 0x05
    385e:	5e 81       	ldd	r21, Y+6	; 0x06
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	82 95       	swap	r24
    3864:	86 95       	lsr	r24
    3866:	87 70       	andi	r24, 0x07	; 7
    3868:	88 2f       	mov	r24, r24
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	a0 e0       	ldi	r26, 0x00	; 0
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	82 2b       	or	r24, r18
    3872:	93 2b       	or	r25, r19
    3874:	a4 2b       	or	r26, r20
    3876:	b5 2b       	or	r27, r21
    3878:	8b 83       	std	Y+3, r24	; 0x03
    387a:	9c 83       	std	Y+4, r25	; 0x04
    387c:	ad 83       	std	Y+5, r26	; 0x05
    387e:	be 83       	std	Y+6, r27	; 0x06
	Local_stReceive.length = MCP2515_u8ReadBuffer[5] & 0x0F;
    3880:	80 91 ad 00 	lds	r24, 0x00AD
    3884:	8f 70       	andi	r24, 0x0F	; 15
    3886:	8f 87       	std	Y+15, r24	; 0x0f

	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    3888:	1a 82       	std	Y+2, r1	; 0x02
    388a:	14 c0       	rjmp	.+40     	; 0x38b4 <MCP2515_stReceiveCANmsg+0x110>
	{
		Local_stReceive.data[Local_u8Counter] = MCP2515_u8ReadBuffer[6 + Local_u8Counter];
    388c:	8a 81       	ldd	r24, Y+2	; 0x02
    388e:	48 2f       	mov	r20, r24
    3890:	50 e0       	ldi	r21, 0x00	; 0
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
    3894:	88 2f       	mov	r24, r24
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	06 96       	adiw	r24, 0x06	; 6
    389a:	fc 01       	movw	r30, r24
    389c:	e8 55       	subi	r30, 0x58	; 88
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	20 81       	ld	r18, Z
    38a2:	ce 01       	movw	r24, r28
    38a4:	07 96       	adiw	r24, 0x07	; 7
    38a6:	fc 01       	movw	r30, r24
    38a8:	e4 0f       	add	r30, r20
    38aa:	f5 1f       	adc	r31, r21
    38ac:	20 83       	st	Z, r18
	Local_stReceive.id = Local_stReceive.id << 3;
	uint8 Local_u8Hegazy = MCP2515_u8ReadBuffer[2];
	Local_stReceive.id |= Local_u8Hegazy >> 5;
	Local_stReceive.length = MCP2515_u8ReadBuffer[5] & 0x0F;

	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    38ae:	8a 81       	ldd	r24, Y+2	; 0x02
    38b0:	8f 5f       	subi	r24, 0xFF	; 255
    38b2:	8a 83       	std	Y+2, r24	; 0x02
    38b4:	8a 81       	ldd	r24, Y+2	; 0x02
    38b6:	88 30       	cpi	r24, 0x08	; 8
    38b8:	48 f3       	brcs	.-46     	; 0x388c <MCP2515_stReceiveCANmsg+0xe8>
	{
		Local_stReceive.data[Local_u8Counter] = MCP2515_u8ReadBuffer[6 + Local_u8Counter];
	}

	Local_stReceive.properties = GET_BIT(MCP2515_u8ReadBuffer[0],3);
    38ba:	80 91 a8 00 	lds	r24, 0x00A8
    38be:	86 95       	lsr	r24
    38c0:	86 95       	lsr	r24
    38c2:	86 95       	lsr	r24
    38c4:	81 70       	andi	r24, 0x01	; 1
    38c6:	88 8b       	std	Y+16, r24	; 0x10

	return Local_stReceive;
    38c8:	a9 89       	ldd	r26, Y+17	; 0x11
    38ca:	ba 89       	ldd	r27, Y+18	; 0x12
    38cc:	bc 8b       	std	Y+20, r27	; 0x14
    38ce:	ab 8b       	std	Y+19, r26	; 0x13
    38d0:	fe 01       	movw	r30, r28
    38d2:	33 96       	adiw	r30, 0x03	; 3
    38d4:	fe 8b       	std	Y+22, r31	; 0x16
    38d6:	ed 8b       	std	Y+21, r30	; 0x15
    38d8:	fe e0       	ldi	r31, 0x0E	; 14
    38da:	ff 8b       	std	Y+23, r31	; 0x17
    38dc:	ad 89       	ldd	r26, Y+21	; 0x15
    38de:	be 89       	ldd	r27, Y+22	; 0x16
    38e0:	0c 90       	ld	r0, X
    38e2:	ed 89       	ldd	r30, Y+21	; 0x15
    38e4:	fe 89       	ldd	r31, Y+22	; 0x16
    38e6:	31 96       	adiw	r30, 0x01	; 1
    38e8:	fe 8b       	std	Y+22, r31	; 0x16
    38ea:	ed 8b       	std	Y+21, r30	; 0x15
    38ec:	ab 89       	ldd	r26, Y+19	; 0x13
    38ee:	bc 89       	ldd	r27, Y+20	; 0x14
    38f0:	0c 92       	st	X, r0
    38f2:	eb 89       	ldd	r30, Y+19	; 0x13
    38f4:	fc 89       	ldd	r31, Y+20	; 0x14
    38f6:	31 96       	adiw	r30, 0x01	; 1
    38f8:	fc 8b       	std	Y+20, r31	; 0x14
    38fa:	eb 8b       	std	Y+19, r30	; 0x13
    38fc:	ff 89       	ldd	r31, Y+23	; 0x17
    38fe:	f1 50       	subi	r31, 0x01	; 1
    3900:	ff 8b       	std	Y+23, r31	; 0x17
    3902:	8f 89       	ldd	r24, Y+23	; 0x17
    3904:	88 23       	and	r24, r24
    3906:	51 f7       	brne	.-44     	; 0x38dc <MCP2515_stReceiveCANmsg+0x138>
}
    3908:	89 89       	ldd	r24, Y+17	; 0x11
    390a:	9a 89       	ldd	r25, Y+18	; 0x12
    390c:	67 96       	adiw	r28, 0x17	; 23
    390e:	0f b6       	in	r0, 0x3f	; 63
    3910:	f8 94       	cli
    3912:	de bf       	out	0x3e, r29	; 62
    3914:	0f be       	out	0x3f, r0	; 63
    3916:	cd bf       	out	0x3d, r28	; 61
    3918:	cf 91       	pop	r28
    391a:	df 91       	pop	r29
    391c:	1f 91       	pop	r17
    391e:	0f 91       	pop	r16
    3920:	08 95       	ret

00003922 <MCP2515_voidReceiveCANmsg2>:

void MCP2515_voidReceiveCANmsg2(void)
{
    3922:	0f 93       	push	r16
    3924:	1f 93       	push	r17
    3926:	df 93       	push	r29
    3928:	cf 93       	push	r28
    392a:	0f 92       	push	r0
    392c:	cd b7       	in	r28, 0x3d	; 61
    392e:	de b7       	in	r29, 0x3e	; 62
	MCP2515_voidChipSelect(SLAVE_CHOOSE);
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	uint8 Local_u8Counter;

	SPI_u8Transceive(INST_READ);
    3936:	83 e0       	ldi	r24, 0x03	; 3
    3938:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
	SPI_u8Transceive(RXB0CTRL);
    393c:	80 e6       	ldi	r24, 0x60	; 96
    393e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>

	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    3942:	19 82       	std	Y+1, r1	; 0x01
    3944:	0d c0       	rjmp	.+26     	; 0x3960 <MCP2515_voidReceiveCANmsg2+0x3e>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	08 2f       	mov	r16, r24
    394a:	10 e0       	ldi	r17, 0x00	; 0
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SPI_u8Transceive>
    3952:	f8 01       	movw	r30, r16
    3954:	e8 55       	subi	r30, 0x58	; 88
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	80 83       	st	Z, r24
	uint8 Local_u8Counter;

	SPI_u8Transceive(INST_READ);
	SPI_u8Transceive(RXB0CTRL);

	for(Local_u8Counter = 0; Local_u8Counter < 14; Local_u8Counter++)
    395a:	89 81       	ldd	r24, Y+1	; 0x01
    395c:	8f 5f       	subi	r24, 0xFF	; 255
    395e:	89 83       	std	Y+1, r24	; 0x01
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	8e 30       	cpi	r24, 0x0E	; 14
    3964:	80 f3       	brcs	.-32     	; 0x3946 <MCP2515_voidReceiveCANmsg2+0x24>
	{
		MCP2515_u8ReadBuffer[Local_u8Counter] = SPI_u8Transceive(0);
	}

	MCP2515_voidChipSelect(SLAVE_RELEASE);
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	0e 94 aa 19 	call	0x3354	; 0x3354 <MCP2515_voidChipSelect>

	MCP2515_voidWriteRegister(CANINTF, 0);
    396c:	8c e2       	ldi	r24, 0x2C	; 44
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <MCP2515_voidWriteRegister>
}
    3974:	0f 90       	pop	r0
    3976:	cf 91       	pop	r28
    3978:	df 91       	pop	r29
    397a:	1f 91       	pop	r17
    397c:	0f 91       	pop	r16
    397e:	08 95       	ret

00003980 <voidSendEnablePulse>:

/**
 * @brief Function to send enable pulse into the enable pin of the CLCD.
 */
static void voidSendEnablePulse(void)
{
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
    3988:	2e 97       	sbiw	r28, 0x0e	; 14
    398a:	0f b6       	in	r0, 0x3f	; 63
    398c:	f8 94       	cli
    398e:	de bf       	out	0x3e, r29	; 62
    3990:	0f be       	out	0x3f, r0	; 63
    3992:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8E_PIN, DIO_u8PIN_HIGH);
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	62 e0       	ldi	r22, 0x02	; 2
    3998:	41 e0       	ldi	r20, 0x01	; 1
    399a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	a0 e0       	ldi	r26, 0x00	; 0
    39a4:	b0 e4       	ldi	r27, 0x40	; 64
    39a6:	8b 87       	std	Y+11, r24	; 0x0b
    39a8:	9c 87       	std	Y+12, r25	; 0x0c
    39aa:	ad 87       	std	Y+13, r26	; 0x0d
    39ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	4a ef       	ldi	r20, 0xFA	; 250
    39bc:	54 e4       	ldi	r21, 0x44	; 68
    39be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	8f 83       	std	Y+7, r24	; 0x07
    39c8:	98 87       	std	Y+8, r25	; 0x08
    39ca:	a9 87       	std	Y+9, r26	; 0x09
    39cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ce:	6f 81       	ldd	r22, Y+7	; 0x07
    39d0:	78 85       	ldd	r23, Y+8	; 0x08
    39d2:	89 85       	ldd	r24, Y+9	; 0x09
    39d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e8       	ldi	r20, 0x80	; 128
    39dc:	5f e3       	ldi	r21, 0x3F	; 63
    39de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39e2:	88 23       	and	r24, r24
    39e4:	2c f4       	brge	.+10     	; 0x39f0 <voidSendEnablePulse+0x70>
		__ticks = 1;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	9e 83       	std	Y+6, r25	; 0x06
    39ec:	8d 83       	std	Y+5, r24	; 0x05
    39ee:	3f c0       	rjmp	.+126    	; 0x3a6e <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
    39f0:	6f 81       	ldd	r22, Y+7	; 0x07
    39f2:	78 85       	ldd	r23, Y+8	; 0x08
    39f4:	89 85       	ldd	r24, Y+9	; 0x09
    39f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	3f ef       	ldi	r19, 0xFF	; 255
    39fc:	4f e7       	ldi	r20, 0x7F	; 127
    39fe:	57 e4       	ldi	r21, 0x47	; 71
    3a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a04:	18 16       	cp	r1, r24
    3a06:	4c f5       	brge	.+82     	; 0x3a5a <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e2       	ldi	r20, 0x20	; 32
    3a16:	51 e4       	ldi	r21, 0x41	; 65
    3a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	bc 01       	movw	r22, r24
    3a22:	cd 01       	movw	r24, r26
    3a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	9e 83       	std	Y+6, r25	; 0x06
    3a2e:	8d 83       	std	Y+5, r24	; 0x05
    3a30:	0f c0       	rjmp	.+30     	; 0x3a50 <voidSendEnablePulse+0xd0>
    3a32:	88 ec       	ldi	r24, 0xC8	; 200
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	9c 83       	std	Y+4, r25	; 0x04
    3a38:	8b 83       	std	Y+3, r24	; 0x03
    3a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3e:	01 97       	sbiw	r24, 0x01	; 1
    3a40:	f1 f7       	brne	.-4      	; 0x3a3e <voidSendEnablePulse+0xbe>
    3a42:	9c 83       	std	Y+4, r25	; 0x04
    3a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a46:	8d 81       	ldd	r24, Y+5	; 0x05
    3a48:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4a:	01 97       	sbiw	r24, 0x01	; 1
    3a4c:	9e 83       	std	Y+6, r25	; 0x06
    3a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a50:	8d 81       	ldd	r24, Y+5	; 0x05
    3a52:	9e 81       	ldd	r25, Y+6	; 0x06
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	69 f7       	brne	.-38     	; 0x3a32 <voidSendEnablePulse+0xb2>
    3a58:	14 c0       	rjmp	.+40     	; 0x3a82 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5c:	78 85       	ldd	r23, Y+8	; 0x08
    3a5e:	89 85       	ldd	r24, Y+9	; 0x09
    3a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	9e 83       	std	Y+6, r25	; 0x06
    3a6c:	8d 83       	std	Y+5, r24	; 0x05
    3a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a70:	9e 81       	ldd	r25, Y+6	; 0x06
    3a72:	9a 83       	std	Y+2, r25	; 0x02
    3a74:	89 83       	std	Y+1, r24	; 0x01
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <voidSendEnablePulse+0xfa>
    3a7e:	9a 83       	std	Y+2, r25	; 0x02
    3a80:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 2 millisecond, it is enough time for lcd to implement any command*/
	_delay_ms(2);

	/*Clear enable*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8E_PIN, DIO_u8PIN_LOW);
    3a82:	80 e0       	ldi	r24, 0x00	; 0
    3a84:	62 e0       	ldi	r22, 0x02	; 2
    3a86:	40 e0       	ldi	r20, 0x00	; 0
    3a88:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
}
    3a8c:	2e 96       	adiw	r28, 0x0e	; 14
    3a8e:	0f b6       	in	r0, 0x3f	; 63
    3a90:	f8 94       	cli
    3a92:	de bf       	out	0x3e, r29	; 62
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	cd bf       	out	0x3d, r28	; 61
    3a98:	cf 91       	pop	r28
    3a9a:	df 91       	pop	r29
    3a9c:	08 95       	ret

00003a9e <voidSetLCDHalfDataPort>:
/**
 * @brief Function to set a nipple into the half data port.
 * @param Copy_u8Nipple
 */
static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
    3a9e:	df 93       	push	r29
    3aa0:	cf 93       	push	r28
    3aa2:	0f 92       	push	r0
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D4_PIN, GET_BIT(Copy_u8Nipple, 0));
    3aaa:	89 81       	ldd	r24, Y+1	; 0x01
    3aac:	98 2f       	mov	r25, r24
    3aae:	91 70       	andi	r25, 0x01	; 1
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	63 e0       	ldi	r22, 0x03	; 3
    3ab4:	49 2f       	mov	r20, r25
    3ab6:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D5_PIN, GET_BIT(Copy_u8Nipple, 1));
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	86 95       	lsr	r24
    3abe:	98 2f       	mov	r25, r24
    3ac0:	91 70       	andi	r25, 0x01	; 1
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	64 e0       	ldi	r22, 0x04	; 4
    3ac6:	49 2f       	mov	r20, r25
    3ac8:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D6_PIN, GET_BIT(Copy_u8Nipple, 2));
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
    3ace:	86 95       	lsr	r24
    3ad0:	86 95       	lsr	r24
    3ad2:	98 2f       	mov	r25, r24
    3ad4:	91 70       	andi	r25, 0x01	; 1
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	65 e0       	ldi	r22, 0x05	; 5
    3ada:	49 2f       	mov	r20, r25
    3adc:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT, CLCD_u8D7_PIN, GET_BIT(Copy_u8Nipple, 3));
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	86 95       	lsr	r24
    3ae4:	86 95       	lsr	r24
    3ae6:	86 95       	lsr	r24
    3ae8:	98 2f       	mov	r25, r24
    3aea:	91 70       	andi	r25, 0x01	; 1
    3aec:	80 e0       	ldi	r24, 0x00	; 0
    3aee:	66 e0       	ldi	r22, 0x06	; 6
    3af0:	49 2f       	mov	r20, r25
    3af2:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
}
    3af6:	0f 90       	pop	r0
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <CLCD_voidSendCmd>:
/**
 * @brief Function to send command order to the CLCD.
 * @param Copy_u8Cmd Parameter which take the number of the command as 1 byte
 */
void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	0f 92       	push	r0
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_LOW);
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	60 e0       	ldi	r22, 0x00	; 0
    3b0e:	40 e0       	ldi	r20, 0x00	; 0
    3b10:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RW_PIN, DIO_u8PIN_LOW);
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	61 e0       	ldi	r22, 0x01	; 1
    3b18:	40 e0       	ldi	r20, 0x00	; 0
    3b1a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd >> 4);
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	82 95       	swap	r24
    3b22:	8f 70       	andi	r24, 0x0F	; 15
    3b24:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    3b28:	0e 94 c0 1c 	call	0x3980	; 0x3980 <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd);
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    3b32:	0e 94 c0 1c 	call	0x3980	; 0x3980 <voidSendEnablePulse>

#endif

}
    3b36:	0f 90       	pop	r0
    3b38:	cf 91       	pop	r28
    3b3a:	df 91       	pop	r29
    3b3c:	08 95       	ret

00003b3e <CLCD_voidSendData>:
/**
 * @brief Function to send data to the CLCD.
 * @param Copy_c8Data Parameter which take 1 byte data to be set.
 */
void CLCD_voidSendData(char Copy_u8Data)
{
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	0f 92       	push	r0
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	89 83       	std	Y+1, r24	; 0x01

	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_HIGH);
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	60 e0       	ldi	r22, 0x00	; 0
    3b4e:	41 e0       	ldi	r20, 0x01	; 1
    3b50:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT, CLCD_u8RW_PIN, DIO_u8PIN_LOW);
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	61 e0       	ldi	r22, 0x01	; 1
    3b58:	40 e0       	ldi	r20, 0x00	; 0
    3b5a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Data >> 4);
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
    3b60:	82 95       	swap	r24
    3b62:	8f 70       	andi	r24, 0x0F	; 15
    3b64:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    3b68:	0e 94 c0 1c 	call	0x3980	; 0x3980 <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Data);
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    3b72:	0e 94 c0 1c 	call	0x3980	; 0x3980 <voidSendEnablePulse>

#endif
}
    3b76:	0f 90       	pop	r0
    3b78:	cf 91       	pop	r28
    3b7a:	df 91       	pop	r29
    3b7c:	08 95       	ret

00003b7e <CLCD_voidInit>:

/**
 * @brief Function to initialize the CLCD according to its configurations.
 */
void CLCD_voidInit(void)
{
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
    3b86:	2f 97       	sbiw	r28, 0x0f	; 15
    3b88:	0f b6       	in	r0, 0x3f	; 63
    3b8a:	f8 94       	cli
    3b8c:	de bf       	out	0x3e, r29	; 62
    3b8e:	0f be       	out	0x3f, r0	; 63
    3b90:	cd bf       	out	0x3d, r28	; 61
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	a0 e2       	ldi	r26, 0x20	; 32
    3b98:	b2 e4       	ldi	r27, 0x42	; 66
    3b9a:	8b 87       	std	Y+11, r24	; 0x0b
    3b9c:	9c 87       	std	Y+12, r25	; 0x0c
    3b9e:	ad 87       	std	Y+13, r26	; 0x0d
    3ba0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	4a ef       	ldi	r20, 0xFA	; 250
    3bb0:	54 e4       	ldi	r21, 0x44	; 68
    3bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	8f 83       	std	Y+7, r24	; 0x07
    3bbc:	98 87       	std	Y+8, r25	; 0x08
    3bbe:	a9 87       	std	Y+9, r26	; 0x09
    3bc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc4:	78 85       	ldd	r23, Y+8	; 0x08
    3bc6:	89 85       	ldd	r24, Y+9	; 0x09
    3bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e8       	ldi	r20, 0x80	; 128
    3bd0:	5f e3       	ldi	r21, 0x3F	; 63
    3bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bd6:	88 23       	and	r24, r24
    3bd8:	2c f4       	brge	.+10     	; 0x3be4 <CLCD_voidInit+0x66>
		__ticks = 1;
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	9e 83       	std	Y+6, r25	; 0x06
    3be0:	8d 83       	std	Y+5, r24	; 0x05
    3be2:	3f c0       	rjmp	.+126    	; 0x3c62 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    3be4:	6f 81       	ldd	r22, Y+7	; 0x07
    3be6:	78 85       	ldd	r23, Y+8	; 0x08
    3be8:	89 85       	ldd	r24, Y+9	; 0x09
    3bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	3f ef       	ldi	r19, 0xFF	; 255
    3bf0:	4f e7       	ldi	r20, 0x7F	; 127
    3bf2:	57 e4       	ldi	r21, 0x47	; 71
    3bf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bf8:	18 16       	cp	r1, r24
    3bfa:	4c f5       	brge	.+82     	; 0x3c4e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	40 e2       	ldi	r20, 0x20	; 32
    3c0a:	51 e4       	ldi	r21, 0x41	; 65
    3c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	bc 01       	movw	r22, r24
    3c16:	cd 01       	movw	r24, r26
    3c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	9e 83       	std	Y+6, r25	; 0x06
    3c22:	8d 83       	std	Y+5, r24	; 0x05
    3c24:	0f c0       	rjmp	.+30     	; 0x3c44 <CLCD_voidInit+0xc6>
    3c26:	88 ec       	ldi	r24, 0xC8	; 200
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	9c 83       	std	Y+4, r25	; 0x04
    3c2c:	8b 83       	std	Y+3, r24	; 0x03
    3c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c30:	9c 81       	ldd	r25, Y+4	; 0x04
    3c32:	01 97       	sbiw	r24, 0x01	; 1
    3c34:	f1 f7       	brne	.-4      	; 0x3c32 <CLCD_voidInit+0xb4>
    3c36:	9c 83       	std	Y+4, r25	; 0x04
    3c38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3e:	01 97       	sbiw	r24, 0x01	; 1
    3c40:	9e 83       	std	Y+6, r25	; 0x06
    3c42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c44:	8d 81       	ldd	r24, Y+5	; 0x05
    3c46:	9e 81       	ldd	r25, Y+6	; 0x06
    3c48:	00 97       	sbiw	r24, 0x00	; 0
    3c4a:	69 f7       	brne	.-38     	; 0x3c26 <CLCD_voidInit+0xa8>
    3c4c:	14 c0       	rjmp	.+40     	; 0x3c76 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c50:	78 85       	ldd	r23, Y+8	; 0x08
    3c52:	89 85       	ldd	r24, Y+9	; 0x09
    3c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	9e 83       	std	Y+6, r25	; 0x06
    3c60:	8d 83       	std	Y+5, r24	; 0x05
    3c62:	8d 81       	ldd	r24, Y+5	; 0x05
    3c64:	9e 81       	ldd	r25, Y+6	; 0x06
    3c66:	9a 83       	std	Y+2, r25	; 0x02
    3c68:	89 83       	std	Y+1, r24	; 0x01
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6e:	01 97       	sbiw	r24, 0x01	; 1
    3c70:	f1 f7       	brne	.-4      	; 0x3c6e <CLCD_voidInit+0xf0>
    3c72:	9a 83       	std	Y+2, r25	; 0x02
    3c74:	89 83       	std	Y+1, r24	; 0x01

	/*Send the command*/
	CLCD_voidSendCmd(Local_u8Command);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	CLCD_voidSendCmd(0b00100010);
    3c76:	82 e2       	ldi	r24, 0x22	; 34
    3c78:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <CLCD_voidSendCmd>

	/*If the font is configured by 5x11 change it*/
#if CLCD_FONT_SIZE == FONT_5x11
	voidSetLCDHalfDataPort(0b1100);
    3c7c:	8c e0       	ldi	r24, 0x0C	; 12
    3c7e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <voidSetLCDHalfDataPort>
#else
	voidSetLCDHalfDataPort(0b1000);
#endif

	voidSendEnablePulse();
    3c82:	0e 94 c0 1c 	call	0x3980	; 0x3980 <voidSendEnablePulse>
#endif

	/*Display on/off control: display, cursor and blink (Enable/Disable)*/
	Local_u8Command = 0b00001100;
    3c86:	8c e0       	ldi	r24, 0x0C	; 12
    3c88:	8f 87       	std	Y+15, r24	; 0x0f
	SET_BIT(Local_u8Command, 1);
#endif
#if CLCD_CURSOR_BLINK == ENABLED
	SET_BIT(Local_u8Command, 0);
#endif
	CLCD_voidSendCmd(Local_u8Command);
    3c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c8c:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <CLCD_voidSendCmd>

	/*Display Clear command*/
	CLCD_voidSendCmd(0b00000001);
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <CLCD_voidSendCmd>

	/*Entry mode set command*/
	CLCD_voidSendCmd(0b00000110);
    3c96:	86 e0       	ldi	r24, 0x06	; 6
    3c98:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <CLCD_voidSendCmd>
}
    3c9c:	2f 96       	adiw	r28, 0x0f	; 15
    3c9e:	0f b6       	in	r0, 0x3f	; 63
    3ca0:	f8 94       	cli
    3ca2:	de bf       	out	0x3e, r29	; 62
    3ca4:	0f be       	out	0x3f, r0	; 63
    3ca6:	cd bf       	out	0x3d, r28	; 61
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	08 95       	ret

00003cae <CLCD_voidClearDisplay>:

/**
 * @brief Function to clear the display.
 */
void CLCD_voidClearDisplay(void)
{
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	cd b7       	in	r28, 0x3d	; 61
    3cb4:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <CLCD_voidSendCmd>
}
    3cbc:	cf 91       	pop	r28
    3cbe:	df 91       	pop	r29
    3cc0:	08 95       	ret

00003cc2 <CLCD_u8SendString>:
 * @brief Function to send string to be printed on the CLCD.
 * @param Copy_ch8String Pointer to the string which needed to be printed.
 * @return Error State
 */
uint8 CLCD_u8SendString(const char *Copy_ch8String)
{
    3cc2:	df 93       	push	r29
    3cc4:	cf 93       	push	r28
    3cc6:	00 d0       	rcall	.+0      	; 0x3cc8 <CLCD_u8SendString+0x6>
    3cc8:	00 d0       	rcall	.+0      	; 0x3cca <CLCD_u8SendString+0x8>
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
    3cce:	9c 83       	std	Y+4, r25	; 0x04
    3cd0:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
    3cd2:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8Counter = 0;
    3cd4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ch8String != NULL)
    3cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	d9 f0       	breq	.+54     	; 0x3d14 <CLCD_u8SendString+0x52>
    3cde:	0e c0       	rjmp	.+28     	; 0x3cfc <CLCD_u8SendString+0x3a>
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_ch8String[Local_u8Counter]);
    3ce0:	89 81       	ldd	r24, Y+1	; 0x01
    3ce2:	28 2f       	mov	r18, r24
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cea:	fc 01       	movw	r30, r24
    3cec:	e2 0f       	add	r30, r18
    3cee:	f3 1f       	adc	r31, r19
    3cf0:	80 81       	ld	r24, Z
    3cf2:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <CLCD_voidSendData>
			Local_u8Counter++;
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	8f 5f       	subi	r24, 0xFF	; 255
    3cfa:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8Counter = 0;

	if(Copy_ch8String != NULL)
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
    3cfc:	89 81       	ldd	r24, Y+1	; 0x01
    3cfe:	28 2f       	mov	r18, r24
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	8b 81       	ldd	r24, Y+3	; 0x03
    3d04:	9c 81       	ldd	r25, Y+4	; 0x04
    3d06:	fc 01       	movw	r30, r24
    3d08:	e2 0f       	add	r30, r18
    3d0a:	f3 1f       	adc	r31, r19
    3d0c:	80 81       	ld	r24, Z
    3d0e:	88 23       	and	r24, r24
    3d10:	39 f7       	brne	.-50     	; 0x3ce0 <CLCD_u8SendString+0x1e>
    3d12:	02 c0       	rjmp	.+4      	; 0x3d18 <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    3d18:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	cf 91       	pop	r28
    3d24:	df 91       	pop	r29
    3d26:	08 95       	ret

00003d28 <CLCD_voidSendDecimalNumber>:
/**
 * @brief Function to print a decimal number into the CLCD.
 * @param Copy_s32Number Number wanted to be printed.
 */
void CLCD_voidSendDecimalNumber(sint32 Copy_s32Number)
{
    3d28:	0f 93       	push	r16
    3d2a:	1f 93       	push	r17
    3d2c:	df 93       	push	r29
    3d2e:	cf 93       	push	r28
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62
    3d34:	60 97       	sbiw	r28, 0x10	; 16
    3d36:	0f b6       	in	r0, 0x3f	; 63
    3d38:	f8 94       	cli
    3d3a:	de bf       	out	0x3e, r29	; 62
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	cd bf       	out	0x3d, r28	; 61
    3d40:	6d 87       	std	Y+13, r22	; 0x0d
    3d42:	7e 87       	std	Y+14, r23	; 0x0e
    3d44:	8f 87       	std	Y+15, r24	; 0x0f
    3d46:	98 8b       	std	Y+16, r25	; 0x10
	char Local_ch8Digit[10] = {0};
    3d48:	8a e0       	ldi	r24, 0x0A	; 10
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	33 96       	adiw	r30, 0x03	; 3
    3d4e:	df 01       	movw	r26, r30
    3d50:	98 2f       	mov	r25, r24
    3d52:	1d 92       	st	X+, r1
    3d54:	9a 95       	dec	r25
    3d56:	e9 f7       	brne	.-6      	; 0x3d52 <CLCD_voidSendDecimalNumber+0x2a>

	uint8 Local_u8ReverseCounter = 0u;
    3d58:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	if(Copy_s32Number == 0)
    3d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d5e:	af 85       	ldd	r26, Y+15	; 0x0f
    3d60:	b8 89       	ldd	r27, Y+16	; 0x10
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	a1 05       	cpc	r26, r1
    3d66:	b1 05       	cpc	r27, r1
    3d68:	21 f4       	brne	.+8      	; 0x3d72 <CLCD_voidSendDecimalNumber+0x4a>
	{
		CLCD_voidSendData('0');
    3d6a:	80 e3       	ldi	r24, 0x30	; 48
    3d6c:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <CLCD_voidSendData>
    3d70:	7b c0       	rjmp	.+246    	; 0x3e68 <CLCD_voidSendDecimalNumber+0x140>
	}
	else
	{
		/*Check for the negative sign*/
		if(Copy_s32Number < 0)
    3d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d76:	af 85       	ldd	r26, Y+15	; 0x0f
    3d78:	b8 89       	ldd	r27, Y+16	; 0x10
    3d7a:	bb 23       	and	r27, r27
    3d7c:	0c f0       	brlt	.+2      	; 0x3d80 <CLCD_voidSendDecimalNumber+0x58>
    3d7e:	54 c0       	rjmp	.+168    	; 0x3e28 <CLCD_voidSendDecimalNumber+0x100>
		{
			/*Print the negative sign to the lcd*/
			CLCD_voidSendData('-');
    3d80:	8d e2       	ldi	r24, 0x2D	; 45
    3d82:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <CLCD_voidSendData>

			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
    3d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d8a:	af 85       	ldd	r26, Y+15	; 0x0f
    3d8c:	b8 89       	ldd	r27, Y+16	; 0x10
    3d8e:	b0 95       	com	r27
    3d90:	a0 95       	com	r26
    3d92:	90 95       	com	r25
    3d94:	81 95       	neg	r24
    3d96:	9f 4f       	sbci	r25, 0xFF	; 255
    3d98:	af 4f       	sbci	r26, 0xFF	; 255
    3d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d9c:	8d 87       	std	Y+13, r24	; 0x0d
    3d9e:	9e 87       	std	Y+14, r25	; 0x0e
    3da0:	af 87       	std	Y+15, r26	; 0x0f
    3da2:	b8 8b       	std	Y+16, r27	; 0x10
    3da4:	41 c0       	rjmp	.+130    	; 0x3e28 <CLCD_voidSendDecimalNumber+0x100>
		{
			/*
			 * Extract every digit number to the array of characters,
			 * then translate it into ascii value through adding '0'
			 */
			Local_ch8Digit[Local_u8ReverseCounter] = (char) (Copy_s32Number % 10);
    3da6:	8a 81       	ldd	r24, Y+2	; 0x02
    3da8:	08 2f       	mov	r16, r24
    3daa:	10 e0       	ldi	r17, 0x00	; 0
    3dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db0:	af 85       	ldd	r26, Y+15	; 0x0f
    3db2:	b8 89       	ldd	r27, Y+16	; 0x10
    3db4:	2a e0       	ldi	r18, 0x0A	; 10
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	40 e0       	ldi	r20, 0x00	; 0
    3dba:	50 e0       	ldi	r21, 0x00	; 0
    3dbc:	bc 01       	movw	r22, r24
    3dbe:	cd 01       	movw	r24, r26
    3dc0:	0e 94 3c 21 	call	0x4278	; 0x4278 <__divmodsi4>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	28 2f       	mov	r18, r24
    3dca:	ce 01       	movw	r24, r28
    3dcc:	03 96       	adiw	r24, 0x03	; 3
    3dce:	fc 01       	movw	r30, r24
    3dd0:	e0 0f       	add	r30, r16
    3dd2:	f1 1f       	adc	r31, r17
    3dd4:	20 83       	st	Z, r18
			Local_ch8Digit[Local_u8ReverseCounter] = Local_ch8Digit[Local_u8ReverseCounter] + '0';
    3dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd8:	48 2f       	mov	r20, r24
    3dda:	50 e0       	ldi	r21, 0x00	; 0
    3ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dde:	28 2f       	mov	r18, r24
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	ce 01       	movw	r24, r28
    3de4:	03 96       	adiw	r24, 0x03	; 3
    3de6:	fc 01       	movw	r30, r24
    3de8:	e2 0f       	add	r30, r18
    3dea:	f3 1f       	adc	r31, r19
    3dec:	80 81       	ld	r24, Z
    3dee:	28 2f       	mov	r18, r24
    3df0:	20 5d       	subi	r18, 0xD0	; 208
    3df2:	ce 01       	movw	r24, r28
    3df4:	03 96       	adiw	r24, 0x03	; 3
    3df6:	fc 01       	movw	r30, r24
    3df8:	e4 0f       	add	r30, r20
    3dfa:	f5 1f       	adc	r31, r21
    3dfc:	20 83       	st	Z, r18

			Copy_s32Number = Copy_s32Number / 10;
    3dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e02:	af 85       	ldd	r26, Y+15	; 0x0f
    3e04:	b8 89       	ldd	r27, Y+16	; 0x10
    3e06:	2a e0       	ldi	r18, 0x0A	; 10
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	40 e0       	ldi	r20, 0x00	; 0
    3e0c:	50 e0       	ldi	r21, 0x00	; 0
    3e0e:	bc 01       	movw	r22, r24
    3e10:	cd 01       	movw	r24, r26
    3e12:	0e 94 3c 21 	call	0x4278	; 0x4278 <__divmodsi4>
    3e16:	da 01       	movw	r26, r20
    3e18:	c9 01       	movw	r24, r18
    3e1a:	8d 87       	std	Y+13, r24	; 0x0d
    3e1c:	9e 87       	std	Y+14, r25	; 0x0e
    3e1e:	af 87       	std	Y+15, r26	; 0x0f
    3e20:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8ReverseCounter++;
    3e22:	8a 81       	ldd	r24, Y+2	; 0x02
    3e24:	8f 5f       	subi	r24, 0xFF	; 255
    3e26:	8a 83       	std	Y+2, r24	; 0x02
			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
		}

		/*Extracting the number digits into array of characters*/
		while(Copy_s32Number > 0)
    3e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e2c:	af 85       	ldd	r26, Y+15	; 0x0f
    3e2e:	b8 89       	ldd	r27, Y+16	; 0x10
    3e30:	18 16       	cp	r1, r24
    3e32:	19 06       	cpc	r1, r25
    3e34:	1a 06       	cpc	r1, r26
    3e36:	1b 06       	cpc	r1, r27
    3e38:	0c f4       	brge	.+2      	; 0x3e3c <CLCD_voidSendDecimalNumber+0x114>
    3e3a:	b5 cf       	rjmp	.-150    	; 0x3da6 <CLCD_voidSendDecimalNumber+0x7e>
			Copy_s32Number = Copy_s32Number / 10;
			Local_u8ReverseCounter++;
		}

		/*Printing every character in the array until the end of the number*/
		Local_u8PrintCounter = Local_u8ReverseCounter;
    3e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3e:	89 83       	std	Y+1, r24	; 0x01
		do
		{
			CLCD_voidSendData(Local_ch8Digit[Local_u8PrintCounter - 1u]);
    3e40:	89 81       	ldd	r24, Y+1	; 0x01
    3e42:	88 2f       	mov	r24, r24
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	9c 01       	movw	r18, r24
    3e48:	21 50       	subi	r18, 0x01	; 1
    3e4a:	30 40       	sbci	r19, 0x00	; 0
    3e4c:	ce 01       	movw	r24, r28
    3e4e:	03 96       	adiw	r24, 0x03	; 3
    3e50:	fc 01       	movw	r30, r24
    3e52:	e2 0f       	add	r30, r18
    3e54:	f3 1f       	adc	r31, r19
    3e56:	80 81       	ld	r24, Z
    3e58:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <CLCD_voidSendData>
			Local_u8PrintCounter--;
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	81 50       	subi	r24, 0x01	; 1
    3e60:	89 83       	std	Y+1, r24	; 0x01
		}
		while(Local_u8PrintCounter > 0u);
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
    3e64:	88 23       	and	r24, r24
    3e66:	61 f7       	brne	.-40     	; 0x3e40 <CLCD_voidSendDecimalNumber+0x118>
	}
}
    3e68:	60 96       	adiw	r28, 0x10	; 16
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	f8 94       	cli
    3e6e:	de bf       	out	0x3e, r29	; 62
    3e70:	0f be       	out	0x3f, r0	; 63
    3e72:	cd bf       	out	0x3d, r28	; 61
    3e74:	cf 91       	pop	r28
    3e76:	df 91       	pop	r29
    3e78:	1f 91       	pop	r17
    3e7a:	0f 91       	pop	r16
    3e7c:	08 95       	ret

00003e7e <CLCD_voidSendBinaryNumber>:
/**
 * @brief Function that takes decimal number and print its binary representation into the CLCD.
 * @param Copy_s16Number Number wanted to be printed.
 */
void CLCD_voidSendBinaryNumber(sint16 Copy_s16Number)
{
    3e7e:	df 93       	push	r29
    3e80:	cf 93       	push	r28
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    3e86:	a4 97       	sbiw	r28, 0x24	; 36
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	cd bf       	out	0x3d, r28	; 61
    3e92:	9c a3       	std	Y+36, r25	; 0x24
    3e94:	8b a3       	std	Y+35, r24	; 0x23
	uint8 Local_u8BinaryDigits[32] = {0u};
    3e96:	80 e2       	ldi	r24, 0x20	; 32
    3e98:	fe 01       	movw	r30, r28
    3e9a:	33 96       	adiw	r30, 0x03	; 3
    3e9c:	df 01       	movw	r26, r30
    3e9e:	98 2f       	mov	r25, r24
    3ea0:	1d 92       	st	X+, r1
    3ea2:	9a 95       	dec	r25
    3ea4:	e9 f7       	brne	.-6      	; 0x3ea0 <CLCD_voidSendBinaryNumber+0x22>

	uint8 Local_u8ReverseCounter = 0u;
    3ea6:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");
    3ea8:	80 e6       	ldi	r24, 0x60	; 96
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <CLCD_u8SendString>

	/*Loading zeros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    3eb0:	1a 82       	std	Y+2, r1	; 0x02
    3eb2:	23 c0       	rjmp	.+70     	; 0x3efa <CLCD_voidSendBinaryNumber+0x7c>
	{
		if((Copy_s16Number & 1) == 1)
    3eb4:	8b a1       	ldd	r24, Y+35	; 0x23
    3eb6:	9c a1       	ldd	r25, Y+36	; 0x24
    3eb8:	81 70       	andi	r24, 0x01	; 1
    3eba:	90 70       	andi	r25, 0x00	; 0
    3ebc:	88 23       	and	r24, r24
    3ebe:	59 f0       	breq	.+22     	; 0x3ed6 <CLCD_voidSendBinaryNumber+0x58>
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 1u;
    3ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec2:	28 2f       	mov	r18, r24
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	ce 01       	movw	r24, r28
    3ec8:	03 96       	adiw	r24, 0x03	; 3
    3eca:	fc 01       	movw	r30, r24
    3ecc:	e2 0f       	add	r30, r18
    3ece:	f3 1f       	adc	r31, r19
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	80 83       	st	Z, r24
    3ed4:	09 c0       	rjmp	.+18     	; 0x3ee8 <CLCD_voidSendBinaryNumber+0x6a>
		}
		else
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 0u;
    3ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed8:	28 2f       	mov	r18, r24
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	ce 01       	movw	r24, r28
    3ede:	03 96       	adiw	r24, 0x03	; 3
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	e2 0f       	add	r30, r18
    3ee4:	f3 1f       	adc	r31, r19
    3ee6:	10 82       	st	Z, r1
		}
		Copy_s16Number = Copy_s16Number >> 1;
    3ee8:	8b a1       	ldd	r24, Y+35	; 0x23
    3eea:	9c a1       	ldd	r25, Y+36	; 0x24
    3eec:	95 95       	asr	r25
    3eee:	87 95       	ror	r24
    3ef0:	9c a3       	std	Y+36, r25	; 0x24
    3ef2:	8b a3       	std	Y+35, r24	; 0x23

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");

	/*Loading zeros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    3ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef6:	8f 5f       	subi	r24, 0xFF	; 255
    3ef8:	8a 83       	std	Y+2, r24	; 0x02
    3efa:	8a 81       	ldd	r24, Y+2	; 0x02
    3efc:	80 31       	cpi	r24, 0x10	; 16
    3efe:	d0 f2       	brcs	.-76     	; 0x3eb4 <CLCD_voidSendBinaryNumber+0x36>
		}
		Copy_s16Number = Copy_s16Number >> 1;
	}

	/*Go to the next line in the lcd*/
	CLCD_u8GoToXY(0,1);
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	61 e0       	ldi	r22, 0x01	; 1
    3f04:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <CLCD_u8GoToXY>

	/*Printing every character in the array until the end of the number*/
	Local_u8PrintCounter = 16;
    3f08:	80 e1       	ldi	r24, 0x10	; 16
    3f0a:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		if(Local_u8BinaryDigits[Local_u8PrintCounter - 1] == 0)
    3f0c:	89 81       	ldd	r24, Y+1	; 0x01
    3f0e:	88 2f       	mov	r24, r24
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	9c 01       	movw	r18, r24
    3f14:	21 50       	subi	r18, 0x01	; 1
    3f16:	30 40       	sbci	r19, 0x00	; 0
    3f18:	ce 01       	movw	r24, r28
    3f1a:	03 96       	adiw	r24, 0x03	; 3
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	e2 0f       	add	r30, r18
    3f20:	f3 1f       	adc	r31, r19
    3f22:	80 81       	ld	r24, Z
    3f24:	88 23       	and	r24, r24
    3f26:	21 f4       	brne	.+8      	; 0x3f30 <CLCD_voidSendBinaryNumber+0xb2>
		{
			CLCD_voidSendData('0');
    3f28:	80 e3       	ldi	r24, 0x30	; 48
    3f2a:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <CLCD_voidSendData>
    3f2e:	03 c0       	rjmp	.+6      	; 0x3f36 <CLCD_voidSendBinaryNumber+0xb8>
		}
		else
		{
			CLCD_voidSendData('1');
    3f30:	81 e3       	ldi	r24, 0x31	; 49
    3f32:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <CLCD_voidSendData>
		}

		Local_u8PrintCounter--;
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	81 50       	subi	r24, 0x01	; 1
    3f3a:	89 83       	std	Y+1, r24	; 0x01
	}
	while(Local_u8PrintCounter > 0);
    3f3c:	89 81       	ldd	r24, Y+1	; 0x01
    3f3e:	88 23       	and	r24, r24
    3f40:	29 f7       	brne	.-54     	; 0x3f0c <CLCD_voidSendBinaryNumber+0x8e>
}
    3f42:	a4 96       	adiw	r28, 0x24	; 36
    3f44:	0f b6       	in	r0, 0x3f	; 63
    3f46:	f8 94       	cli
    3f48:	de bf       	out	0x3e, r29	; 62
    3f4a:	0f be       	out	0x3f, r0	; 63
    3f4c:	cd bf       	out	0x3d, r28	; 61
    3f4e:	cf 91       	pop	r28
    3f50:	df 91       	pop	r29
    3f52:	08 95       	ret

00003f54 <CLCD_voidSendHexaNumber>:
/**
 * @brief Function that takes decimal number and print its hexadecimal representation into the CLCD.
 * @param Copy_s32Number Number wanted to be printed.
 */
void CLCD_voidSendHexaNumber(sint32 Copy_s32Number)
{
    3f54:	df 93       	push	r29
    3f56:	cf 93       	push	r28
    3f58:	cd b7       	in	r28, 0x3d	; 61
    3f5a:	de b7       	in	r29, 0x3e	; 62
    3f5c:	a5 97       	sbiw	r28, 0x25	; 37
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	f8 94       	cli
    3f62:	de bf       	out	0x3e, r29	; 62
    3f64:	0f be       	out	0x3f, r0	; 63
    3f66:	cd bf       	out	0x3d, r28	; 61
    3f68:	6d 8f       	std	Y+29, r22	; 0x1d
    3f6a:	7e 8f       	std	Y+30, r23	; 0x1e
    3f6c:	8f 8f       	std	Y+31, r24	; 0x1f
    3f6e:	98 a3       	std	Y+32, r25	; 0x20
	/*Define Variables*/
	char Local_ch8HexaTable[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
									'A', 'B', 'C', 'D', 'E', 'F'};
    3f70:	ce 01       	movw	r24, r28
    3f72:	05 96       	adiw	r24, 0x05	; 5
    3f74:	9a a3       	std	Y+34, r25	; 0x22
    3f76:	89 a3       	std	Y+33, r24	; 0x21
    3f78:	ee e6       	ldi	r30, 0x6E	; 110
    3f7a:	f0 e0       	ldi	r31, 0x00	; 0
    3f7c:	fc a3       	std	Y+36, r31	; 0x24
    3f7e:	eb a3       	std	Y+35, r30	; 0x23
    3f80:	f0 e1       	ldi	r31, 0x10	; 16
    3f82:	fd a3       	std	Y+37, r31	; 0x25
    3f84:	eb a1       	ldd	r30, Y+35	; 0x23
    3f86:	fc a1       	ldd	r31, Y+36	; 0x24
    3f88:	00 80       	ld	r0, Z
    3f8a:	8b a1       	ldd	r24, Y+35	; 0x23
    3f8c:	9c a1       	ldd	r25, Y+36	; 0x24
    3f8e:	01 96       	adiw	r24, 0x01	; 1
    3f90:	9c a3       	std	Y+36, r25	; 0x24
    3f92:	8b a3       	std	Y+35, r24	; 0x23
    3f94:	e9 a1       	ldd	r30, Y+33	; 0x21
    3f96:	fa a1       	ldd	r31, Y+34	; 0x22
    3f98:	00 82       	st	Z, r0
    3f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    3f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    3f9e:	01 96       	adiw	r24, 0x01	; 1
    3fa0:	9a a3       	std	Y+34, r25	; 0x22
    3fa2:	89 a3       	std	Y+33, r24	; 0x21
    3fa4:	9d a1       	ldd	r25, Y+37	; 0x25
    3fa6:	91 50       	subi	r25, 0x01	; 1
    3fa8:	9d a3       	std	Y+37, r25	; 0x25
    3faa:	ed a1       	ldd	r30, Y+37	; 0x25
    3fac:	ee 23       	and	r30, r30
    3fae:	51 f7       	brne	.-44     	; 0x3f84 <CLCD_voidSendHexaNumber+0x30>
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    3fb0:	1b 82       	std	Y+3, r1	; 0x03
    3fb2:	20 c0       	rjmp	.+64     	; 0x3ff4 <CLCD_voidSendHexaNumber+0xa0>
	{
		/*Get the least for bits of the number*/
		Local_u8LeastFourBits = Copy_s32Number & 0x0f;
    3fb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fb6:	8f 70       	andi	r24, 0x0F	; 15
    3fb8:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number = Copy_s32Number >> 4;
    3fba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fbc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3fbe:	af 8d       	ldd	r26, Y+31	; 0x1f
    3fc0:	b8 a1       	ldd	r27, Y+32	; 0x20
    3fc2:	68 94       	set
    3fc4:	13 f8       	bld	r1, 3
    3fc6:	b5 95       	asr	r27
    3fc8:	a7 95       	ror	r26
    3fca:	97 95       	ror	r25
    3fcc:	87 95       	ror	r24
    3fce:	16 94       	lsr	r1
    3fd0:	d1 f7       	brne	.-12     	; 0x3fc6 <CLCD_voidSendHexaNumber+0x72>
    3fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    3fd4:	9e 8f       	std	Y+30, r25	; 0x1e
    3fd6:	af 8f       	std	Y+31, r26	; 0x1f
    3fd8:	b8 a3       	std	Y+32, r27	; 0x20

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
    3fda:	8b 81       	ldd	r24, Y+3	; 0x03
    3fdc:	28 2f       	mov	r18, r24
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	ce 01       	movw	r24, r28
    3fe2:	45 96       	adiw	r24, 0x15	; 21
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	e2 0f       	add	r30, r18
    3fe8:	f3 1f       	adc	r31, r19
    3fea:	8a 81       	ldd	r24, Y+2	; 0x02
    3fec:	80 83       	st	Z, r24
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    3fee:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff0:	8f 5f       	subi	r24, 0xFF	; 255
    3ff2:	8b 83       	std	Y+3, r24	; 0x03
    3ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff6:	88 30       	cpi	r24, 0x08	; 8
    3ff8:	e8 f2       	brcs	.-70     	; 0x3fb4 <CLCD_voidSendHexaNumber+0x60>

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
	}

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");
    3ffa:	83 e6       	ldi	r24, 0x63	; 99
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <CLCD_u8SendString>

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    4002:	87 e0       	ldi	r24, 0x07	; 7
    4004:	8c 83       	std	Y+4, r24	; 0x04
    4006:	1a c0       	rjmp	.+52     	; 0x403c <CLCD_voidSendHexaNumber+0xe8>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
    4008:	8c 81       	ldd	r24, Y+4	; 0x04
    400a:	28 2f       	mov	r18, r24
    400c:	33 27       	eor	r19, r19
    400e:	27 fd       	sbrc	r18, 7
    4010:	30 95       	com	r19
    4012:	ce 01       	movw	r24, r28
    4014:	45 96       	adiw	r24, 0x15	; 21
    4016:	fc 01       	movw	r30, r24
    4018:	e2 0f       	add	r30, r18
    401a:	f3 1f       	adc	r31, r19
    401c:	80 81       	ld	r24, Z
    401e:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
    4020:	89 81       	ldd	r24, Y+1	; 0x01
    4022:	28 2f       	mov	r18, r24
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	ce 01       	movw	r24, r28
    4028:	05 96       	adiw	r24, 0x05	; 5
    402a:	fc 01       	movw	r30, r24
    402c:	e2 0f       	add	r30, r18
    402e:	f3 1f       	adc	r31, r19
    4030:	80 81       	ld	r24, Z
    4032:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <CLCD_voidSendData>

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    4036:	8c 81       	ldd	r24, Y+4	; 0x04
    4038:	81 50       	subi	r24, 0x01	; 1
    403a:	8c 83       	std	Y+4, r24	; 0x04
    403c:	8c 81       	ldd	r24, Y+4	; 0x04
    403e:	88 23       	and	r24, r24
    4040:	1c f7       	brge	.-58     	; 0x4008 <CLCD_voidSendHexaNumber+0xb4>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
	}
}
    4042:	a5 96       	adiw	r28, 0x25	; 37
    4044:	0f b6       	in	r0, 0x3f	; 63
    4046:	f8 94       	cli
    4048:	de bf       	out	0x3e, r29	; 62
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	cd bf       	out	0x3d, r28	; 61
    404e:	cf 91       	pop	r28
    4050:	df 91       	pop	r29
    4052:	08 95       	ret

00004054 <CLCD_voidSendSpecialCharacter>:
 * @param Copy_u8PatternNum Number that represent the memory location of the special character.
 * @param Copy_u8XPos X position to print the special character.
 * @param Copy_u8YPos Y position to print the special character.
 */
void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8PatternArr, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    4054:	df 93       	push	r29
    4056:	cf 93       	push	r28
    4058:	cd b7       	in	r28, 0x3d	; 61
    405a:	de b7       	in	r29, 0x3e	; 62
    405c:	27 97       	sbiw	r28, 0x07	; 7
    405e:	0f b6       	in	r0, 0x3f	; 63
    4060:	f8 94       	cli
    4062:	de bf       	out	0x3e, r29	; 62
    4064:	0f be       	out	0x3f, r0	; 63
    4066:	cd bf       	out	0x3d, r28	; 61
    4068:	9c 83       	std	Y+4, r25	; 0x04
    406a:	8b 83       	std	Y+3, r24	; 0x03
    406c:	6d 83       	std	Y+5, r22	; 0x05
    406e:	4e 83       	std	Y+6, r20	; 0x06
    4070:	2f 83       	std	Y+7, r18	; 0x07
	/*Define Variables*/
	uint8 Local_u8CGRAMAdd = Copy_u8PatternNum * 8u;
    4072:	8d 81       	ldd	r24, Y+5	; 0x05
    4074:	88 2f       	mov	r24, r24
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	88 0f       	add	r24, r24
    407a:	99 1f       	adc	r25, r25
    407c:	88 0f       	add	r24, r24
    407e:	99 1f       	adc	r25, r25
    4080:	88 0f       	add	r24, r24
    4082:	99 1f       	adc	r25, r25
    4084:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter;

	/*Set bit 6 in CGRAMAdd for CGRAM Address command standard*/
	SET_BIT(Local_u8CGRAMAdd, 6);
    4086:	8a 81       	ldd	r24, Y+2	; 0x02
    4088:	80 64       	ori	r24, 0x40	; 64
    408a:	8a 83       	std	Y+2, r24	; 0x02

	/*Send the address command to CLCD*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    408c:	8a 81       	ldd	r24, Y+2	; 0x02
    408e:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <CLCD_voidSendCmd>

	/*Send the pattern to the CLCD*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    4092:	19 82       	std	Y+1, r1	; 0x01
    4094:	0e c0       	rjmp	.+28     	; 0x40b2 <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8PatternArr[Local_u8Counter]);
    4096:	89 81       	ldd	r24, Y+1	; 0x01
    4098:	28 2f       	mov	r18, r24
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	8b 81       	ldd	r24, Y+3	; 0x03
    409e:	9c 81       	ldd	r25, Y+4	; 0x04
    40a0:	fc 01       	movw	r30, r24
    40a2:	e2 0f       	add	r30, r18
    40a4:	f3 1f       	adc	r31, r19
    40a6:	80 81       	ld	r24, Z
    40a8:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <CLCD_voidSendData>

	/*Send the address command to CLCD*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Send the pattern to the CLCD*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	8f 5f       	subi	r24, 0xFF	; 255
    40b0:	89 83       	std	Y+1, r24	; 0x01
    40b2:	89 81       	ldd	r24, Y+1	; 0x01
    40b4:	88 30       	cpi	r24, 0x08	; 8
    40b6:	78 f3       	brcs	.-34     	; 0x4096 <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8PatternArr[Local_u8Counter]);
	}

	/*Go to DDRAM Address to display the pattern*/
	CLCD_u8GoToXY(Copy_u8XPos, Copy_u8YPos);
    40b8:	8e 81       	ldd	r24, Y+6	; 0x06
    40ba:	6f 81       	ldd	r22, Y+7	; 0x07
    40bc:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <CLCD_u8GoToXY>

	/*Display the pattern from CGRAM to DDRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    40c0:	8d 81       	ldd	r24, Y+5	; 0x05
    40c2:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <CLCD_voidSendData>
}
    40c6:	27 96       	adiw	r28, 0x07	; 7
    40c8:	0f b6       	in	r0, 0x3f	; 63
    40ca:	f8 94       	cli
    40cc:	de bf       	out	0x3e, r29	; 62
    40ce:	0f be       	out	0x3f, r0	; 63
    40d0:	cd bf       	out	0x3d, r28	; 61
    40d2:	cf 91       	pop	r28
    40d4:	df 91       	pop	r29
    40d6:	08 95       	ret

000040d8 <CLCD_u8GoToXY>:
 * @param Copy_u8XPos X position of the new particular position.
 * @param Copy_u8YPos Y position of the new particular position.
 * @return Error state.
 */
uint8 CLCD_u8GoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    40d8:	df 93       	push	r29
    40da:	cf 93       	push	r28
    40dc:	00 d0       	rcall	.+0      	; 0x40de <CLCD_u8GoToXY+0x6>
    40de:	00 d0       	rcall	.+0      	; 0x40e0 <CLCD_u8GoToXY+0x8>
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	8b 83       	std	Y+3, r24	; 0x03
    40e6:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    40e8:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8DDRamAdd;

	/*Configure the address of DDRam*/
	if(Copy_u8YPos == 0u)
    40ea:	8c 81       	ldd	r24, Y+4	; 0x04
    40ec:	88 23       	and	r24, r24
    40ee:	19 f4       	brne	.+6      	; 0x40f6 <CLCD_u8GoToXY+0x1e>
	{
		Local_u8DDRamAdd = 0x00 + Copy_u8XPos;
    40f0:	8b 81       	ldd	r24, Y+3	; 0x03
    40f2:	89 83       	std	Y+1, r24	; 0x01
    40f4:	09 c0       	rjmp	.+18     	; 0x4108 <CLCD_u8GoToXY+0x30>
	}
	else if(Copy_u8YPos == 1u)
    40f6:	8c 81       	ldd	r24, Y+4	; 0x04
    40f8:	81 30       	cpi	r24, 0x01	; 1
    40fa:	21 f4       	brne	.+8      	; 0x4104 <CLCD_u8GoToXY+0x2c>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    40fc:	8b 81       	ldd	r24, Y+3	; 0x03
    40fe:	80 5c       	subi	r24, 0xC0	; 192
    4100:	89 83       	std	Y+1, r24	; 0x01
    4102:	02 c0       	rjmp	.+4      	; 0x4108 <CLCD_u8GoToXY+0x30>
	}
	else
	{
		Local_u8ErrorState = NOK;
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Send DDRam Set Address command to lcd*/
	SET_BIT(Local_u8DDRamAdd,7);
    4108:	89 81       	ldd	r24, Y+1	; 0x01
    410a:	80 68       	ori	r24, 0x80	; 128
    410c:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    410e:	89 81       	ldd	r24, Y+1	; 0x01
    4110:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <CLCD_voidSendCmd>

	return Local_u8ErrorState;
    4114:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4116:	0f 90       	pop	r0
    4118:	0f 90       	pop	r0
    411a:	0f 90       	pop	r0
    411c:	0f 90       	pop	r0
    411e:	cf 91       	pop	r28
    4120:	df 91       	pop	r29
    4122:	08 95       	ret

00004124 <LIBRARY_s32Mapping>:
 * @param Copy_s32InputValue	Input value.
 * @return	Output Value
 */
sint32 LIBRARY_s32Mapping(sint32 Copy_s32InputRangeMin, sint32 Copy_s32InputRangeMax,
		sint32 Copy_s32OutputRangeMin, sint32 Copy_s32OutputRangeMax, sint32 Copy_s32InputValue)
{
    4124:	af 92       	push	r10
    4126:	bf 92       	push	r11
    4128:	cf 92       	push	r12
    412a:	df 92       	push	r13
    412c:	ef 92       	push	r14
    412e:	ff 92       	push	r15
    4130:	0f 93       	push	r16
    4132:	1f 93       	push	r17
    4134:	df 93       	push	r29
    4136:	cf 93       	push	r28
    4138:	cd b7       	in	r28, 0x3d	; 61
    413a:	de b7       	in	r29, 0x3e	; 62
    413c:	64 97       	sbiw	r28, 0x14	; 20
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	6d 83       	std	Y+5, r22	; 0x05
    414a:	7e 83       	std	Y+6, r23	; 0x06
    414c:	8f 83       	std	Y+7, r24	; 0x07
    414e:	98 87       	std	Y+8, r25	; 0x08
    4150:	29 87       	std	Y+9, r18	; 0x09
    4152:	3a 87       	std	Y+10, r19	; 0x0a
    4154:	4b 87       	std	Y+11, r20	; 0x0b
    4156:	5c 87       	std	Y+12, r21	; 0x0c
    4158:	ed 86       	std	Y+13, r14	; 0x0d
    415a:	fe 86       	std	Y+14, r15	; 0x0e
    415c:	0f 87       	std	Y+15, r16	; 0x0f
    415e:	18 8b       	std	Y+16, r17	; 0x10
    4160:	a9 8a       	std	Y+17, r10	; 0x11
    4162:	ba 8a       	std	Y+18, r11	; 0x12
    4164:	cb 8a       	std	Y+19, r12	; 0x13
    4166:	dc 8a       	std	Y+20, r13	; 0x14
	/*Define Variables*/
	sint32 Local_s32OutputValue = 0;
    4168:	19 82       	std	Y+1, r1	; 0x01
    416a:	1a 82       	std	Y+2, r1	; 0x02
    416c:	1b 82       	std	Y+3, r1	; 0x03
    416e:	1c 82       	std	Y+4, r1	; 0x04

	/*Calculate the output value*/
	Local_s32OutputValue = (Copy_s32OutputRangeMax - Copy_s32OutputRangeMin) * (Copy_s32InputValue - Copy_s32InputRangeMin);
    4170:	29 89       	ldd	r18, Y+17	; 0x11
    4172:	3a 89       	ldd	r19, Y+18	; 0x12
    4174:	4b 89       	ldd	r20, Y+19	; 0x13
    4176:	5c 89       	ldd	r21, Y+20	; 0x14
    4178:	8d 85       	ldd	r24, Y+13	; 0x0d
    417a:	9e 85       	ldd	r25, Y+14	; 0x0e
    417c:	af 85       	ldd	r26, Y+15	; 0x0f
    417e:	b8 89       	ldd	r27, Y+16	; 0x10
    4180:	79 01       	movw	r14, r18
    4182:	8a 01       	movw	r16, r20
    4184:	e8 1a       	sub	r14, r24
    4186:	f9 0a       	sbc	r15, r25
    4188:	0a 0b       	sbc	r16, r26
    418a:	1b 0b       	sbc	r17, r27
    418c:	29 a1       	ldd	r18, Y+33	; 0x21
    418e:	3a a1       	ldd	r19, Y+34	; 0x22
    4190:	4b a1       	ldd	r20, Y+35	; 0x23
    4192:	5c a1       	ldd	r21, Y+36	; 0x24
    4194:	8d 81       	ldd	r24, Y+5	; 0x05
    4196:	9e 81       	ldd	r25, Y+6	; 0x06
    4198:	af 81       	ldd	r26, Y+7	; 0x07
    419a:	b8 85       	ldd	r27, Y+8	; 0x08
    419c:	28 1b       	sub	r18, r24
    419e:	39 0b       	sbc	r19, r25
    41a0:	4a 0b       	sbc	r20, r26
    41a2:	5b 0b       	sbc	r21, r27
    41a4:	c8 01       	movw	r24, r16
    41a6:	b7 01       	movw	r22, r14
    41a8:	0e 94 1d 21 	call	0x423a	; 0x423a <__mulsi3>
    41ac:	dc 01       	movw	r26, r24
    41ae:	cb 01       	movw	r24, r22
    41b0:	89 83       	std	Y+1, r24	; 0x01
    41b2:	9a 83       	std	Y+2, r25	; 0x02
    41b4:	ab 83       	std	Y+3, r26	; 0x03
    41b6:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue / (Copy_s32InputRangeMax - Copy_s32InputRangeMin);
    41b8:	29 85       	ldd	r18, Y+9	; 0x09
    41ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    41bc:	4b 85       	ldd	r20, Y+11	; 0x0b
    41be:	5c 85       	ldd	r21, Y+12	; 0x0c
    41c0:	8d 81       	ldd	r24, Y+5	; 0x05
    41c2:	9e 81       	ldd	r25, Y+6	; 0x06
    41c4:	af 81       	ldd	r26, Y+7	; 0x07
    41c6:	b8 85       	ldd	r27, Y+8	; 0x08
    41c8:	28 1b       	sub	r18, r24
    41ca:	39 0b       	sbc	r19, r25
    41cc:	4a 0b       	sbc	r20, r26
    41ce:	5b 0b       	sbc	r21, r27
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	9a 81       	ldd	r25, Y+2	; 0x02
    41d4:	ab 81       	ldd	r26, Y+3	; 0x03
    41d6:	bc 81       	ldd	r27, Y+4	; 0x04
    41d8:	bc 01       	movw	r22, r24
    41da:	cd 01       	movw	r24, r26
    41dc:	0e 94 3c 21 	call	0x4278	; 0x4278 <__divmodsi4>
    41e0:	da 01       	movw	r26, r20
    41e2:	c9 01       	movw	r24, r18
    41e4:	89 83       	std	Y+1, r24	; 0x01
    41e6:	9a 83       	std	Y+2, r25	; 0x02
    41e8:	ab 83       	std	Y+3, r26	; 0x03
    41ea:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue + Copy_s32OutputRangeMin;
    41ec:	29 81       	ldd	r18, Y+1	; 0x01
    41ee:	3a 81       	ldd	r19, Y+2	; 0x02
    41f0:	4b 81       	ldd	r20, Y+3	; 0x03
    41f2:	5c 81       	ldd	r21, Y+4	; 0x04
    41f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    41f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    41f8:	af 85       	ldd	r26, Y+15	; 0x0f
    41fa:	b8 89       	ldd	r27, Y+16	; 0x10
    41fc:	82 0f       	add	r24, r18
    41fe:	93 1f       	adc	r25, r19
    4200:	a4 1f       	adc	r26, r20
    4202:	b5 1f       	adc	r27, r21
    4204:	89 83       	std	Y+1, r24	; 0x01
    4206:	9a 83       	std	Y+2, r25	; 0x02
    4208:	ab 83       	std	Y+3, r26	; 0x03
    420a:	bc 83       	std	Y+4, r27	; 0x04

	return Local_s32OutputValue;
    420c:	89 81       	ldd	r24, Y+1	; 0x01
    420e:	9a 81       	ldd	r25, Y+2	; 0x02
    4210:	ab 81       	ldd	r26, Y+3	; 0x03
    4212:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4214:	bc 01       	movw	r22, r24
    4216:	cd 01       	movw	r24, r26
    4218:	64 96       	adiw	r28, 0x14	; 20
    421a:	0f b6       	in	r0, 0x3f	; 63
    421c:	f8 94       	cli
    421e:	de bf       	out	0x3e, r29	; 62
    4220:	0f be       	out	0x3f, r0	; 63
    4222:	cd bf       	out	0x3d, r28	; 61
    4224:	cf 91       	pop	r28
    4226:	df 91       	pop	r29
    4228:	1f 91       	pop	r17
    422a:	0f 91       	pop	r16
    422c:	ff 90       	pop	r15
    422e:	ef 90       	pop	r14
    4230:	df 90       	pop	r13
    4232:	cf 90       	pop	r12
    4234:	bf 90       	pop	r11
    4236:	af 90       	pop	r10
    4238:	08 95       	ret

0000423a <__mulsi3>:
    423a:	62 9f       	mul	r22, r18
    423c:	d0 01       	movw	r26, r0
    423e:	73 9f       	mul	r23, r19
    4240:	f0 01       	movw	r30, r0
    4242:	82 9f       	mul	r24, r18
    4244:	e0 0d       	add	r30, r0
    4246:	f1 1d       	adc	r31, r1
    4248:	64 9f       	mul	r22, r20
    424a:	e0 0d       	add	r30, r0
    424c:	f1 1d       	adc	r31, r1
    424e:	92 9f       	mul	r25, r18
    4250:	f0 0d       	add	r31, r0
    4252:	83 9f       	mul	r24, r19
    4254:	f0 0d       	add	r31, r0
    4256:	74 9f       	mul	r23, r20
    4258:	f0 0d       	add	r31, r0
    425a:	65 9f       	mul	r22, r21
    425c:	f0 0d       	add	r31, r0
    425e:	99 27       	eor	r25, r25
    4260:	72 9f       	mul	r23, r18
    4262:	b0 0d       	add	r27, r0
    4264:	e1 1d       	adc	r30, r1
    4266:	f9 1f       	adc	r31, r25
    4268:	63 9f       	mul	r22, r19
    426a:	b0 0d       	add	r27, r0
    426c:	e1 1d       	adc	r30, r1
    426e:	f9 1f       	adc	r31, r25
    4270:	bd 01       	movw	r22, r26
    4272:	cf 01       	movw	r24, r30
    4274:	11 24       	eor	r1, r1
    4276:	08 95       	ret

00004278 <__divmodsi4>:
    4278:	97 fb       	bst	r25, 7
    427a:	09 2e       	mov	r0, r25
    427c:	05 26       	eor	r0, r21
    427e:	0e d0       	rcall	.+28     	; 0x429c <__divmodsi4_neg1>
    4280:	57 fd       	sbrc	r21, 7
    4282:	04 d0       	rcall	.+8      	; 0x428c <__divmodsi4_neg2>
    4284:	14 d0       	rcall	.+40     	; 0x42ae <__udivmodsi4>
    4286:	0a d0       	rcall	.+20     	; 0x429c <__divmodsi4_neg1>
    4288:	00 1c       	adc	r0, r0
    428a:	38 f4       	brcc	.+14     	; 0x429a <__divmodsi4_exit>

0000428c <__divmodsi4_neg2>:
    428c:	50 95       	com	r21
    428e:	40 95       	com	r20
    4290:	30 95       	com	r19
    4292:	21 95       	neg	r18
    4294:	3f 4f       	sbci	r19, 0xFF	; 255
    4296:	4f 4f       	sbci	r20, 0xFF	; 255
    4298:	5f 4f       	sbci	r21, 0xFF	; 255

0000429a <__divmodsi4_exit>:
    429a:	08 95       	ret

0000429c <__divmodsi4_neg1>:
    429c:	f6 f7       	brtc	.-4      	; 0x429a <__divmodsi4_exit>
    429e:	90 95       	com	r25
    42a0:	80 95       	com	r24
    42a2:	70 95       	com	r23
    42a4:	61 95       	neg	r22
    42a6:	7f 4f       	sbci	r23, 0xFF	; 255
    42a8:	8f 4f       	sbci	r24, 0xFF	; 255
    42aa:	9f 4f       	sbci	r25, 0xFF	; 255
    42ac:	08 95       	ret

000042ae <__udivmodsi4>:
    42ae:	a1 e2       	ldi	r26, 0x21	; 33
    42b0:	1a 2e       	mov	r1, r26
    42b2:	aa 1b       	sub	r26, r26
    42b4:	bb 1b       	sub	r27, r27
    42b6:	fd 01       	movw	r30, r26
    42b8:	0d c0       	rjmp	.+26     	; 0x42d4 <__udivmodsi4_ep>

000042ba <__udivmodsi4_loop>:
    42ba:	aa 1f       	adc	r26, r26
    42bc:	bb 1f       	adc	r27, r27
    42be:	ee 1f       	adc	r30, r30
    42c0:	ff 1f       	adc	r31, r31
    42c2:	a2 17       	cp	r26, r18
    42c4:	b3 07       	cpc	r27, r19
    42c6:	e4 07       	cpc	r30, r20
    42c8:	f5 07       	cpc	r31, r21
    42ca:	20 f0       	brcs	.+8      	; 0x42d4 <__udivmodsi4_ep>
    42cc:	a2 1b       	sub	r26, r18
    42ce:	b3 0b       	sbc	r27, r19
    42d0:	e4 0b       	sbc	r30, r20
    42d2:	f5 0b       	sbc	r31, r21

000042d4 <__udivmodsi4_ep>:
    42d4:	66 1f       	adc	r22, r22
    42d6:	77 1f       	adc	r23, r23
    42d8:	88 1f       	adc	r24, r24
    42da:	99 1f       	adc	r25, r25
    42dc:	1a 94       	dec	r1
    42de:	69 f7       	brne	.-38     	; 0x42ba <__udivmodsi4_loop>
    42e0:	60 95       	com	r22
    42e2:	70 95       	com	r23
    42e4:	80 95       	com	r24
    42e6:	90 95       	com	r25
    42e8:	9b 01       	movw	r18, r22
    42ea:	ac 01       	movw	r20, r24
    42ec:	bd 01       	movw	r22, r26
    42ee:	cf 01       	movw	r24, r30
    42f0:	08 95       	ret

000042f2 <__prologue_saves__>:
    42f2:	2f 92       	push	r2
    42f4:	3f 92       	push	r3
    42f6:	4f 92       	push	r4
    42f8:	5f 92       	push	r5
    42fa:	6f 92       	push	r6
    42fc:	7f 92       	push	r7
    42fe:	8f 92       	push	r8
    4300:	9f 92       	push	r9
    4302:	af 92       	push	r10
    4304:	bf 92       	push	r11
    4306:	cf 92       	push	r12
    4308:	df 92       	push	r13
    430a:	ef 92       	push	r14
    430c:	ff 92       	push	r15
    430e:	0f 93       	push	r16
    4310:	1f 93       	push	r17
    4312:	cf 93       	push	r28
    4314:	df 93       	push	r29
    4316:	cd b7       	in	r28, 0x3d	; 61
    4318:	de b7       	in	r29, 0x3e	; 62
    431a:	ca 1b       	sub	r28, r26
    431c:	db 0b       	sbc	r29, r27
    431e:	0f b6       	in	r0, 0x3f	; 63
    4320:	f8 94       	cli
    4322:	de bf       	out	0x3e, r29	; 62
    4324:	0f be       	out	0x3f, r0	; 63
    4326:	cd bf       	out	0x3d, r28	; 61
    4328:	09 94       	ijmp

0000432a <__epilogue_restores__>:
    432a:	2a 88       	ldd	r2, Y+18	; 0x12
    432c:	39 88       	ldd	r3, Y+17	; 0x11
    432e:	48 88       	ldd	r4, Y+16	; 0x10
    4330:	5f 84       	ldd	r5, Y+15	; 0x0f
    4332:	6e 84       	ldd	r6, Y+14	; 0x0e
    4334:	7d 84       	ldd	r7, Y+13	; 0x0d
    4336:	8c 84       	ldd	r8, Y+12	; 0x0c
    4338:	9b 84       	ldd	r9, Y+11	; 0x0b
    433a:	aa 84       	ldd	r10, Y+10	; 0x0a
    433c:	b9 84       	ldd	r11, Y+9	; 0x09
    433e:	c8 84       	ldd	r12, Y+8	; 0x08
    4340:	df 80       	ldd	r13, Y+7	; 0x07
    4342:	ee 80       	ldd	r14, Y+6	; 0x06
    4344:	fd 80       	ldd	r15, Y+5	; 0x05
    4346:	0c 81       	ldd	r16, Y+4	; 0x04
    4348:	1b 81       	ldd	r17, Y+3	; 0x03
    434a:	aa 81       	ldd	r26, Y+2	; 0x02
    434c:	b9 81       	ldd	r27, Y+1	; 0x01
    434e:	ce 0f       	add	r28, r30
    4350:	d1 1d       	adc	r29, r1
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	f8 94       	cli
    4356:	de bf       	out	0x3e, r29	; 62
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	cd bf       	out	0x3d, r28	; 61
    435c:	ed 01       	movw	r28, r26
    435e:	08 95       	ret

00004360 <_exit>:
    4360:	f8 94       	cli

00004362 <__stop_program>:
    4362:	ff cf       	rjmp	.-2      	; 0x4362 <__stop_program>
